#!/bin/sh
#-- abiword for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ abiword.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.abisource.com/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=abiword
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-2.6.2}
SVER=$(echo ${VERSION} | awk -F. '{ print $1"."$2 }')
if [ "${SB_NATIVE}" = "NO" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
SLKTARGET=${SLKTARGET:-i486}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES built with gnome support
SB_GNOME=${SB_GNOME:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCDIR2=${NAME}-plugins-${VERSION}
SRCDIR3=${NAME}-extras-${VERSION}
SRCDIR4=${NAME}-docs-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.gz
SRCARCHIVES="${SRCDIR2}.tar.gz ${SRCDIR3}.tar.gz ${SRCDIR4}.tar.gz"

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://abisource.com/downloads/${NAME}/${VERSION}/source/${SRCARCHIVE}"
DL_URL2="http://abisource.com/downloads/${NAME}/${VERSION}/source"
#DL_URL="http://prdownloads.sourceforge.net/${NAME}/${SRCARCHIVE}"
#DL_URL="http://download.sf.net/${NAME}/${SRCARCHIVE}"

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi
for file in ${SRCARCHIVES} ;do
  if ! test -r ${file}; then
    test -r ${CWD}/${file} || wget ${DL_OPTS} ${DL_URL2}/${file} || exit 1
  fi
done

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1

for file in ${SRCARCHIVES} ;do
  if $(file -L ${CWD}/${file} | grep -q ": bzip2"); then
    tar -xjvf ${CWD}/${file} || exit 1
  elif $(file -L ${CWD}/${file} | grep -q ": gzip"); then
    tar -xzvf ${CWD}/${file} || exit 1
  fi
done

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p1 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

sed -i -e '/Icon=/s|_48\.png||g' \
           ${NAME}.desktop || exit 1

export CFLAGS="${SLKCFLAGS}"
export CXXFLAGS="${SLKCFLAGS}"

if [ "${SB_GNOME}" = "YES" ] ;then
  SB_GNOMEOPTS="--enable-gnomeui --enable-gnomevfs"
else
  SB_GNOMEOPTS="--disable-gnomeui --disable-gnomevfs"
fi

SB_CONFIGURE() {
  ./configure \
  --prefix=/usr \
  --sysconfdir=/etc \
  --localstatedir=/var/lib \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --build=${SLKTARGET}-slackware-linux $@
}

SB_CONFIGURE \
  --with-libxml2 ${SB_GNOMEOPTS} || exit 1

make -j${NJOBS} || exit 1

# build abiword-plugins
( cd ${SRCDIR2} || exit 1
  # we need to re-autogen, as we have changed the abicollab automake configuration
  zcat ${CWD}/nextgen.sh.gz > nextgen.sh || exit 1
  chmod 755 nextgen.sh
  ./nextgen.sh || exit 1
  SB_CONFIGURE \
    --disable-gda \
    --disable-gremlin \
    --disable-abicapi \
    --disable-presentation \
    --with-abiword=../ || exit 1
  # Remove libtool predep_objects and postdep_objects wonkiness so that
  # building without -nostdlib doesn't include them twice.  Because we
  # already link with g++, weird stuff happens if you don't let the
  # compiler handle this.
  sed 's/^predep_objects=.*/predep_objects=\"\"/' < libtool > libtool.foo
  sed 's/^postdep_objects=.*/postdep_objects=\"\"/' < libtool.foo > libtool.foobar
  sed 's/-shared -nostdlib/-shared/' < libtool.foobar > libtool
  make -j${NJOBS} || exit 1
) || exit 1

# build the extras
( cd ${SRCDIR3} || exit 1
  # abiword-extras looks at the abiword-${VERSION}.pc pkg-config file to get its location info 
  # however, that file is not installed yet, so just point to it in the abiword source tree 
  export PKG_CONFIG_PATH="../"
  # we need to re-autogen, as we have changed the destdir configuration
  ./autogen.sh
  make || exit 1
) || exit 1

# build the documentation
( cd ${SRCDIR4} || exit 1
  ABI_DOC_PROG=$(pwd)/../src/wp/main/unix/abiword ./make-html.sh || exit 1
) || exit 1

# install abiword
make install DESTDIR=${PKG} || exit 1
# Fix script permission
chmod +x ${PKG}/usr/share/${NAME}-*/scripts/abw2html.pl

# install abiword-plugins
( cd ${SRCDIR2} || exit 1
  make install DESTDIR=${PKG} || exit 1
) || exit 1
# install the extras
( cd ${SRCDIR3} || exit 1
  make install DESTDIR=${PKG} || exit 1
) || exit 1

# install the documentation
( cd ${SRCDIR4} || exit 1
  mkdir -p ${PKG}/usr/share/${NAME}-${SVER}/AbiWord/help
  cp -rp help/* ${PKG}/usr/share/${NAME}-${SVER}/AbiWord/help/
  # some of the help dirs have bad perms (#109261)
  find ${PKG}/usr/share/${NAME}-${SVER}/AbiWord/help/ -type d -exec chmod -c o+rx {} \;
) || exit 1

rm -f ${PKG}/usr/lib/${NAME}-*/plugins/*.la

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)

mkdir -p ${PKG}/usr/share/applications
rm -f ${PKG}/usr/share/applications/abiword.desktop
desktop-file-install --vendor "" \
  --dir ${PKG}/usr/share/applications \
  --remove-category X-Red-Hat-Base \
  --remove-category Application --add-category Office \
  ./abiword.desktop

mkdir -p ${PKG}/usr/share/mime-info
cat > ${PKG}/usr/share/mime-info/${NAME}.mime <<EOF
application/x-abiword
	ext: abw
EOF

mkdir -p ${PKG}/usr/share/icons/hicolor/48x48/apps
cp ${NAME}_48.png \
   ${PKG}/usr/share/icons/hicolor/48x48/apps/${NAME}.png || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  COPYING COPYRIGHT.TXT README.TXT docs ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
    mv ${PKG}/usr/share/man ${PKG}/usr/man
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
      rm -f dir
      gzip -9 *
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

# Replicate slackbuild and patches
mkdir -p ${SBDIR}/patches
install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
               ${CWD}/apply-patches.sh ${CWD}/*.sh.gz ${SBDIR}/
install -m0755 ${CWD}/${NAME}.SlackBuild \
               ${SBDIR}/${NAME}.SlackBuild
install -m0644 ${CWD}/patches/*.gz \
               ${SBDIR}/patches/
sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
        /^BUILD=/s/:-.*}/:-$BUILD}/
        /^ARCH=/s/:-.*}/:-$ARCH}/
        " ${SBDIR}/${NAME}.SlackBuild

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
