#!/bin/bash
#-- binutils for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ binutils.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://sources.redhat.com/binutils
# http://www.kernel.org/pub/linux/utils/kernel/ksymoops/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=binutils
KNAME=ksymoops
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-2.18.50.0.8}
KSYMVER=${KSYMVER:-2.4.11}
KSVER=$(echo ${KSYMVER} | cut -d . -f1-2)
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
SLKTARGET=${SLKTARGET:-i486}
BUILD=${BUILD:-2}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
KDOCDIR=${PKG}/usr/doc/${KNAME}-${KSYMVER}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable test
SB_TEST=${SB_TEST:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
KSRCDIR=${KNAME}-${KSYMVER}
SRCARCHIVE=${SRCDIR}.tar.bz2
SRCARCHIVE2=release.${NAME}-${VERSION}
KSRCARCHIVE=${KSRCDIR}.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="ftp://ftp.kernel.org/pub/linux/devel/${NAME}/${SRCARCHIVE}"
DL_URL2="ftp://ftp.kernel.org/pub/linux/devel/${NAME}/${SRCARCHIVE2}"
KDL_URL="http://www.kernel.org/pub/linux/utils/kernel/${KNAME}/v${KSVER}/${KSRCARCHIVE}"

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi
if ! test -r ${SRCARCHIVE2}; then
  test -r ${CWD}/${SRCARCHIVE2} || wget ${DL_OPTS} ${DL_URL2} || exit 1
fi
if ! test -r ${KSRCARCHIVE}; then
  test -r ${CWD}/${KSRCARCHIVE} || wget ${DL_OPTS} ${KDL_URL} || exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

# Build for an x86 glibc2-based Linux system:
CFLAGS="${SLKCFLAGS}" \
./configure \
  --prefix=/usr \
  --enable-shared \
  --enable-targets=${SLKTARGET}-slackware-linux \
  --enable-64-bit-bfd \
  --build=${SLKTARGET}-slackware-linux || exit 1

make clean || exit 1
make -j${NJOBS} || exit 1
make info || exit 1

if [ "${SB_TEST}" = "YES" ] ;then 
make -k check < /dev/null > check.log 2>&1
  echo '====================TESTING========================='
  cat check.log || exit 1
  echo '====================TESTING END====================='
fi
# Rebuild libiberty.a with -fPIC
make -C libiberty clean || exit 1
make CFLAGS="-g -fPIC ${SLKCFLAGS}" -C libiberty || exit 1

# Install into the $PKG location:
make install DESTDIR=${PKG} || exit 1

rm -rf ${PKG}/usr/lib/ldscripts

# Add fresh ldscripts:
cp -a ${PKG}/usr/${SLKTARGET}-slackware-linux/lib/ldscripts ${PKG}/usr/lib/ || exit 1

mv ${PKG}/usr/bin/strings ${PKG}/usr/bin/strings-GNU
mv ${PKG}/usr/man/man1/strings.1 ${PKG}/usr/man/man1/strings-GNU.1 || exit 1

chmod +x ${PKG}/usr/lib/lib*.so*

# Missing?
cp -a gas/doc/as.1 ${PKG}/usr/man/man1/

# "make install" skips this, but binutils.spec doesn't.  Sneaky, huh?
cp -a include/libiberty.h ${PKG}/usr/include/libiberty.h

# Remove Windows/Novell only man pages
rm -f ${PKG}/usr/man/man1/{dlltool,nlmconv,windres}*

# Now we must remember to adjust ldscripts (real dir is /usr/lib/ldscripts/,
# links go in /usr/*-linux/lib/ ), and the bin links:
mkdir -p ${PKG}/usr/${SLKTARGET}-slackware-linux/lib
( cd ${PKG}/usr/${SLKTARGET}-slackware-linux/lib ; rm -rf ldscripts ; ln -sf ../../lib/ldscripts . )
mkdir -p ${PKG}/usr/${SLKTARGET}-slackware-linux/bin
( cd ${PKG}/usr/${SLKTARGET}-slackware-linux/bin
  for file in * ; do
    if [ -r "../../bin/${file}" ]; then
      rm -f ${file}
      ln -sf ../../bin/${file} .
    fi
  done
)

# By adding ksymoops to the binutils package, we can use the dynamic
# libbfd and make the binary about 500K smaller.
(
  if $(file -L ${CWD}/${KSRCARCHIVE} | grep -q ": bzip2"); then
    tar -xjvf ${CWD}/${KSRCARCHIVE} || exit 1
  elif $(file -L ${CWD}/${KSRCARCHIVE} | grep -q ": gzip"); then
    tar -xzvf ${CWD}/${KSRCARCHIVE} || exit 1
  fi

  cd ${KSRCDIR} || exit 1
  zcat ${SB_PATCHDIR}/${KNAME}.dynamic.bfd.diff.gz | patch -p1 -E --backup --verbose || exit 1

  chmod -R u+w,go+r-w,a-s .
  
  export PATH="${PKG}/usr/bin:${PATH}"
  export LD_LIBRARY_PATH="${PKG}/usr/lib"
  
  make BFD_PREFIX=${PKG}/usr || exit 1

  mkdir -p ${PKG}/usr/bin
  cat ksymoops > ${PKG}/usr/bin/ksymoops || exit 1
  chmod 755 ${PKG}/usr/bin/ksymoops
  mkdir -p ${PKG}/usr/man/man8
  cat ksymoops.8 > ${PKG}/usr/man/man8/ksymoops.8 || exit 1

  mkdir -p ${KDOCDIR}
  cp -a \
    COPYING Changelog README* \
    ${KDOCDIR}/
  find ${KDOCDIR}/ -type f -print0 | xargs -0 chmod 0644
) || exit 1

# Prevent programs to link against libbfd and libopcodes dynamically,
# they are changing far too often (ksymoops is a exception :) )
rm -f ${PKG}/usr/lib/lib{bfd,opcodes}.so || exit 1

# Remove libtool files, which reference the .so libs
rm -f ${PKG}/usr/lib/lib{bfd,opcodes}.la

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
)

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  ${CWD}/${SRCARCHIVE2} COPYING* ChangeLog.linux MAI* README* \
  ${CWD}/ChangeLog.SB ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

rm -rf ${PKG}/usr/info
mkdir -p ${PKG}/usr/info
find . -name "as.info*" -exec cp -a {} ${PKG}/usr/info \;
find . -name "bfd.info*" -exec cp -a {} ${PKG}/usr/info \;
find . -name "ld.info*" -exec cp -a {} ${PKG}/usr/info \;
find . -name "gasp.info*" -exec cp -a {} ${PKG}/usr/info \;
find . -name "gprof.info*" -exec cp -a {} ${PKG}/usr/info \;
find . -name "binutils.info*" -exec cp -a {} ${PKG}/usr/info \;

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
    rm -f dir
    gzip -9 *
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
# Install the info files for this package
if [ -x usr/bin/install-info ] ; then
  \${CHROOT} /usr/bin/install-info --info-dir=/usr/info usr/info/bfd.info.gz 2>/dev/null
fi

EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.gz \
                 ${SBDIR}/patches/
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^  ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
