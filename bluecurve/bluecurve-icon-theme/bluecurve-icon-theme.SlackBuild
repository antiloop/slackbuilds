#!/bin/sh
#-- bluecurve-icon-theme for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ bluecurve-icon-theme.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.redhat.com

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=bluecurve-icon-theme
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-8.0.2}
ARCH=noarch
BUILD=${BUILD:-4}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/bluecurve/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable support for slack-artwork
SB_SLKART=${SB_SLKART:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
#DL_URL="http://dl.sf.net/sourceforge/${NAME}/${SRCARCHIVE}"
#DL_URL="http://prdownloads.sourceforge.net/${NAME}/${SRCARCHIVE}"
#DL_URL="http://download.sf.net/${NAME}/${SRCARCHIVE}"


# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  #test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
  test -r ${CWD}/${SRCARCHIVE} || echo "Download ${SRCARCHIVE} in a Fedora mirror." && exit 1
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1

THEMEDIR=${PKG}/usr/share/icons/Bluecurve

mkdir -p ${PKG}/usr/share/icons
# Install classic cursors
tar -xjvf ${CWD}/Bluecurve-classic.tar.bz2 -C ${PKG}/usr/share/icons/ || exit 1
find ${PKG}/usr/share/icons/ -type d -print0 | xargs -0 chmod 0755
find ${PKG}/usr/share/icons/ -type f -print0 | xargs -0 chmod 0644

./configure \
  --prefix=/usr \
  --sysconfdir=/etc \
  --localstatedir=/var/lib \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} || exit 1

make || exit 1
make install DESTDIR=${PKG} || exit 1

rmdir ${PKG}/usr/share/locale

# Fix cursors
for dir in {,L}Bluecurve{,-inverse} ; do
  ( cd ${PKG}/usr/share/icons/${dir}/cursors
    ln -s hand1 9d800788f1b08800ae810202380a0822
    ln -s hand1 all-scroll
    ln -s hand1 5aca4d189052212118709018842178c0 
    ln -s hand2 e29285e634086352946a0e7090d73106
    ln -s hand2 pointer
    ln -s cross cell
    ln -s dnd-copy 6407b0e94181790501fd1e167b474872
    ln -s dnd-copy 1081e37283d90000800003c07f3ef6bf
    ln -s dnd-copy 08ffe1cb5fe6fc01f906f1c063814ccf
    ln -s dnd-copy copy
    ln -s dnd-move 4498f0e0c1937ffe01fd06f973665830
    ln -s dnd-move 9081237383d90e509aa00f00170e968f
    ln -s dnd-link alias
    ln -s dnd-link 0876e1c15ff2fc01f906f1c363074c0f
    ln -s dnd-move move
    ln -s dnd-none 03b6e0fcb3499374a867c041f52298f0
    ln -s dnd-none no-drop
    ln -s left_ptr default
    ln -s left_ptr_watch 3ecb610c1bf2410f44200f48c40d3599
    ln -s left_ptr_watch 0426c94ea35c87780ff01dc239897213
    ln -s left_ptr_watch wait
    ln -s left_ptr_watch 9116a3ea924ed2162ecab71ba103b17f
    ln -s left_ptr_watch progress
    ln -s top_right_corner fcf1c3c7cd4491d801f1e1c78f100000
    ln -s top_right_corner nesw-resize
    ln -s plus 6407b0e94181790501fd1e167b474872
    ln -s plus 3085a0e285430894940527032f8b26df
    ln -s sb_h_double_arrow 14fef782d02440884392942c11205230
    ln -s sb_h_double_arrow 028006030e0e7ebffc7f7070c0600140
    ln -s sb_h_double_arrow col-resize
    ln -s sb_h_double_arrow ew-resize
    ln -s top_left_corner c7088f0f3e6c8088236ef8e1e3e70000
    ln -s top_left_corner nwse-resize
    ln -s sb_v_double_arrow 2870a09082c103050810ffdffffe0204
    ln -s sb_v_double_arrow row-resize
    ln -s question_arrow d9ce0ab605698f320427677b458ad60b
    ln -s question_arrow help
    ln -s double_arrow 00008160000006810000408080010102
    ln -s double_arrow ns-resize
    ln -s xterm term
  ) || exit 1
done

for dir in {,L}Bluecurve-inverse ; do
  ( cd ${PKG}/usr/share/icons/${dir}/cursors
    ln -s question_arrow 5c6cd98b3f3ebcb1f9c7f1c204630408
  ) || exit 1
done

zcat ${CWD}/link.png.gz > \
     ${PKG}/usr/share/icons/Bluecurve/96x96/filesystems/link.png || exit 1
for s in 16x16 24x24 32x32 36x36 48x48 ; do
  src=${PKG}/usr/share/icons/Bluecurve/96x96/filesystems/link.png
  dir=${PKG}/usr/share/icons/Bluecurve/${s}/filesystems
  convert ${src} -depth 8 -filter Lanczos -resize ${s} \
          ${dir}/link.png || exit 1
done

# Fix openoffice.org/broffice.org icons
for d in 48x48 32x32 24x24 16x16; do
  ( cd ${THEMEDIR}/${d}/apps
      for file in openofficeorg-*.png ;do
        ln -s ${file} ${file/openofficeorg/brofficeorg} || exit 1
      done
  ) || exit 1
done
for d in 48x48 24x24 16x16; do
  ( cd ${THEMEDIR}/${d}/mimetypes
      for file in openofficeorg-*.png ;do
        ln -s ${file} ${file/openofficeorg/brofficeorg} || exit 1
      done
  ) || exit 1
done

( cd ${THEMEDIR}/96x96/mimetypes
  for file in openofficeorg-*.png ;do
    ln -s ${file} ${file/openofficeorg/brofficeorg} || exit 1
  done
) || exit 1

for s in 16x16 24x24 48x48 96x96 ; do
  ( cd ${THEMEDIR}/${s}/mimetypes
    for file in openofficeorg-drawing*.png ; do
      ln -s file-vector-art.png ${file/openofficeorg/brofficeorg}
    done
    for file in openofficeorg-oasis-master-*.png openofficeorg-{oasis-,}text*.png ; do
      ln -s file-wordprocessor.png ${file/openofficeorg/brofficeorg}
    done
    for file in openofficeorg-{oasis-,}presentation*.png ; do
      ln -s file-presentation.png  ${file/openofficeorg/brofficeorg}
    done
    for file in openofficeorg-{oasis-,}spreadsheet*.png ; do
      ln -s file-spreadsheet.png ${file/openofficeorg/brofficeorg}
    done
    ln -s file-vector_art.png drawing.png
    ln -s file-presentation.png presentation.png
    # KOffice icons
    ln -s file-vector_art.png karbon_karbon.png
    ln -s file-presentation.png kpresenter_kpr.png
    ln -s file-wordprocessor.png kword_kwd.png
    ln -s file-spreadsheet.png kspread_ksp.png
  ) || exit 1
done

if [ "${SB_SLKART}" = "YES" ] ;then
  for size in 16x16 20x20 24x24 32x32 36x36 48x48 96x96 ; do
    mkdir -p ${PKG}/usr/share/icons/Bluecurve/${size}/apps
    ( cd ${PKG}/usr/share/icons/Bluecurve/${size}/apps
      ln -s ../../../hicolor/${size}/apps/slack-logo-icon.png icon-panel-menu.png
      ln -s ../../../hicolor/${size}/apps/slack-logo-icon.png gnome-main-menu.png
      ln -s ../../../hicolor/${size}/apps/slack-logo-icon.png kmenu.png
      ln -s ../../../hicolor/${size}/apps/slack-logo-icon.png start-here.png
    ) || exit 1
  done
fi

touch ${PKG}/usr/share/icons/Bluecurve/icon-theme.cache

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS COPYING ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
      rm -f dir
      gzip -9 *
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
if [ -d usr/share/icons/Bluecurve ]; then
  if [ -x usr/bin/gtk-update-icon-cache ]; then
    \${CHROOT} /usr/bin/gtk-update-icon-cache -f -q  -t usr/share/icons/Bluecurve > /dev/null 2>&1
  fi
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/link.png.gz ${CWD}/Bluecurve-classic.tar.bz2 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
