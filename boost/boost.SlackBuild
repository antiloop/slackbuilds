#!/bin/sh
#-- boost for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ boost.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.boost.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=boost
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-1.35.0}
SONAMEVER=3
PVER=$(echo ${VERSION} | tr . _ )
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
SLKTARGET=${SLKTARGET:-i486}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable tests
SB_TEST=${SB_TEST:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}_${PVER}
SRCARCHIVE=${SRCDIR}.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
SF_MIRROR=${SF_MIRROR:-http://prdownloads.sourceforge.net}
DL_URL="${SF_MIRROR}/${NAME}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

sed -i \
  -e "/flags gcc.compile OPTIONS <optimization>speed/s|-O3|\"${SLKCFLAGS}\"|g" \
  tools/build/v2/tools/gcc.jam || exit 1

if [ "${LDFLAGS}" ] ;then
  sed -i -e "s|\$(SLKLDFLAGS)|${LDFLAGS}|g" tools/build/v2/tools/gcc.jam || exit 1
  unset LDFLAGS
fi

BOOST_ROOT=$(pwd)
staged_dir=stage
export BOOST_ROOT

# build make tools, ie bjam, necessary for building libs, docs, and testing
( cd tools/jam/src && ./build.sh ) || exit 1
BJAM=$(find tools/jam/src/ -name bjam -a -type f) || exit 1

#BUILD_FLAGS="--with-toolset=gcc --prefix=$RPM_BUILD_ROOT%{_prefix}"
BUILD_FLAGS="--with-toolset=gcc"
PYTHON_VERSION=$(python -c 'import sys; print sys.version[:3]')
PYTHON_FLAGS="--with-python-root=/usr --with-python-version=$PYTHON_VERSION"
REGEX_FLAGS="--with-icu"
./configure --prefix=/usr ${BUILD_FLAGS} ${PYTHON_FLAGS} ${REGEX_FLAGS} || exit 1

make all || exit 1

# build docs, requires a network connection for docbook XSLT stylesheets
#cd ./doc
#chmod +x ../tools/boostbook/setup_boostbook.sh
#../tools/boostbook/setup_boostbook.sh
#$BOOST_ROOT/$BJAM --v2 -sICU_PATH=/usr --user-config=../user-config.jam html
#cd ..

if [ "${SB_TEST}" = "YES" ] ;then
  echo '====================TESTING========================='
  echo "<p>" $(uname -a) "</p>" > status/regression_comment.html
  echo "" >> status/regression_comment.html
  echo "<p>" $(g++ --version) "</p>" >> status/regression_comment.html
  echo "" >> status/regression_comment.html

  chmod +x tools/regression/src/run_tests.sh
  ./tools/regression/src/run_tests.sh

  results1=status/cs-$(uname).html
  results2=status/cs-$(uname)-links.html
  email=benjamin.kosnik@gmail.com
  if [ -f ${results1} ] && [ -f ${results2} ]; then
    echo "sending results starting"
    testdate=$(date +%Y%m%d)
    testarch=$(uname -m)
    results=boost-results-${testdate}-${testarch}.tar.bz2
    tar -cvf boost-results-${testdate}-${testarch}.tar ${results1} ${results2}
    bzip2 -f boost-results-${testdate}-${testarch}.tar 
    echo | mutt -s "${testdate} boost regression ${testarch}" -a ${results} ${email} 
    echo "sending results finished"
  else
    echo "error sending results"
    exit 1
  fi
  echo '====================TESTING END====================='
fi

# install
# install lib
mkdir -p ${PKG}/usr/lib
for i in $( find stage -type f -name \*.a ); do
  NAMEL=$( basename ${i} );
  install -p -m 0644 ${i} ${PKG}/usr/lib/${NAMEL} || echo "error" >> soinstall-error
done
for i in $( find stage -type f -name \*.so ); do
  NAMEL=${i};
  SONAME=${i}.${SONAMEVER};
  VNAME=${i}.${VERSION};
  base=$(basename $i);
  NAMELbase=${base};
  SONAMEbase=${base}.${SONAMEVER};
  VNAMEbase=${base}.${VERSION};
  mv ${i} ${VNAME} || echo "error" >> soinstall-error
  ln -s ${VNAMEbase} ${SONAME} || echo "error" >> soinstall-error
  ln -s ${VNAMEbase} ${NAMEL} || echo "error" >> soinstall-error
  install -p -m 755 ${VNAME} ${PKG}/usr/lib/${VNAMEbase} || echo "error" >> soinstall-error
  mv ${SONAME} ${PKG}/usr/lib/${SONAMEbase} || echo "error" >> soinstall-error
  mv ${NAMEL} ${PKG}/usr/lib/${NAMELbase} || echo "error" >> soinstall-error
done
if [ -f soinstall-error ] ;then
  exit 1
fi

# install include files
mkdir -p ${PKG}/usr/include
for i in $( find boost -type d ); do
  mkdir -p ${PKG}/usr/include/${i}
done
for i in $( find boost -type f ); do
  install -p -m 644 ${i} ${PKG}/usr/include/${i}
done

# remove scripts used to generate include files 
find ${PKG}/usr/include/ \( -name '*.pl' -o -name '*.sh' \) -exec rm {} \;

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
( cd doc/html; 
  for i in $( find . -type d ); do
    mkdir -p ${DOCDIR}/${i}
  done
  for i in $( find . -type f ); do
    install -p -m 644 ${i} ${DOCDIR}/${i}
  done
)
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
    rm -f dir
    gzip -9 *
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.gz \
                 ${SBDIR}/patches/
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^  ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
