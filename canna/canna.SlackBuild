#!/bin/sh
#-- canna for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ canna.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.nec.co.jp/japanese/product/computer/soft/cann

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=Canna
NAME=canna
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-37p3}
DVER=${DVER:-0.95c}
PDVER=${PDVER:-20021028}
ZVER=${ZVER:-20030204}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
SLKTARGET=${SLKTARGET:-i486}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}${VERSION}
DSRCDIR=cannadic-${DVER}
PDSRCDIR=pubdic-bonobo
SSRCDIR=shion
ZSRCDIR=zipcode-${ZVER}
SRCARCHIVE=${SRCDIR}.tar.bz2
DSRCARCHIVE=${DSRCDIR}.tar.gz
PDSRCARCHIVE=${PDSRCDIR}-${PDVER}.tar.bz2
SSRCARCHIVE=${SSRCDIR}.tar.gz
ZSRCARCHIVE=${ZSRCDIR}.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://prdownloads.sourceforge.jp/${NAME}/9565/${SRCARCHIVE}"
DDL_URL="http://cannadic.oucrc.org/${DSRCARCHIVE}"

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi
if ! test -r ${DSRCARCHIVE}; then
  test -r ${CWD}/${DSRCARCHIVE} || wget ${DL_OPTS} ${DDL_URL} || exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1
for file in ${DSRCARCHIVE} ${PDSRCARCHIVE} ${SSRCARCHIVE} ${ZSRCARCHIVE} ;do
  if $(file -L ${CWD}/${file} | grep -q ": bzip2"); then
    tar -xjvf ${CWD}/${file} || exit 1
  elif $(file -L ${CWD}/${file} | grep -q ": gzip"); then
    tar -xzvf ${CWD}/${file} || exit 1
  fi
done

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

export SLKCFLAGS
export LOCAL_LDFLAGS="${LDFLAGS}"

for file in {cmd/mkromdic/mkromdic.man,lib/RK/RkIntro.man}; do
  iconv -f euc-jp -t utf-8 < "${file}" > "${file}_"
  mv "${file}_" "${file}"
done

cat ${ZSRCDIR}/zipcode.t ${ZSRCDIR}/jigyosyo.t | sort > \
    dic/ideo/words/zipcode.t || exit 1

cat ${PDSRCDIR}/*.p | sort >> \
    dic/ideo/pubdic/y.p || exit 1

# find CVS files and remove it.
find . -name .cvsignore -exec rm -f {} \;

function builddic() {
  dic=$1
  dicname=`echo ${dic} | sed -e 's/\(.*\)\..*\$/\1/'`
  case $2 in
    mwd)
      mode="mwd";
      flag="-m";
      ;;
    swd)
      mode="swd";
      flag="-s";
      ;;
    *)
      echo "unknown dictionary type: $2";
      exit 1;
      ;;
  esac
  export buildcannadir=${TMP}/${SRCDIR}
  if [ "x$3" = "xsort" ]; then
    ${buildcannadir}/cmd/splitwd/splitword ${dic} | ${buildcannadir}/cmd/forsort/forsort -7 | sort | ${buildcannadir}/cmd/forsort/forsort -8 | ${buildcannadir}/cmd/mergewd/mergeword > ${dicname}.${mode}
  else
    cat ${dic} > ${dicname}.${mode}
  fi
  ${buildcannadir}/cmd/crxdic/crxdic -D ${buildcannadir}/dic/ideo/grammar/cnj.bits ${flag} -o ${dicname}.cbd -n ${dicname} ${dicname}.${mode}
  ${buildcannadir}/cmd/crfreq/crfreq -div 512 -o ${dicname}.cld ${dicname}.cbd ${dicname}.${mode}
  rm -f ${dicname}.${mode}
}

xmkmf || exit 1
make Makefile
pushd lib/canna
  xmkmf
  make sglobal.h || exit 1
popd
find . -name Makefile | xargs sed -i -e 's/^\(\s*CDEBUGFLAGS\s*=.*\)/\1 $(SLKCFLAGS)/'
# ugly hack to avoid X.Org: no such file or directory issue
sed -i -e 's/$(VENDOR_DEFINES)//' Makefile
make canna || exit 1
zcat ${CWD}/cannaping.c.gz > cannaping.c || exit 1
( set -o xtrace
  gcc ${SLKCFLAGS} ${LDFLAGS} -o ./misc/cannaping cannaping.c -I./include -L./lib/canna -lcanna || exit 1
) || exit 1

pushd ${DSRCDIR} || exit 1
  for i in ${TMP}/${SRCDIR}/cmd/*; do \
    if [ -d $i ]; then \
      export PATH=$PATH:$i; \
    fi \
  done;
  export RPM_CANNAIDEO_DIR=${TMP}/${SRCDIR}/dic/ideo
  export RPM_CANNACMD_DIR=${TMP}/${SRCDIR}/cmd
  export RPM_CANNA_POD=${TMP}/${SRCDIR}/dic/ideo/pubdic/pod
  builddic gcanna.ctd mwd none || exit 1
  builddic gcannaf.ctd swd none || exit 1
popd

pushd ${PDSRCDIR} || exit 1
  cat *.p | ${RPM_CANNA_POD} - -p -i -2 > bonobo.spl
  ${RPM_CANNACMD_DIR}/mergewd/mergeword< bonobo.spl > bonobo.t
  rm -rf bonobo.spl
  builddic bonobo.t mwd sort || exit 1
popd

pushd ${SSRCDIR} || exit 1
  builddic basho.ctd mwd sort || exit 1
  builddic keisan.ctd mwd sort || exit 1
  builddic pub.ctd mwd sort || exit 1
  builddic scien.ctd mwd none || exit 1
  builddic sup.ctd mwd sort || exit 1
popd

# Install
make libCannaDir=/usr/lib DESTDIR=${PKG} install || exit 1
make DESTDIR=${PKG} MANDIR=/usr/man MANSUFFIX=1 LIBMANSUFFIX=3 install.man || exit 1
for i in $(find ${PKG}/usr/man/ja -type f); do
  iconv -f euc-jp -t utf-8 $i > $i.new && mv -f $i.new $i && chmod 444 $i
done
install -c -s -m755 ./misc/cannaping ${PKG}/usr/bin/cannaping || exit 1

mv misc/manual.sed .
rm -rf misc
mkdir misc
mv manual.sed misc

( cd ${DSRCDIR}
  mkdir -p ${PKG}/var/lib/canna/dic/canna
  install -m 644 gcanna*.c[bl]d \
    ${PKG}/var/lib/canna/dic/canna/ || exit 1
) || exit 1

( cd ${PDSRCDIR}
  install -m 644 bonobo*.c[bl]d \
        ${PKG}/var/lib/canna/dic/canna/ || exit 1
) || exit 1

( cd ${SSRCDIR}
  install -m 644 basho.cld basho.cbd kaom.ctd keisan.cld keisan.cbd \
    pub.cld pub.cbd scien.cld scien.cbd sup.cld sup.cbd \
    ${PKG}/var/lib/canna/dic/canna/ || exit 1
) || exit 1

mkdir -p ${PKG}/etc/skel
zcat ${CWD}/dot-canna.gz > ${PKG}/etc/skel/.canna || exit 1
zcat ${CWD}/dot-canna.gz > ${PKG}/etc/canna/default.canna.new || exit 1

echo 'unix' > ${PKG}/etc/hosts.canna.new
echo 'unix' > ${PKG}/etc/canna/cannaho.new

for bin in addwords cpdic delwords lsdic mkdic mvdic rmdic syncdic ; do
  ln -sf catdic ${PKG}/usr/bin/${bin}
done
ln -sf ../bin/catdic ${PKG}/usr/sbin/cannakill

mv ${PKG}/etc/canna/sample .
mkdir -p ${PKG}/var/run/.iroha_unix

# Startup scripts.
mkdir -p ${PKG}/etc/rc.d
zcat ${CWD}/rc.${NAME}.gz > \
     ${PKG}/etc/rc.d/rc.${NAME}.new || exit 1
chmod 0755 ${PKG}/etc/rc.d/rc.${NAME}.new

mkdir -p ${PKG}/var/log/setup
zcat ${CWD}/setup.onlyonce.rc${NAME}.gz > \
     ${PKG}/var/log/setup/setup.onlyonce.rc${NAME} || exit 1
chmod 0755 ${PKG}/var/log/setup/setup.onlyonce.rc${NAME}

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  CHANGES.jp OCHANGES.jp README.jp RKCCONF.jp WHATIS.jp ChangeLog README \
  WHATIS Canna.conf sample ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
#!/bin/sh
function free_user_id {
  # Find a free user-ID >= 120 (should be < 1000 so it's not a normal user)
  local FREE_USER_ID=100
  while grep --quiet "^.*:.*:${FREE_USER_ID}:.*:.*:.*:" etc/passwd; do
    let FREE_USER_ID++
  done
  echo ${FREE_USER_ID}
}
function free_group_id {
  # Find a free group-ID >= 120 (should be < 1000 so it's not a normal group)
  local FREE_GROUP_ID=120
  while grep --quiet "^.*:.*:${FREE_GROUP_ID}:" etc/group; do
    let FREE_GROUP_ID++
  done
  echo ${FREE_GROUP_ID}
}

# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
  CHROOT="chroot ${ROOTDIR} "
  ROOTDIR="${ROOTDIR}/"
fi

# Set up group.
if ! grep --quiet '^canna:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
            -g $(free_group_id) \
            canna 2> /dev/null
fi

# Set up user: add it if it doesn't exist, update it if it already does.
if OLD_ENTRY=$(grep --max-count=1 '^canna:' etc/passwd) \
  || OLD_ENTRY=$(grep --max-count=1 \
  ':/var/lib/canna:[a-z/]*$' etc/passwd)
then
  # Modify existing user
  OLD_USER=$(echo ${OLD_ENTRY} | cut --fields=1 --delimiter=':')
  USER_ID=$(echo ${OLD_ENTRY} | cut --fields=3 --delimiter=':')
  test ${USER_ID} -ge 1000 && USER_ID=$(free_user_id)
  if test "${OLD_USER}" = "canna"; then
    echo -n "Updating unprivileged user" 1>&2
  else
    echo -ne "Changing unprivileged user \e[1m${OLD_USER}\e[0m to" 1>&2
  fi
  ${CHROOT} /usr/sbin/usermod \
            -d /var/lib/canna \
            -u ${USER_ID} \
            -s /bin/false \
            -g canna \
            ${OLD_USER} 2> /dev/null
else
  # Add new user
  echo -n "Creating unprivileged user" 1>&2
  ${CHROOT} /usr/sbin/useradd \
           -d /var/lib/canna \
           -c "Canna Service User" \
           -u $(free_user_id) \
           -s /bin/false \
           -g canna \
           canna 2> /dev/null
fi

EOF

cat >> ${PKG}/install/doinst.sh <<EOF
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.${NAME}.new:
if [ -e etc/rc.d/rc.${NAME} ]; then
  cp -a etc/rc.d/rc.${NAME} etc/rc.d/rc.${NAME}.new.incoming
  cat etc/rc.d/rc.${NAME}.new > etc/rc.d/rc.${NAME}.new.incoming
  mv etc/rc.d/rc.${NAME}.new.incoming etc/rc.d/rc.${NAME}.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
# Fix permissions
${CHROOT} /bin/chown canna.canna /var/run/.iroha_unix
${CHROOT} /bin/chown canna.canna /var/lib/canna
${CHROOT} /bin/chown canna.canna /var/log/canna
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${CWD}/canna*.c.gz ${CWD}/dot-*.gz \
                 ${CWD}/rc.*.gz ${CWD}/setup.*rc${NAME}.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.gz \
                 ${SBDIR}/patches
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^  ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
