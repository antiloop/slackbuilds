#!/bin/bash
#-- cedega-small for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ cedega-small.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://transgaming.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=cedega
NAME=${PNAME}-small
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-6.0.2}
ARCH=i386
BUILD=${BUILD:-2}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tgz

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://www.transgaming.com/download.php"

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || echo "Download ${SRCDIR}.tgz at ${DL_URL}" && exit 1
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${PKG} || exit 1
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1

chmod -R u+w,go+r-w,a-s .
chmod -x usr/lib/transgaming_cedega/config*

sed -i -e 's/\r//' \
           usr/lib/transgaming_cedega/transgaming_fontinstaller/LICENSE

if [ -d etc ]; then
  rm -rf etc
fi
if [ -d opt ]; then
  rm -rf opt
fi

rm -rf usr/share/{applications/*.desktop,gnome} || exit 1
cat > ${PKG}/usr/share/applications/${PNAME}.desktop <<EOF
[Desktop Entry]
Encoding=UTF-8
Name=TransGaming Cedega
Comment=Run Windows(tm) games
Exec=${PNAME}
Icon=${PNAME}
Terminal=false
Type=Application
Categories=Game;
EOF

rm -rf usr/share/{icons/*.xpm,pixmaps}

( cd usr/share/icons/
  mkdir hicolor
  mv *x* hicolor/
  for res in 16 32 48 ;do
    mkdir -p hicolor/${res}x${res}/apps
    mv hicolor/${res}x${res}/*.png hicolor/${res}x${res}/apps/
    ln -sf transgaming.png hicolor/${res}x${res}/apps/${PNAME}.png
  done
) || exit 1

mv usr/share/man usr/ || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
for doc in CREDITS LICENSE cedega_license.txt Point2Play_howto.txt ;do
  ln -sf /usr/lib/transgaming_cedega/${doc} ${DOCDIR}/${doc}
done
for html in ${CWD}/Cedega*.html.gz ;do
  zcat ${html} > ${DOCDIR}/"$( basename ${html%.gz} )"
done
mv usr/share/doc/${NAME}/* ${DOCDIR}/
rm -rf usr/share/doc || exit 1
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
    rm -f dir
    gzip -9 *
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/Cedega*.html.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^  ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
