#!/bin/bash
#-- firefox for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ firefox.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil..
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.mozilla.org/projects/firefox/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=firefox
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-3.0}
VERSION_INTERNAL=3.0
GECKO_VERSION=1.9
FXAPP_ID="{ec8030f7-c20a-464f-9b0e-13a3a9e97384}"
SLKDIST=${SLKDIST:-Slackware}
SLKVER=${SLKVER:-12.1.0}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
SLKTARGET=${SLKTARGET:-i486}
BUILD=${BUILD:-2}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable languages.
SB_LANG=${SB_LANG:-YES}

# Set to YES to build with gnome libraries support.
SB_GNOME=${SB_GNOME:-NO}
# If you enable official branding, do not redistribute this build
# to any users on your network or the internet. Doing so puts yourself into
# a legal problem with mozilla foundation"
SB_OFFICIAL=${SB_OFFICIAL:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

FXLANGS=${FXLANGS:-"af ar be bg ca cs da de el en-GB es-AR es-ES eu fi fr fy-NL ga-IE gu-IN he hu it ja ka ko ku lt mk mn nb-NO nl nn-NO pa-IN pl pt-BR pt-PT ro ru sk sl sv-SE tr zh-CN zh-TW"}
NOSHORTLANGS=${NOSHORTLANGS:-"en-GB es-AR pt-BR zh-TW"}
LANGDIR=${CWD}/langpacks/${VERSION}
LANGDOWNALL=${LANGDOWNALL:-NO}

# Set default page
SB_INDEXHTML=${SB_INDEXHTML:-http://www.slackware.com/}

# Set default mail application
SB_DMAIL=${SB_DMAIL:-/usr/bin/thunderbird}

SRCDIR=mozilla
SRCARCHIVE=${NAME}-${VERSION}-source.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://releases.mozilla.org/pub/mozilla.org/${NAME}/releases/${VERSION}/source/${SRCARCHIVE}"
LDL_URL="http://releases.mozilla.org/pub/mozilla.org/${NAME}/releases/${VERSION}/linux-i686/xpi"

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi

if [ "${SB_LANG}" = "YES" ] ;then
  FXLANGS=${FXLANGS/_/-}

  echo -n "Selected langpacks: "
  echo ${FXLANGS}
  read junk

  mkdir -p ${LANGDIR}

  if [ "${LANGDOWNALL}" = "NO" ] ;then
    for lang in ${FXLANGS} ;do
      if ! test -r ${LANGDIR}/${lang}.xpi ; then
        test -r ${LANGDIR}/${lang}.xpi || wget ${DL_OPTS} -P ${LANGDIR} ${LDL_URL}/${lang}.xpi || exit 1
      fi
    done
  else
    wget -P ${LANGDIR} -m -np -c -nd ${LDL_URL}/
    rm -f ${LANGDIR}/{index.*,robots.txt,.listing}
  fi
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe -mfpmath=sse -D_FORTIFY_SOURCE=2"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

# Add Slackware to custom dists (fix some web user agent recognizing scripts)
[ "${SLKDIST}" != "Slackware" ] && export SLKDIST="${SLKDIST} (Slackware)"

rm -f .mozconfig
cat ${CWD}/${NAME}-mozconfig > .mozconfig || exit 1

if [ "${SB_GNOME}" = "NO" ] ;then
  echo "ac_add_options --disable-gnomeui" >> .mozconfig || exit 1
  echo "ac_add_options --disable-gnomevfs" >> .mozconfig || exit 1
  export MOZ_DISABLE_GNOME=1
fi

if [ "${SB_OFFICIAL}" = "YES" ] ;then
  cat ${CWD}/${NAME}-mozconfig-branded >> .mozconfig || exit 1
fi

# Set up SDK path
echo "ac_add_options --with-libxul-sdk=\
$(pkg-config --variable=sdkdir libxul)" >> .mozconfig

echo "ac_add_options --build=${SLKTARGET}-slackware-linux" >> .mozconfig || exit 1
echo "ac_add_options --host=${SLKTARGET}-slackware-linux" >> .mozconfig || exit 1
echo "ac_add_options --target=${SLKTARGET}-slackware-linux" >> .mozconfig || exit 1


# Mozilla builds with -Wall with exception of a few warnings which show up
# everywhere in the code; so, don't override that.
MOZ_OPT_FLAGS="$(echo ${SLKCFLAGS} | sed -e 's/-Wall//')"

export CFLAGS=${MOZ_OPT_FLAGS}
export CXXFLAGS=${MOZ_OPT_FLAGS}

export PREFIX='/usr'
export LIBDIR='/usr/lib'

INTERNAL_GECKO=${VERSION_INTERNAL}
MOZ_APP_DIR=/usr/lib/${NAME}-${INTERNAL_GECKO}

export LDFLAGS="-Wl,-rpath,${MOZ_APP_DIR}"
make -f client.mk build STRIP="/bin/true" MOZ_MAKE_FLAGS="-j${NJOBS}" || exit 1

DESTDIR=${PKG} make install || exit 1

mkdir -p ${PKG}/usr{/lib,/usr/bin,/share/applications,/share/pixmaps}

# set up our default preferences
zcat ${CWD}/${NAME}-slackware-default-prefs.js.gz | sed \
     -e "s,FIREFOX_SLK_DIST,${SLKDIST},g;
         s,FIREFOX_SLK_VR,${SLKVER},g" > slk-default-prefs

# Set up default homepage and mail app
cat >> slk-default-prefs << EOF
pref(\"browser.startup.homepage\", \"${SB_INDEXHTML}\");
/* pref(\"startup.homepage_override_url\", \"${SB_INDEXHTML}\");
   pref(\"startup.homepage_welcome_url\", \"${SB_INDEXHTML}\"); */
pref(\"network.protocol-handler.app.mailto\", \"${SB_DMAIL}\";
EOF
install -m0644 slk-default-prefs \
               ${PKG}/${MOZ_APP_DIR}/defaults/preferences/all-slackware.js || exit 1
rm -f slk-default-prefs

# Start script install
rm -f ${PKG}/usr/bin/${NAME}
zcat ${CWD}/${NAME}.sh.in.gz | sed \
    -e "s,FIREFOX_VERSION,${VERSION_INTERNAL},g" > \
     ${PKG}/usr/bin/${NAME} || exit 1
chmod 0755 ${PKG}/usr/bin/${NAME}

rm -f ${PKG}${MOZ_APP_DIR}/${NAME}-config

#( cd ${PKG}${MOZ_APP_DIR}/chrome
#  find . -name "*" -type d -maxdepth 1 -exec rm -rf {} \;
#)

# jemalloc shows up sometimes, but it's not needed here, it's in XR
rm -f ${PKG}${MOZ_APP_DIR}/libjemalloc.so

rm -f ${PKG}${MOZ_APP_DIR}/removed-files

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)

#cat > ${PKG}/${MOZ_APP_DIR}/defaults/pref/${NAME}-l10n.js << EOF
#pref("general.useragent.locale", "chrome://global/locale/intl.properties");
#EOF
#chmod 0644 ${PKG}/${MOZ_APP_DIR}/defaults/pref/${NAME}-l10n.js

mkdir -p ${PKG}/${MOZ_APP_DIR}/chrome/icons/default/
install -m0644 other-licenses/branding/${NAME}/default16.png \
        ${PKG}/${MOZ_APP_DIR}/chrome/icons/default/
install -m0644 other-licenses/branding/${NAME}/default16.png \
        ${PKG}/${MOZ_APP_DIR}/icons/

if [ "${SB_LANG}" = "YES" ] ;then
# Install langpacks
mkdir -p ${PKG}/${MOZ_APP_DIR}/extensions
  for langpack in ${LANGDIR}/*.xpi; do
    language=$(basename ${langpack} .xpi)
    extensiondir=${PKG}/${MOZ_APP_DIR}/extensions/langpack-${language}@firefox.mozilla.org
    mkdir -p ${extensiondir}
    unzip ${langpack} -d ${extensiondir}
    find ${extensiondir} -type f | xargs chmod 0644

    tmpdir=$(mktemp -d ${NAME}.XXXXXXXX)
    langtmp=${tmpdir}/${NAME}/langpack-${language}
    mkdir -p ${langtmp}
    jarfile=${extensiondir}/chrome/${language}.jar
    unzip ${jarfile} -d ${langtmp}

    sed -i -e "s|browser.startup.homepage.*$|browser.startup.homepage=${SB_INDEXHTML}|g;" \
         ${langtmp}/locale/browser-region/region.properties
#    sed -i -e  "s|startup.homepage_override_url.*$|startup.homepage_override_url=${SB_INDEXHTML}|g;" \
#           -e "s|startup.homepage_welcome_url.*$|startup.homepage_welcome_url=%{firstrun}|g;" \
#          ${langtmp}/locale/browser-region/region.properties

    find ${langtmp} -type f | xargs chmod 0644
    rm -rf ${jarfile}
    cd ${langtmp}
      zip -r -D ${jarfile} locale
    cd -
    rm -rf ${tmpdir}
  done
fi

# System extensions
mkdir -p ${PKG}/usr/lib/mozilla/extensions/${FXAPP_ID}
mkdir -p ${PKG}/usr/share/mozilla/extensions/${FXAPP_ID}

mkdir -p ${PKG}/usr/lib/mozilla/plugins

zcat ${CWD}/${NAME}.desktop.gz > \
     ${PKG}/usr/share/applications/${NAME}.desktop || exit 1

desktop-file-install --vendor mozilla \
  --delete-original \
  --dir ${PKG}/usr/share/applications \
  --add-category WebBrowser \
  --add-category Network \
  ${PKG}/usr/share/applications/${NAME}.desktop 

zcat ${CWD}/${NAME}.png.gz > \
     ${PKG}/usr/share/pixmaps/${NAME}.png || exit 1

mkdir -p ${PKG}/usr/man/man1
zcat ${CWD}/${NAME}.1.gz > \
     ${PKG}/usr/man/man1/${NAME}.1 || exit 1

# Copy over the LICENSE
install -p -c -m 644 LICENSE ${PKG}/${MOZ_APP_DIR}/

# ghost files
touch ${PKG}/${MOZ_APP_DIR}/components/compreg.dat
touch ${PKG}/${MOZ_APP_DIR}/components/xpti.dat

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  LICENSE ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
    rm -f dir
    gzip -9 *
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
if [ -f usr/lib/${NAME}-${INTERNAL_GECKO}/components/compreg.dat ] ;then
  \${CHROOT} rm -f /usr/lib/${NAME}-${INTERNAL_GECKO}/components/compreg.dat
fi
if [ -f usr/lib/${NAME}-${INTERNAL_GECKO}/components/xpti.dat ] ;then
  \${CHROOT} rm -f /usr/lib/${NAME}-${INTERNAL_GECKO}/components/xpti.dat
fi
if [ -x usr/bin/update-desktop-database ]; then
  \${CHROOT} /usr/bin/update-desktop-database 1> /dev/null 2> /dev/null
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  \${CHROOT} /usr/bin/gtk-update-icon-cache -q usr/share/icons/hicolor > /dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${CWD}/${NAME}*mozconfig*  \
                 ${CWD}/{*.sh.in,*.1,*.js}.gz ${CWD}/${NAME}.spec \
                 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/* \
                  ${SBDIR}/patches/
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
        /^BUILD=/s/:-.*}/:-$BUILD}/
        /^  ARCH=/s/:-.*}/:-$ARCH}/
        " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
