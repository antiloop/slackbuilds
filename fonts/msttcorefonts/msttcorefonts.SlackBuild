#!/bin/sh
#-- core-web-fonts for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ core-web-fonts.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://corefonts.sourceforge.net/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=corefonts
NAME=msttcorefonts
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-3.0}
ARCH=noarch
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

TTFDIR=/usr/share/fonts/TTF/${PNAME}

DATE=$(LC_ALL=C date +%d-%b-%Y)

echo "By using these fonts you agree to Microsoft's EULA which is available"
echo "in the font package's document directory as 'eula.txt' or 'eula.htm'."
read junk

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=PowerPointViewer.exe

DL_TO=${DL_TO:-5}
DL_URL="http://www.microsoft.com/downloads/details.aspx?familyid=048DC840-14E1-467D-8DCA-19D2A8FD7485&displaylang=en"
# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || echo "Download ${SRCARCHIVE} in ${DL_URL}" && exit 1
fi

# this is the sourceforge mirrorlist as of 2006-04-30. If someone spots changes
# over at sourceforge, feel free to email me and I'll update the list
mirrors="easynews+heanet+superb-west+internap+switch+ufpr+surfnet+umn+kent+mesh+superb-east+jaist"
mirror_count=12

andale32_md5="cbdc2fdd7d2ed0832795e86a8b9ee19a  andale32.exe"
arial32_md5="9637df0e91703179f0723ec095a36cb5  arial32.exe"
arialb32_md5="c9089ae0c3b3d0d8c4b0a95979bb9ff0  arialb32.exe"
comic32_md5="2b30de40bb5e803a0452c7715fc835d1  comic32.exe"
courie32_md5="4e412c772294403ab62fb2d247d85c60  courie32.exe"
georgi32_md5="4d90016026e2da447593b41a8d8fa8bd  georgi32.exe"
impact32_md5="7907c7dd6684e9bade91cff82683d9d7  impact32.exe"
times32_md5="ed39c8ef91b9fb80f76f702568291bd5  times32.exe"
trebuc32_md5="0d7ea16cac6261f8513a061fbfcdb2b5  trebuc32.exe"
webdin32_md5="230a1d13a365b22815f502eb24d9149b  webdin32.exe"
verdan32_md5="12d2a75f8156e10607be1eaa8e8ef120  verdan32.exe"
wd97vwr32_md5="efa72d3ed0120a07326ce02f051e9b42  wd97vwr32.exe"

download_files="andale32.exe arial32.exe arialb32.exe comic32.exe courie32.exe georgi32.exe impact32.exe times32.exe trebuc32.exe webdin32.exe verdan32.exe wd97vwr32.exe"

failures=0

function set_mirror {
  local r m
  r=$(expr $RANDOM % $mirror_count + 1)
  m=$(echo $mirrors |cut -d+ -f$r)
  mirror="http://${m}.dl.sourceforge.net/sourceforge/corefonts/"

}

function check_file {
  matches=
  if [ ! -r $1 ]
  then
    echo "$1 does not exist"
    eturn
  fi
  local variable_name=$(basename $1 .exe)_md5
  local stored_checksum
  eval stored_checksum=\$$variable_name
  local computed_checksum=$(md5sum $1)
  if [ "${stored_checksum}" = "${computed_checksum}" ]
  then
    matches=yes
  else
    rm -f $1
    matches=
  fi
}

function download {
  wget --timeout=${DL_TO} -O "$2" ${1}${2}
}

set_mirror
for f in ${download_files}
do
  check_file ${f}
  while [ ! ${matches} ]
  do
    download ${mirror} ${f}
    check_file $f
    if [ ! ${matches} ]
    then
      echo "failed to download ${mirror}${f}"
      failures=$(expr $failures + 1)
      if [ ${failures} -gt 5 ]
      then
        echo "failed to download too many times."
        exit 1
      fi
      set_mirror
    fi
  done
done

# Decompress fonts
font_files="andale32.exe arial32.exe arialb32.exe comic32.exe courie32.exe georgi32.exe impact32.exe times32.exe trebuc32.exe webdin32.exe verdan32.exe"

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}/${TTFDIR}

cd ${TMP}
rm -rf ${SRCDIR}
mkdir -p ${SRCDIR}
cd ${SRCDIR} || exit 1

font_files="andale32.exe arial32.exe arialb32.exe comic32.exe courie32.exe georgi32.exe impact32.exe times32.exe trebuc32.exe webdin32.exe verdan32.exe"

mkdir cab-contents
mkdir fonts

for i in ${font_files}
do
  if [ -f ${CWD}/${i} ]
  then
    cabextract --lowercase --directory=cab-contents ${CWD}/${i} || exit 1
  fi
  cp cab-contents/*.ttf fonts/
  rm -f cab-contents/*
done || exit 1

cabextract --lowercase --directory=cab-contents ${CWD}/wd97vwr32.exe || exit 1
cabextract --lowercase --directory=cab-contents cab-contents/viewer1.cab || exit 1
cp cab-contents/*.ttf fonts/ || exit 1
rm -f cab-contents/*

cabextract --lowercase -F eula.txt ${CWD}/${SRCARCHIVE} || exit 1
cabextract --lowercase --directory=cab-contents -F ppviewer.cab ${CWD}/${SRCARCHIVE} || exit 1
for i in cab-contents/*.cab ; do
  cabextract --lowercase --directory=cab-contents ${i} || exit 1
done
cp cab-contents/*.ttf fonts/ || exit 1

# Install fonts
install -m0644 fonts/*.ttf ${PKG}/${TTFDIR}/ || exit 1

touch ${PKG}/${TTFDIR}/fonts.cache-{1,2}
touch ${PKG}/${TTFDIR}/fonts.scale
touch ${PKG}/${TTFDIR}/fonts.dir

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  eula.txt ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
( cd ${DOCDIR}
  tar -xjvf ${CWD}/docs.tar.bz2
  mv docs/* .
  rmdir docs
)
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Update the X font indexes:
if [ -x /usr/bin/mkfontdir -o -x /usr/X11R6/bin/mkfontdir ]; then
  ( cd ${TTFDIR}
    mkfontscale .
    mkfontdir .
  )
fi
if [ -x /usr/bin/fc-cache ]; then
  /usr/bin/fc-cache -f
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/docs.tar.bz2  ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^  ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
