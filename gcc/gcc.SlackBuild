#!/bin/sh
# GCC package build script (written by volkerdi@slackware.com)
#
# Suggested usage: $ gcc.SlackBuild 2>&1 | tee build.log

# Copyright 2003, 2004  Slackware Linux, Inc., Concord, California, USA
# Copyright 2005, 2006, 2007  Patrick J. Volkerding, Sebeka, Minnesota, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# Some notes, Fri May 16 12:31:32 PDT 2003:
#
# Why i486 and not i386?  Because the shared C++ libraries in gcc-3.2.x will
# require 486 opcodes even when a 386 target is used (so we already weren't
# compatible with the i386 for Slackware 9.0, didn't notice, and nobody
# complained :-).  gcc-3.3 fixes this issue and allows you to build a 386
# compiler, but the fix is done in a way that produces binaries that are not
# compatible with gcc-3.2.x compiled binaries.  To retain compatibility with
# Slackware 9.0, we'll have to use i486 (or better) as the compiler target
# for gcc-3.3.
#
# It's time to say goodbye to i386 support in Slackware.  I've surveyed 386
# usage online, and the most common thing I see people say when someone asks
# about running Linux on a 386 is to "run Slackware", but then they also 
# usually go on to say "be sure to get an OLD version, like 4.0, before glibc,
# because it'll be more efficient."  Now, if that's the general advice, then
# I see no reason to continue 386 support in the latest Slackware (and indeed
# it's no longer easily possible).

# http://gcc.gnu.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Temporary build location.  This should *NOT* be a directory
# path a non-root user could create later...
TMP=${TMP:-/gcc-$(mcookie)}
CWD=$(pwd)
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=gcc
VERSION=${VERSION:-4.1.2}
ARCH=${ARCH:-i686}
SLKTARGET=${SLKTARGET:-i486}
TARGET=${TARGET:-${SLKTARGET}-slackware-linux}
BUILD=${BUILD:-2}
NJOBS=${NJOBS:-2}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://ftp.gnu.org/gnu/${NAME}-${VERSION}/${SRCARCHIVE}"

if [ "${ARCH}" = "i386" ]; then
  SLKCFLAGS="-O2 -march=i386 -mtune=i686"
elif [ "${ARCH}" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
elif [ "${ARCH}" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
elif [ "${ARCH}" = "i686" ]; then
  SLKCFLAGS="-O2 -march=athlon64 -mtune=athlon64 -msse3 -pipe"
elif [ "${ARCH}" = "s390" ]; then
  SLKCFLAGS="-O2"
elif [ "${ARCH}" = "x86_64" ]; then
  SLKCFLAGS="-O2"
fi

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi

# This is the main DESTDIR target:
PKGF=${PKGF:-${TMP}/package-${NAME}}
PKG1=${PKGF}/${NAME}
PKGNAME1=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
# These are the directories to build other packages in:
PKG2=${PKGF}/${NAME}-g++
PKGNAME2=${NAME}-g++-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKG3=${PKGF}/${NAME}-gfortran
PKGNAME3=${NAME}-gfortran-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKG4=${PKGF}/${NAME}-gnat
PKGNAME4=${NAME}-gnat-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKG5=${PKGF}/${NAME}-java
PKGNAME5=${NAME}-java-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKG6=${PKGF}/${NAME}-objc
PKGNAME6=${NAME}-objc-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKG7=${PKGF}/${NAME}-g++-gch
PKGNAME7=${NAME}-g++-gch-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DOCDIR=${PKG1}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG1}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}

# Clear the build locations:
if [ -d ${PKGF} ]; then
  rm -rf ${PKGF}
  rm -rf ${TMP}/gcc.build.lnx
  rm -f ${TMP}/gcc.build.log
fi
mkdir -p $PKG{1,2,3,4,5,6,7}/usr/doc/gcc-${VERSION}

cd ${TMP} || exit 1
rm -rf ${SRCDIR}
tar xjvf ${CWD}/${SRCARCHIVE} || exit 1
# install docs
( cd gcc-${VERSION}
  # Fix perms/owners
  #chown -R root:root .
  find . -perm 777 -exec chmod 755 {} \;
  find . -perm 775 -exec chmod 755 {} \;
  find . -perm 754 -exec chmod 755 {} \;
  find . -perm 664 -exec chmod 644 {} \;

  # zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
  zcat ${CWD}/${NAME}-4.1.0-cross-compile.patch.gz | patch -p0 -E --backup --verbose || exit 1

  mkdir -p ${DOCDIR}
  # Only the most recent ChangeLog... shouldn't be too big. :)
  cp -a \
    BUGS COPYING COPYING.LIB ChangeLog \
    ChangeLog.tree-ssa FAQ INSTALL \
    LAST_UPDATED MAINTAINERS NEWS \
    README* *.html ${CWD}/ChangeLog.SB \
  ${DOCDIR}/

  mkdir -p ${PKG1}/usr/doc/gcc-${VERSION}/gcc
  ( cd gcc
    cp -a \
      ABOUT* COPYING* LANG* ONEWS README* SERVICE \
    ${PKG1}/usr/doc/gcc-${VERSION}/gcc
         
    mkdir -p ${PKG3}/usr/doc/gcc-${VERSION}/gcc/fortran
    ( cd fortran
      cp -a \
        ChangeLog \
      ${PKG3}/usr/doc/gcc-${VERSION}/gcc/fortran/ChangeLog
    )

    mkdir -p ${PKG4}/usr/doc/gcc-${VERSION}/gcc/ada
    ( cd ada
      cp -a \
        ChangeLog ChangeLog.tree-ssa \
      ${PKG4}/usr/doc/gcc-${VERSION}/gcc/ada
    )

    mkdir -p ${PKG5}/usr/doc/gcc-${VERSION}/gcc/java
    ( cd java
      cp -a \
        ChangeLog ChangeLog.tree-ssa \
      ${PKG5}/usr/doc/gcc-${VERSION}/gcc/java
    )
  
    mkdir -p ${PKG6}/usr/doc/gcc-${VERSION}/gcc/objc
    ( cd objc
      cp -a \
        ChangeLog README \
      ${PKG6}/usr/doc/gcc-${VERSION}/gcc/objc
    )
  )

  mkdir -p ${PKG3}/usr/doc/gcc-${VERSION}/libgfortran
  ( cd libgfortran
    cp -a \
      ChangeLog \
    ${PKG3}/usr/doc/gcc-${VERSION}/libgfortran/ChangeLog
  )

  mkdir -p ${PKG3}/usr/doc/gcc-${VERSION}/libada
  ( cd libada
    cp -a \
      ChangeLog \
    ${PKG3}/usr/doc/gcc-${VERSION}/libada
  )

  mkdir -p ${PKG5}/usr/doc/gcc-${VERSION}/fastjar
  ( cd fastjar
    cp -a \
      AUTHORS CHANGES COPYING ChangeLog INSTALL \
      NEWS README \
    ${PKG5}/usr/doc/gcc-${VERSION}/fastjar
  )

  mkdir -p ${PKG5}/usr/doc/gcc-${VERSION}/libffi
  ( cd libffi
    cp -a \
      ChangeLog ChangeLog.libgcj ChangeLog.v1 \
      LICENSE README \
    ${PKG5}/usr/doc/gcc-${VERSION}/libffi
  )

  mkdir -p ${PKG5}/usr/doc/gcc-${VERSION}/libjava
  ( cd libjava
    cp -a \
      COPYING ChangeLog HACKING LIBGCJ_LICENSE \
      NEWS README THANKS \
    ${PKG5}/usr/doc/gcc-${VERSION}/libjava
  )

  mkdir -p ${PKG1}/usr/doc/gcc-${VERSION}/libmudflap
  ( cd libmudflap
    cp -a \
      ChangeLog \
    ${PKG1}/usr/doc/gcc-${VERSION}/libmudflap
  )
  
  mkdir -p ${PKG6}/usr/doc/gcc-${VERSION}/libobjc
  ( cd libobjc
    cp -a \
      ChangeLog README README.threads THREADS THREADS.MACH \
    ${PKG6}/usr/doc/gcc-${VERSION}/libobjc
  )
    
  mkdir -p ${PKG2}/usr/doc/gcc-${VERSION}/libstdc++-v3
  ( cd libstdc++-v3
    cp -a \
      ChangeLog README \
    ${PKG2}/usr/doc/gcc-${VERSION}/libstdc++-v3
    
    cp -a \
      docs/html/faq/index.html \
    ${PKG2}/usr/doc/gcc-${VERSION}/libstdc++-v3/faq.html
  )
) || exit 1

# build gcc
( mkdir gcc.build.lnx;
  cd gcc.build.lnx;

  # If enough people need "treelang" support for it may be considered.
  #  --enable-languages=ada,c,c++,fortran,java,objc,treelang
  # I think it's incorrect to include this option (as it'll end up set
  # to i486 on x86 platforms), and we want to tune the binary structure
  # for i686, as that's where almost all of the optimization speedups
  # are to be found.
  # Correct me if my take on this is wrong.
  #  --with-cpu=${ARCH} 
  
  CFLAGS="${SLKCFLAGS}" \
  CXXFLAGS="${SLKCFLAGS}" \
  ../gcc-${VERSION}/configure --prefix=/usr \
     --infodir=/usr/info \
     --mandir=/usr/man \
     --enable-shared \
     --enable-languages=ada,c,c++,fortran,java,objc \
     --enable-threads=posix \
     --enable-__cxa_atexit \
     --disable-checking \
     --with-gnu-ld \
     --verbose \
     --with-arch=${ARCH} \
     --target=${TARGET} \
     --host=${TARGET} || exit 1

  # Start the build:

  # Include all debugging info (for now):
  # make -j${NJOBS} bootstrap;
  # Include less debugging info:
  # make CFLAGS="${SLKCFLAGS}" LIBCFLAGS="-g ${SLKCFLAGS}" LIBCXXFLAGS="-g ${SLKCFLAGS} -fno-implicit-templates" -j2 bootstrap
  # Include even less debugging info:
  make BOOT_CFLAGS="${SLKCFLAGS}" STAGE1_CFLAGS="${SLKCFLAGS}" CFLAGS="${SLKCFLAGS}" CXXFLAGS="${SLKCFLAGS}" LIBCFLAGS="-g ${SLKCFLAGS}" LIBCXXFLAGS="-g ${SLKCFLAGS} -fno-implicit-templates" GCJFLAGS="${SLKCFLAGS}" bootstrap || exit 1

  ( cd gcc
    # make gnatlib GNATLIBCFLAGS="-g ${SLKCFLAGS}"
    make gnatlib GNATLIBCFLAGS="${SLKCFLAGS}"
    # make -j2 gnatlib
    # This wants a shared -ladd2line?
    #make gnatlib-shared
    
    CFLAGS="${SLKCFLAGS}" \
    CXXFLAGS="${SLKCFLAGS}" \
    make -j${NJOBS} gnattools
  )
  make -j${NJOBS} info

  # Set GCCCHECK=something to run the tests
  if [ ! -z ${GCCCHECK} ]; then
    make -j${NJOBS} check || exit 1
  fi

  make install DESTDIR=${PKG1} || exit 1

# Be sure the "specs" file is installed.  There was an issue with that on 4.1.1:
if [ ! -r ${PKG1}/usr/lib/gcc/${ARCH}-slackware-linux/${VERSION}/specs ]; then
  cat gcc/stage2/specs > ${PKG1}/usr/lib/gcc/${ARCH}-slackware-linux/${VERSION}/specs
fi

#  make ada.install-common DESTDIR=${PKG1}
#  make install-gnatlib DESTDIR=${PKG1}
  make -i install-info DESTDIR=${PKG1}

  chmod 755 ${PKG1}/usr/lib/libgcc_s.so.1

  zcat ${CWD}/libgcc_post_upgrade.c.gz > libgcc_post_upgrade.c
  mkdir -p ${PKG1}/usr/sbin
  ( set -o xtrace
    gcc -static -Os libgcc_post_upgrade.c -o ${PKG1}/usr/sbin/libgcc_post_upgrade || exit 1
  ) || exit 1

  # This is provided by binutils, so delete it here:
  rm -f ${PKG1}/usr/lib/libiberty.a

  # Strip out unneeded stuff from the libraries and binaries:
  ( cd ${PKG1}
    find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
    find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  )
  # Most people debug their own code (not the libraries), so we'll strip these.
  # It cuts the size down quite a bit.
  find ${PKG1} -name "*.a" | xargs file | grep "archive" | cut -f 1 -d : | xargs strip -g

  # Fix stuff up:
  ( cd ${PKG1}/usr/info ; rm dir ; gzip -9 * )
  ( cd ${PKG1}
    mkdir -p lib
    cd lib
    ln -sf /usr/bin/cpp .
  )
  ( cd ${PKG1}/usr/bin
    mv g++ g++-gcc-${VERSION}
    mv gcc gcc-${VERSION}
    mv ${TARGET}-gfortran gfortran-gcc-${VERSION}
    ln -sf g++-gcc-${VERSION} g++
    ln -sf gcc-${VERSION} gcc
    ln -sf g++ c++
    ln -sf gcc cc
    ln -sf gcc-${VERSION} ${TARGET}-gcc
    ln -sf gcc-${VERSION} ${TARGET}-gcc-${VERSION}
    ln -sf gcj ${TARGET}-gcj
    ln -sf gcjh ${TARGET}-gcjh
    ln -sf g++-gcc-${VERSION} ${TARGET}-c++
    ln -sf g++-gcc-${VERSION} ${TARGET}-g++
    ln -sf gfortran-gcc-${VERSION} gfortran
    ln -sf gfortran-gcc-${VERSION} ${TARGET}-gfortran
    ln -sf gfortran-gcc-${VERSION} ${TARGET}-gfortran-${VERSION}
    ln -sf gfortran-gcc-${VERSION} ${TARGET}-g95
    ln -sf gfortran g95
    ln -sf gfortran f95
    ln -sf gfortran-gcc-${VERSION} ${TARGET}-g77
    ln -sf gfortran g77
    ln -sf gfortran f77
  )
  ( cd ${PKG1}/usr/man
    gzip -9 */*
    cd man1
    ln -sf g++.1.gz c++.1.gz
    ln -sf gcc.1.gz cc.1.gz
  )  

  mkdir -p $PKG{1,2,3,4,5,6,7}/install
  # Install the descriptions:
  ( cd ${CWD}
    cat slack-desc.gcc > ${PKG1}/install/slack-desc
    cat slack-desc.gcc-g++ > ${PKG2}/install/slack-desc
    cat slack-desc.gcc-gfortran > ${PKG3}/install/slack-desc
    cat slack-desc.gcc-gnat > ${PKG4}/install/slack-desc
    cat slack-desc.gcc-java > ${PKG5}/install/slack-desc
    cat slack-desc.gcc-objc > ${PKG6}/install/slack-desc
    cat slack-desc.gcc-g++-gch > ${PKG7}/install/slack-desc
  ) || exit 1
  sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
          $PKG{1,2,3,4,5,6,7}/install/slack-desc

  ## build the tgz package
  #(
  #  cd ${PKG1};
  #  makepkg -l y -c n ${TMP}/gcc-${VERSION}-${ARCH}-${BUILD}.tgz
  #)
# keep a log
) 2>&1 | tee ${TMP}/gcc.build.log

# OK, time to split the big package where needed:

# gcc-g++:
( cd ${PKG2}
  mkdir -p usr/bin
  mv ${PKG1}/usr/bin/*++* usr/bin
  mkdir -p usr/include
  mv ${PKG1}/usr/include/c++ usr/include
  mkdir -p usr/lib
  mv ${PKG1}/usr/lib/*++* usr/lib
  mkdir -p usr/libexec/gcc/${TARGET}/${VERSION}
  mv ${PKG1}/usr/libexec/gcc/${TARGET}/${VERSION}/cc1plus usr/libexec/gcc/${TARGET}/${VERSION}/cc1plus
  mkdir -p usr/man/man1
  mv ${PKG1}/usr/man/man1/*++* usr/man/man1
)

# gcc-gfortran:
( cd ${PKG3}
  mkdir -p usr/bin
  mv ${PKG1}/usr/bin/*gfortran* usr/bin
  mv ${PKG1}/usr/bin/*95* usr/bin
  mv ${PKG1}/usr/bin/*77* usr/bin
  # Doesn't this seem like a logical idea?
  ( cd usr/bin ; ln -sf gfortran-gcc-${VERSION} fortran )
  mkdir -p usr/info
  mv ${PKG1}/usr/info/gfortran* usr/info
  mkdir -p usr/lib
  mv ${PKG1}/usr/lib/libgfortran* usr/lib
  mkdir -p usr/libexec/gcc/${TARGET}/${VERSION}
  mv ${PKG1}/usr/libexec/gcc/${TARGET}/${VERSION}/f951 usr/libexec/gcc/${TARGET}/${VERSION}/f951
  mkdir -p usr/man/man1
  mv ${PKG1}/usr/man/man1/gfortran* usr/man/man1
)

# gcc-gnat:
( cd ${PKG4}
  mkdir -p usr/bin
  mv ${PKG1}/usr/bin/gnat* usr/bin
  mv ${PKG1}/usr/bin/gpr* usr/bin
  mkdir -p usr/info
  mv ${PKG1}/usr/info/gnat* usr/info
  mkdir -p usr/share
  mv ${PKG1}/usr/share/gnat usr/share
  mkdir -p usr/libexec/gcc/${TARGET}/${VERSION}
  mv ${PKG1}/usr/libexec/gcc/${TARGET}/${VERSION}/gnat1 usr/libexec/gcc/${TARGET}/${VERSION}
  mkdir -p usr/lib/gcc/${TARGET}/${VERSION}
  mv ${PKG1}/usr/lib/gcc/${TARGET}/${VERSION}/adainclude usr/lib/gcc/${TARGET}/${VERSION}
  mv ${PKG1}/usr/lib/gcc/${TARGET}/${VERSION}/adalib usr/lib/gcc/${TARGET}/${VERSION}
)

# gcc-java:
( cd ${PKG5}
  mkdir -p usr/bin
  mv ${PKG1}/usr/bin/addr2name.awk usr/bin
  mv ${PKG1}/usr/bin/fastjar usr/bin
  mv ${PKG1}/usr/bin/*gcj* usr/bin
  mv ${PKG1}/usr/bin/gij usr/bin
  mv ${PKG1}/usr/bin/gjnih usr/bin
  mv ${PKG1}/usr/bin/grepjar usr/bin
  mv ${PKG1}/usr/bin/grmic usr/bin
  mv ${PKG1}/usr/bin/grmiregistry usr/bin
  mv ${PKG1}/usr/bin/jar usr/bin
  mv ${PKG1}/usr/bin/jcf-dump usr/bin
  mv ${PKG1}/usr/bin/jv-* usr/bin
  mv ${PKG1}/usr/bin/rmi* usr/bin
  mkdir -p usr/include
  mv ${PKG1}/usr/include/ffi.h usr/include
  mkdir -p usr/lib/gcc/${TARGET}/${VERSION}/include
  mv ${PKG1}/usr/lib/gcc/${TARGET}/${VERSION}/include/jawt.h usr/lib/gcc/${TARGET}/${VERSION}/include
  mv ${PKG1}/usr/lib/gcc/${TARGET}/${VERSION}/include/jawt_md.h usr/lib/gcc/${TARGET}/${VERSION}/include
  mv ${PKG1}/usr/lib/gcc/${TARGET}/${VERSION}/include/jni.h usr/lib/gcc/${TARGET}/${VERSION}/include
  mv ${PKG1}/usr/lib/gcc/${TARGET}/${VERSION}/include/jvmpi.h usr/lib/gcc/${TARGET}/${VERSION}/include
  mv ${PKG1}/usr/lib/gcc/${TARGET}/${VERSION}/include/libffi usr/lib/gcc/${TARGET}/${VERSION}/include
  mkdir -p usr/info
  mv ${PKG1}/usr/info/gcj.* usr/info
  mv ${PKG1}/usr/info/fastjar.* usr/info
  mkdir -p usr/lib
  mv ${PKG1}/usr/lib/libffi* usr/lib
  strip -g usr/lib/libffi.a
  mv ${PKG1}/usr/lib/gcj* usr/lib
  mv ${PKG1}/usr/lib/libgcj* usr/lib
  strip -g usr/lib/libgcj.a
  mv ${PKG1}/usr/lib/libgij* usr/lib
  strip -g usr/lib/libgij.a
  mv ${PKG1}/usr/lib/lib-org* usr/lib
  mv ${PKG1}/usr/lib/security usr/lib
  mkdir -p usr/lib/pkgconfig
  mv ${PKG1}/usr/lib/pkgconfig/libgcj.pc usr/lib/pkgconfig
  rmdir ${PKG1}/usr/lib/pkgconfig 2> /dev/null
  mkdir -p usr/libexec/gcc/${TARGET}/${VERSION}
  mv ${PKG1}/usr/libexec/gcc/${TARGET}/${VERSION}/jc1 usr/libexec/gcc/${TARGET}/${VERSION}
  mv ${PKG1}/usr/libexec/gcc/${TARGET}/${VERSION}/jvgenmain usr/libexec/gcc/${TARGET}/${VERSION}
  mkdir -p usr/lib/gcc/${TARGET}/${VERSION}/include
  mv ${PKG1}/usr/lib/gcc/${TARGET}/${VERSION}/include/gcj usr/lib/gcc/${TARGET}/${VERSION}/include
  mkdir -p usr/man/man1
  mv ${PKG1}/usr/man/man1/fastjar.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/gcj.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/gcjh.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/gcj-dbtool.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/gij.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/gjnih.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/grmic.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/grmiregistry.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/jcf-dump.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/jv-convert.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/jv-scan.1.gz usr/man/man1
  mkdir -p usr/share
  mv ${PKG1}/usr/share/java usr/share
)

# gcc-objc:
( cd ${PKG6}
  mkdir -p usr/lib
  mv ${PKG1}/usr/lib/libobjc* usr/lib
  mkdir -p usr/libexec/gcc/${TARGET}/${VERSION}
  mv ${PKG1}/usr/libexec/gcc/${TARGET}/${VERSION}/cc1obj usr/libexec/gcc/${TARGET}/${VERSION}
  mkdir -p usr/lib/gcc/${TARGET}/${VERSION}/include
  mv ${PKG1}/usr/lib/gcc/${TARGET}/${VERSION}/include/objc usr/lib/gcc/${TARGET}/${VERSION}/include
)

## NOTE: Thought about this, because the precompiled headers are so large.
## Probably easier to keep everything together, though.
## gcc-g++-gch (precompiled c++ headers)
#( cd ${PKG7}
#  mkdir -p usr/include/c++/${VERSION}/${TARGET}/bits
#  mv ${PKG2}/usr/include/c++/${VERSION}/${TARGET}/bits/stdc++.h.gch usr/include/c++/${VERSION}/${TARGET}/bits
#)

# Filter all .la files (thanks much to Mark Post for the sed script):
( cd ${TMP}
  for file in $(find . -type f -name "*.la") ; do
    cat ${file} | sed -e 's%-L/gcc-[[:graph:]]* % %g' > ${TMP}/tmp-la-file
    cat ${TMP}/tmp-la-file > ${file}
  done
  rm ${TMP}/tmp-la-file
)

# Replicate slackbuild and patches
mkdir -p ${SBDIR}/patches
install -m0644 ${CWD}/slack-desc* ${CWD}/slack-required ${CWD}/ChangeLog.SB \
               ${CWD}/libgcc_post_upgrade.c.gz ${CWD}/${NAME}*.patch.gz \
               ${SBDIR}/
install -m0755 ${CWD}/${NAME}.SlackBuild \
               ${SBDIR}/${NAME}.SlackBuild
sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
        /^BUILD=/s/:-.*}/:-$BUILD}/
        /^ARCH=/s/:-.*}/:-$ARCH}/
        " ${SBDIR}/${NAME}.SlackBuild

# Build package:
set +o xtrace			# no longer print commands upon execution

ROOTCOMMANDS1="set -o errexit -o xtrace ; cd ${PKG1} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS2="set -o errexit -o xtrace ; cd ${PKG2} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS3="set -o errexit -o xtrace ; cd ${PKG3} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS4="set -o errexit -o xtrace ; cd ${PKG4} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS5="set -o errexit -o xtrace ; cd ${PKG5} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS6="set -o errexit -o xtrace ; cd ${PKG6} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS1="${ROOTCOMMANDS1}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME1}.tgz "
ROOTCOMMANDS2="${ROOTCOMMANDS2}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME2}.tgz "
ROOTCOMMANDS3="${ROOTCOMMANDS3}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME3}.tgz "
ROOTCOMMANDS4="${ROOTCOMMANDS4}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME4}.tgz "
ROOTCOMMANDS5="${ROOTCOMMANDS5}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME5}.tgz "
ROOTCOMMANDS6="${ROOTCOMMANDS6}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME6}.tgz "

if test $UID = 0; then
  eval ${ROOTCOMMANDS1}
  eval ${ROOTCOMMANDS2}
  eval ${ROOTCOMMANDS3}
  eval ${ROOTCOMMANDS4}
  eval ${ROOTCOMMANDS5}
  eval ${ROOTCOMMANDS6}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS1} | fakeroot
  echo ${ROOTCOMMANDS2} | fakeroot
  echo ${ROOTCOMMANDS3} | fakeroot
  echo ${ROOTCOMMANDS4} | fakeroot
  echo ${ROOTCOMMANDS5} | fakeroot
  echo ${ROOTCOMMANDS6} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS1}"
  /bin/su -c "${ROOTCOMMANDS2}"
  /bin/su -c "${ROOTCOMMANDS3}"
  /bin/su -c "${ROOTCOMMANDS4}"
  /bin/su -c "${ROOTCOMMANDS5}"
  /bin/su -c "${ROOTCOMMANDS6}"
fi

#( cd ${PKG7}
#  makepkg -l y -c n ${TMP}/gcc-g++-gch-${VERSION}-${ARCH}-${BUILD}.tgz )

echo
echo "Slackware GCC package build complete!"
echo

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/gcc.build.lnx
    rm -f ${TMP}/gcc.build.log
        rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKGF} ]; then
    rm -rf ${PKGF} && echo "${PKGF} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
