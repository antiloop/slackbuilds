#!/bin/sh
#-- kbd for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ kbd.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# ftp://ftp.win.tue.nl/pub/linux-local/utils/kbd/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=kbd
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-1.12}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
SLKTARGET=${SLKTARGET:-i486}
BUILD=${BUILD:-2}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="ftp://ftp.kernel.org/pub/linux/utils/${NAME}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

EXTRADIR=${CWD}/extra

# Add some extra fonts:
mkdir -p ${PKG}/lib/kbd ${PKG}/usr/share
ln -s ../../lib/kbd ${PKG}/usr/share/kbd || exit 1
( cd ${PKG} ; /sbin/explodepkg ${EXTRADIR}/extraf.tgz ) || exit 1

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1

tar -xjvf ${EXTRADIR}/kbd-latsun-fonts.tar.bz2 || exit 1
tar -xjvf ${EXTRADIR}/kbd-sun12x22-fixed.tar.bz2 || exit 1
tar -xjvf ${EXTRADIR}/ro.tar.bz2 || exit 1
tar -xjvf ${EXTRADIR}/ro_maps.tar.bz2 || exit 1
tar -xjvf ${EXTRADIR}/terminus.tar.bz2 || exit 1
tar -xjvf ${EXTRADIR}/kbd-latarcyrheb-16-fixed.tar.bz2 || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

find -name '*~' -exec rm -f {} ';'

# 7-bit maps are obsolete; so are non-euro maps
( cd data/keymaps/i386
  mv qwerty/fi.map qwerty/fi-old.map || exit 1
  cp qwerty/fi-latin9.map qwerty/fi.map || exit 1
  cp qwerty/pt-latin9.map qwerty/pt.map || exit 1
  cp qwerty/sv-latin1.map qwerty/se-latin1.map || exit 1
  mv azerty/fr.map azerty/fr-old.map || exit 1
  cp azerty/fr-latin9.map azerty/fr.map || exit 1

  # legacy alias
  cp azerty/fr-latin9.map azerty/fr-latin0.map || exit 1
) || exit 1

# Default to latarcyrheb-sun16 font for unicode
sed -i -e 's/LatArCyrHeb-16/latarcyrheb-sun16/' src/unicode_start || exit 1

export OLD_PO_FILE_INPUT=yes

CFLAGS="${SLKCFLAGS}" \
./configure \
  --prefix=/usr \
  --datadir=/lib/kbd \
  --mandir=/usr/man || exit 1

make CFLAGS="${SLKCFLAGS}" LDFLAGS="${LDFLAGS}" || exit 1
make install DESTDIR=${PKG} || exit 1

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)

( cd ${PKG}/usr/bin ; rm -f loadkeys ; ln -sf ../../bin/loadkeys . ) || exit 1

mkdir -p ${PKG}/etc/profile.d
install -m0755 ${CWD}/profile.d/unicode.* \
               ${PKG}/etc/profile.d/ || exit 1
chmod 0755 ${PKG}/etc/profile.d/unicode.*

mkdir -p ${PKG}/var/log/setup
zcat ${CWD}/setup.setconsolefont.gz > \
     ${PKG}/var/log/setup/setup.setconsolefont || exit 1
chmod 0755 ${PKG}/var/log/setup/setup.setconsolefont
zcat ${CWD}/setconsolefont.gz > \
     ${PKG}/usr/bin/setconsolefont || exit 1
chmod 0755 ${PKG}/usr/bin/setconsolefont

# Create additional name for Serbian latin keyboard
ln -s sr-cy.map.gz \
      ${PKG}/lib/kbd/keymaps/i386/qwerty/sr-latin.map.gz || exit 1

# The rhpl keyboard layout table is indexed by kbd layout names, so we need a
# Korean keyboard
ln -s us.map.gz \
     ${PKG}/lib/kbd/keymaps/i386/qwerty/ko.map.gz || exit 1

mkdir -p ${PKG}/bin
# Move binaries which we use before /usr is mounted from /usr/bin to /bin.
for binary in setfont dumpkeys kbd_mode unicode_start unicode_stop ; do
  mv ${PKG}/usr/bin/${binary} ${PKG}/bin/
  ln -s  ../../bin/${binary} ${PKG}/usr/bin/${binary}
done

# Some microoptimization
sed -i -e 's,\<kbd_mode\>,/bin/kbd_mode,g;s,\<setfont\>,/bin/setfont,g' \
  ${PKG}/bin/unicode_start

# Link open to openvt
ln -s openvt ${PKG}/usr/bin/open || exit 1

# This is the keymap for Speakup (http://linux-speakup.org) users:
install -m0644 ${EXTRADIR}/speakupmap.map.gz \
    ${PKG}/lib/kbd/keymaps/i386/qwerty/speakupmap.map.gz
# Another keymap for Speakup from Thomas Ward, for JFW users.
tar xzvf ${EXTRADIR}/speakup-jfw.tar.gz || exit 1
( cd speakup-jfw
  cat speakup-jfw.map | gzip -9c > \
      ${PKG}/lib/kbd/keymaps/i386/qwerty/speakup-jfw.map.gz
  cat readme > ${PKG}/lib/kbd/keymaps/i386/qwerty/speakup-jfw.readme
) || exit 1

mkdir -p ${PKG}/etc/rc.d
cat > ${PKG}/etc/rc.d/rc.font.new <<EOF
#!/bin/sh
#
# This selects your default screen font from among the ones in
# /lib/kbd/consolefonts.
#
setfont -v
EOF
chmod 0755 ${PKG}/etc/rc.d/rc.font.new

# Add a documentation directory:
mkdir -p ${DOCDIR}/openvt
cp -a \
  CHANGES COPYING CREDITS README doc/* ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
cp -a openvt/README* ${DOCDIR}/openvt/
rm -f ${DOCDIR}/openvt/kbd.FAQ.sgml
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
    rm -f dir
    gzip -9 *
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#if [ -r etc/rc.d/rc.font ]; then
#  rm -f etc/rc.d/rc.font.new
#else
#  mv etc/rc.d/rc.font.new etc/rc.d/rc.font
#fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{extra,patches,profile.d}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${CWD}/setconsolefont.gz \
                 ${CWD}/setup.setconsolefont.gz ${CWD}/speakupmap.map.gz \
                 ${CWD}/speakup-jfw.tar.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/extra/* \
                 ${SBDIR}/extra/
  install -m0644 ${CWD}/patches/*.gz \
                 ${SBDIR}/patches/
  install -m0644 ${CWD}/profile.d/unicode.* \
                 ${SBDIR}/profile.d/
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^  ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
