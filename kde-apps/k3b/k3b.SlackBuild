#!/bin/bash
#-- k3b for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.brg>
# Suggested usage: $ k3b.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.k3b.org

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=k3b
I18NAME=${NAME}-i18n
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-1.0.5}
I18VERSION=${I18VERSION:-1.0.5}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
SLKTARGET=${SLKTARGET:-i486}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/kde-apps/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

# Set to YES to enable hal support
SB_HAL=${SB_HAL:-NO}

# Set to:
# YES to build with i18n langs
# NO to not build extra languages.
SB_I18N=${SB_I18N:-YES}

# Set to ALL to add all languages or add only the needed
SB_LANGS=${SB_LANGS:-ALL}

SRCDIR=${NAME}-${VERSION}
I18SRCDIR=${I18NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2
I18SRCARCHIVE=${I18SRCDIR}.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://prdownloads.sourceforge.net/${NAME}/${SRCARCHIVE}"
#DL_URL="http://dl.sf.net/sourceforge/${NAME}/${SRCARCHIVE}"
#DL_URL="http://download.sf.net/${NAME}/${SRCARCHIVE}"
I18DL_URL="http://prdownloads.sourceforge.net/${NAME}/${I18SRCARCHIVE}"

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi
if [ "${SB_I18N}" = "YES" ] ;then
  if ! test -r ${I18SRCARCHIVE}; then
    test -r ${CWD}/${I18SRCARCHIVE} || wget ${DL_OPTS} ${I18DL_URL} || exit 1
  fi

  SB_LANGS="$(echo ${SB_LANGS} | tr - _ )"

  echo -n "Selected languages: "
  echo ${SB_LANGS}
  read junk
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

# Avoid a version number in .la files:
if [ -d /usr/lib/qt ]; then
  QTDIR=/usr/lib/qt
fi

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1

# k3bsetup script small fix
( mv k3bsetup/k3bsetup k3bsetup/k3bsetup.fix
  touch k3bsetup/k3bsetup
  echo '#!/bin/sh' > k3bsetup/k3bsetup
  cat k3bsetup/k3bsetup.fix >> k3bsetup/k3bsetup
  sed -i 's|#!/usr/bin/sh||g' k3bsetup/k3bsetup
  chmod 755 k3bsetup/k3bsetup
) || exit 1

# Make sure ownerships and permissions are sane:
chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
zcat ${CWD}/${NAME}-1.0.4-kde\#151816.patch.gz | patch -p1 -E --backup --verbose || exit 1

[ "${SB_HAL}" != "YES" ] && SB_HALOPTS="--without-hal"

# Fix for new ffmpeg revisions
sed -i -e '/avcodec.h/s|ffmpeg|libavcodec|g;/avformat.h/s|ffmpeg|libavformat|g;' \
           configure.in \
           plugins/decoder/ffmpeg/{configure.in.in,k3bffmpegdecoder.cpp,k3bffmpegwrapper.cpp} \
           || exit 1

make -f admin/Makefile.common cvs || exit 1

# Configure:
# Extra:  --enable-ffmpeg-all-codecs
CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
CPPFLAGS="${CPPFLAGS} $(pkg-config libavcodec libavformat --cflags)" \
./configure \
  --prefix=/usr \
  --includedir=/usr/include/kde \
  --sysconfdir=/etc/kde \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --disable-rpath \
  --enable-new-ldflags \
  --disable-debug \
  --disable-warnings \
  --disable-dependency-tracking \
  --enable-final \
  --without-cdrecord-suid-root ${SB_HALOPTS} \
  --with-external-libsamplerate \
  --with-extra-includes=/usr/include/ffmpeg \
  --build=${SLKTARGET}-slackware-linux || exit 1

# Build and install:
make -j${NJOBS} || exit 1
make install DESTDIR=${PKG} || exit 1

rm -f ${PKG}/usr/lib/lib*.la

# Build i18n package
if [ "${SB_I18N}" = "YES" ] ;then
( tar -xjvf ${CWD}/${I18SRCARCHIVE} || exit 1
  cd ${I18SRCDIR} || exit 1

  chmod -R u+w,go+r-w,a-s .

  zcat ${CWD}/${I18NAME}-0.12.17-rellink.patch.gz | patch -p2 -E --backup --verbose || exit 1

  make -f admin/Makefile.common cvs || exit 1

  # Configure:
  CFLAGS="${SLKCFLAGS}" \
  CXXFLAGS="${SLKCFLAGS}" \
  ./configure \
    --prefix=/usr \
    --sysconfdir=/etc/kde \
    --infodir=/usr/info \
    --mandir=/usr/man \
    --disable-rpath \
    --enable-new-ldflags \
    --disable-debug \
    --disable-warnings \
    --disable-dependency-tracking \
    --enable-final || exit 1

  # Build and install:
  if [ "${SB_LANGS}" = "ALL" ] ;then
    make -j${NJOBS} || exit 1
    make install DESTDIR=${PKG} || exit 1
  else
    for language in ${SB_LANGS} ;do
      make -j${NJOBS} -C ${language} || exit 1
        make install -C ${language} DESTDIR=${PKG} || exit 1
    done
  fi

) || exit 1
fi

# Strip binaries:
( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS COPYING ChangeLog FAQ KNOWNBUGS PERMISSIONS README TODO k3b.lsm \
  ${CWD}/ChangeLog.SB ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# HTML docs
HTML_DIR=$(kde-config --expandvars --install html)
if [ -d ${PKG}/${HTML_DIR} ]; then
  for lang_dir in ${PKG}/${HTML_DIR}/* ; do
    if [ -d ${lang_dir} ]; then
      # replace absolute symlinks with relative ones
      ( cd ${lang_dir}
        for i in *; do
          [ -d ${i} -a -L ${i}/common ] && rm -f ${i}/common && ln -sf ../common ${i}/common
        done
      )
    fi
  done
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
      rm -f dir
      gzip -9 *
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/${NAME}*.patch.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^  ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
