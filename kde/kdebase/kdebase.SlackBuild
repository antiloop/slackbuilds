#!/bin/bash
#-- kdebase for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.brg>
# Suggested usage: $ kdebase.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.kde.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=kdebase
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-3.5.10}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
SLKTARGET=${SLKTARGET:-i486}
BUILD=${BUILD:-2}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/kde/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to use dbus session
SB_DBUS=${SB_DBUS:-YES}

# Set to YES to enable support for slack-artwork
SB_SLKART=${SB_SLKART:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
KDE_MIRROR=${KDE_MIRROR:-ftp://ftp.kde.org/pub/kde}
DL_URL="${KDE_MIRROR}/stable/${VERSION}/src/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}/usr

if [ -f /etc/profile.d/qt3.sh ] ;then
  unset QTDIR
  source /etc/profile.d/qt3.sh
else
  QTDIR=/usr/lib/qt
fi

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

# build mail setting tool
zcat ${CWD}/mailsettings.cc.gz > mailsettings.cc || exit 1
g++ ${SLKCFLAGS} ${LDFLAGS} -o mailsettings mailsettings.cc || exit 1

# add missing icons for package_games_kids
for size in 16 32 48 ; do
  zcat ${CWD}/cr${size}-app-package_games_kids.png.gz > \
       pics/crystalsvg/cr${size}-app-package_games_kids.png || exit 1
done

sed -i -e 's|^Exec=.*|Exec=enlightenment_start|g;
           s|^TryExec=.*|TryExec=enlightenment_start|g;' \
           kdm/kfrontend/sessions/enlightenment.desktop || exit 1
sed -i -e 's|^Icon=.*|Icon=kscreensaver|g' \
           kcontrol/display/display.desktop || exit 1

make -f admin/Makefile.common cvs || exit 1

CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
./configure \
  --prefix=/usr \
  --sysconfdir=/etc/kde \
  --includedir=/usr/include/kde \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --enable-gcc-hidden-visibility \
  --enable-new-ldflags \
  --disable-dependency-tracking \
  --disable-rpath \
  --disable-debug \
  --disable-warnings \
  --enable-final \
  --with-shadow \
  --with-xinerama \
  --without-pam \
  --with-samba \
  --build=${SLKTARGET}-slackware-linux || exit 1

make -j${NJOBS} || exit 1

make install RUN_KAPPFINDER=no DESTDIR=${PKG} || exit 1

install -p -m0755 mailsettings ${PKG}/usr/bin/ || exit 1

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)

desktop-file-install --delete-original --vendor="" \
  --dir ${PKG}/usr/share/applications/kde  \
  --add-mime-type="application/x-gettext" \
  --add-mime-type="application/x-desktop" \
  --add-mime-type="text/md5" \
  --add-mime-type="text/sha1" \
  ${PKG}/usr/share/applications/kde/kwrite.desktop

# Nuke man2html - we get it from man
find ${PKG} -name "man2html*" | xargs rm -rf

# Own Mozilla plugin dir
mkdir -p ${PKG}/usr/lib/mozilla/plugins

# exclude fonts.dir
rm -f ${PKG}/usr/share/fonts/override/fonts.dir

rm -f ${PKG}/usr/share/icons/crystalsvg/*/apps/wine.png

mkdir -p ${PKG}/etc/logrotate.d
zcat ${CWD}/logrotate-kdm.gz > \
     ${PKG}/etc/logrotate.d/kdm.new || exit 1

# Move the KDM files someplace FHS compliant:
mkdir -p ${PKG}/etc/kde
mv ${PKG}/usr/share/config/kdm ${PKG}/etc/kde/kdm || exit 1
( cd ${PKG}/usr/share/config ; ln -sf ../../../etc/kde/kdm . )

# create/own /var/lib/kdm/kdmsts (#442081)
mkdir -p ${PKG}/var/lib/kdm
touch ${PKG}/var/lib/kdm/kdmsts.new

# XDG session desktop file
mkdir -p ${PKG}/usr/share/xsessions/
zcat ${CWD}/kde.desktop.gz > \
     ${PKG}/usr/share/xsessions/kde.desktop || exit 1

# startup and shutdown scripts
mkdir -p ${PKG}/etc/kde/env
install -m0755 ${CWD}/env/agent-startup.sh \
               ${PKG}/etc/kde/env/agent-startup.sh.new
mkdir -p ${PKG}/etc/kde/shutdown
install -m0755 ${CWD}/env/agent-shutdown.sh \
               ${PKG}/etc/kde/shutdown/agent-shutdown.sh.new

# freedesktop environment variables
cat > ${PKG}/etc/kde/env/xdg.sh <<EOF
export XDG_CONFIG_DIRS="/etc/kde/xdg:/etc/xdg"
EOF
chmod 0755 ${PKG}/etc/kde/env/xdg.sh

### !!! KLUDGE ALERT !!! ###
### CAUSES ARTS TO NOT USE REALTIME PRIORITY BY DEFAULT, WORKING AROUND A LOGOUT HANG ###
### THIS SHOULD BE RECONSIDERED WITH EACH KDEBASE RELEASE! ###
cat ${CWD}/kludge/kcmartsrc > ${PKG}/usr/share/config/kcmartsrc
### !!! KLUDGE ALERT !!! ###

mkdir -p ${PKG}/etc/X11/xinit
install -m0755 ${CWD}/xinit/xinitrc.kde \
                ${PKG}/etc/X11/xinit/xinitrc.kde

# Make konsole a login shell by default:
cat ${CWD}/config/konsole.desktop > \
    ${PKG}/usr/share/applications/kde/konsole.desktop
chmod 0644 ${PKG}/usr/share/applications/kde/konsole.desktop

# Setup config files for KDM:
${PKG}/usr/bin/genkdmconf --no-old --no-old-scripts --no-backup --in ${PKG}/etc/kde/kdm
# Not allowing root to login at the console is just plain silly.  If they have physical access to
# the machine, what's the point of trying to stop this?  Even the kdmrc file says this is supposed
# to be the default.
sed -i -e 's|AllowRootLogin=false|AllowRootLogin=true|g' \
          ${PKG}/etc/kde/kdm/kdmrc

if [ "${SB_SLKART}" = "YES" ] ;then
  for file in kdeglobals mediamanagerrc kdesktoprc konsolerc ksplashrc ;do
    rm -f ${PKG}/usr/share/config/${file}
  done
  mv ${PKG}/etc/kde/kdm/kdmrc ${PKG}/etc/kde/kdm/kdmrc.orig
else
  # Set sane defaults for antialiasing:
  if [ ! -e ${PKG}/usr/share/config/kdeglobals ]; then
    rm -f ${PKG}/usr/share/config/kdeglobals
    install -m0644 ${CWD}/config/kdeglobals \
                   ${PKG}/usr/share/config/kdeglobals.new
  else
    # This might be fixed or unsafe.  Better check it out...
    echo
    echo "BAILOUT: kdeglobals already exists.  Check to see if anti-aliased"
    echo "         fonts work out-of-the-box now..."
    echo
    exit 1
  fi
  install -m0644 ${CWD}/config/mediamanagerr \
                 ${PKG}/usr/share/config/mediamanagerrc.new
  # Change the konsole defaults to look like the real Linux console:
  install -m0644 ${CWD}/config/konsolerc \
                 ${PKG}/usr/share/config/konsolerc.new
  mv ${PKG}/etc/kde/kdm/kdmrc ${PKG}/etc/kde/kdm/kdmrc.new
fi

mv ${PKG}/etc/kde/kdm/Xsession \
   ${PKG}/etc/kde/kdm/Xsession.orig
if [ "${SB_DBUS}" = "YES" ] ; then
  cat ${CWD}/config/Xsession.dbus > ${PKG}/etc/kde/kdm/Xsession.new
  cat ${CWD}/config/Xsession.dbus > ${PKG}/etc/kde/kdm/Xsession.dbus
  cat ${CWD}/config/Xsession > ${PKG}/etc/kde/kdm/Xsession.nodbus
else
  cat ${CWD}/config/Xsession > ${PKG}/etc/kde/kdm/Xsession.new
  cat ${CWD}/config/Xsession > ${PKG}/etc/kde/kdm/Xsession.nodbus
  cat ${CWD}/config/Xsession.dbus > ${PKG}/etc/kde/kdm/Xsession.dbus
fi
chmod 0755 ${PKG}/etc/kde/kdm/Xsession*
mv ${PKG}/etc/kde/kdm/backgroundrc \
   ${PKG}/etc/kde/kdm/backgroundrc.new

mv ${PKG}/etc/kde/kdm/Xaccess \
   ${PKG}/etc/kde/kdm/Xaccess.new
mv ${PKG}/etc/kde/kdm/Xsetup \
   ${PKG}/etc/kde/kdm/Xsetup.new
mv ${PKG}/etc/kde/kdm/Xreset \
   ${PKG}/etc/kde/kdm/Xreset.new
mv ${PKG}/etc/kde/kdm/Xstartup \
   ${PKG}/etc/kde/kdm/Xstartup.new
mv ${PKG}/etc/kde/kdm/Xwilling \
   ${PKG}/etc/kde/kdm/Xwilling.new

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS COPYING* README ${NAME}.lsm ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# HTML docs
HTML_DIR=$(kde-config --expandvars --install html)
if [ -d ${PKG}/${HTML_DIR} ]; then
  for lang_dir in ${PKG}/${HTML_DIR}/* ; do
    if [ -d ${lang_dir} ]; then
      # replace absolute symlinks with relative ones
      ( cd ${lang_dir}
        for i in *; do
          [ -d ${i} -a -L ${i}/common ] && rm -f ${i}/common && ln -sf ../common ${i}/common
        done
        for i in */*; do
          [ -d ${i} -a -L ${i}/common ] && rm -f ${i}/common && ln -sf ../../common ${i}/common
        done
        for i in */*/*; do
          [ -d ${i} -a -L ${i}/common ] && rm -f ${i}/common && ln -sf ../../../common ${i}/common
        done
      )
    fi
  done
fi

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
# Save old config files:
if [ ! -L etc/X11/kdm ]; then
  if [ -d etc/X11/kdm ]; then
    mkdir -p etc/kde/kdm
    cp -a etc/X11/kdm/* etc/kde/kdm
    rm -rf etc/X11/kdm
    ( cd etc/X11 ; ln -sf /etc/kde/kdm kdm )
  fi
elif [ ! -e etc/X11/kdm ]; then
  mkdir -p etc/X11
  ( cd etc/X11 ; ln -sf /etc/kde/kdm kdm )
fi

config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find usr/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find var/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
  echo '# Fix permissions' >> ${PKG}/install/doinst.sh
  echo '${CHROOT} /bin/chmod 4755 /usr/bin/kcheckpass' >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/*.desktop.gz ${CWD}/apply-patches.sh ${CWD}/cr*.png.gz\
                 ${CWD}/mailsettings.cc.gz ${CWD}/logrotate-kdm.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.gz \
                 ${SBDIR}/patches/
  mkdir -p ${SBDIR}/config
  install -m0644 ${CWD}/config/* \
                 ${SBDIR}/config/
  mkdir -p ${SBDIR}/env
  install -m0644 ${CWD}/env/agent-*.sh \
                 ${SBDIR}/env/
  mkdir -p ${SBDIR}/kludge/
  install -m0644 ${CWD}/kludge/* \
                 ${SBDIR}/kludge/
  mkdir -p ${SBDIR}/xinit/
  install -m0644 ${CWD}/xinit/* \
                 ${SBDIR}/xinit/
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^  ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  /bin/chmod 4755 ./usr/bin/kcheckpass; "

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
