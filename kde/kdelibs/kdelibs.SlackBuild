#!/bin/bash
#-- kdelibs for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.brg>
# Suggested usage: $ kdelibs.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.kde.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=kdelibs
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-3.5.10}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
SLKTARGET=${SLKTARGET:-i486}
SLKDIST=${SLKDIST:-Slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/kde/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$( echo ${VERSION} | tr - .)-${ARCH}-${BUILD}${PACKAGER_ID}

SB_APIDOCS=${SB_APIDOCS:-NO}
# Use external libkdnsd
# Needs kdnssd-avahi compiled after
SB_KDNSD=${SB_KDNSD:-YES}

# Set to YES to use enchant/hunspell instead aspell
SB_HUNSPELL=${SB_HUNSPELL:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
KDE_MIRROR=${KDE_MIRROR:-ftp://ftp.kde.org/pub/kde}
DL_URL="${KDE_MIRROR}/stable/${VERSION}/src/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}/usr

if [ -f /etc/profile.d/qt3.sh ] ;then
  unset QTDIR
  source /etc/profile.d/qt3.sh
else
  QTDIR=/usr/lib/qt
fi

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# Add Slackware to custom dists (fix some web user agent recognizing scripts)
if [ "${SLKDIST}" = "Slackware" ] ;then
  export KDELIBS_SLK_DIST="(${SLKDIST})"
else
  export KDELIBS_SLK_DIST="(${SLKDIST} Slackware)"
fi

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

echo "Custom distro name is: ${SLKDIST}"

sed -i -e "s,^#define KDE_VERSION_STRING .*,#define KDE_VERSION_STRING \"${VERSION} ${SLKDIST}\"," \
          kdecore/kdeversion.h || exit 1

make -f admin/Makefile.common cvs || exit 1

CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
./configure \
  --prefix=/usr \
  --sysconfdir=/etc/kde \
  --includedir=/usr/include/kde \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --disable-rpath \
  --disable-dependency-tracking \
  --enable-gcc-hidden-visibility \
  --enable-new-ldflags \
  --disable-debug \
  --disable-warnings \
  --enable-final \
  --with-ssl-dir=/usr \
  --with-xinerama \
  --with-alsa \
  --disable-fast-malloc \
  --enable-cups \
  --enable-mitshm \
  --enable-pie \
  --enable-sendfile \
  --enable-dnotify \
  --enable-inotify \
  --disable-libfam \
  --with-rgbfile=/usr/share/X11/rgb.txt \
  --with-distribution="${SLKDIST}" \
  --with-jasper \
  --with-openexr \
  --with-qt-dir=${QTDIR} \
  --build=${SLKTARGET}-slackware-linux || exit 1

make -j${NJOBS} || exit 1

if [ "${SB_APIDOCS}" = "YES" ] ;then
  make -j${NJOBS} apidox || exit 1
fi
make install DESTDIR=${PKG} || exit 1

chmod a+x ${PKG}/usr/lib/*.so*
zcat ${CWD}/devices.protocol.gz > \
     ${PKG}/usr/share/services/devices.protocol || exit 1

rm -rf ${PKG}/usr/share/icons/hicolor

# remove references to extraneous/optional libraries in .la files (#170602)
# fam, libart_lgpl, pcre, libidn, libpng, libjpeg, libdns_sd, libacl/libattr, alsa-lib/asound
find ${PKG}/usr/lib -name "*.la" | xargs \
 sed -i \
 -e "s@-lfam@@g" \
 -e "s@/usr/lib/libfam.la@@g" \
 -e "s@-lart_lgpl_2@@g" \
 -e "s@/usr/lib/libpcreposix.la@@g" \
 -e "s@-lpcreposix@@g" \
 -e "s@-lpcre@@g" \
 -e "s@-lidn@@g" \
 -e "s@/usr/lib/libidn.la@@g" \
 -e "s@-lpng@@g" \
 -e "s@-ljpeg@@g" \
 -e "s@/usr/lib/libjpeg.la@@g" \
 -e "s@-ldns_sd@@g" \
 -e "s@-lacl@@g" \
 -e "s@/usr/lib/libacl.la@@g" \
 -e "s@/lib/libacl.la@@g" \
 -e "s@-lattr@@g" \
 -e "s@/usr/lib/libattr.la@@g" \
 -e "s@/lib/libattr.la@@g" \
 -e "s@-lasound@@g"  \
 -e "s@-lutempter@@g"

# libkdnssd bits
rm -f ${PKG}/usr/lib/libkdnssd.la
if [ "${SB_KDNSD}" = "YES" ] ;then
  rm -rf ${PKG}{/usr/lib/libkdnssd.*,/usr/include/kde/dnssd}
fi

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)

mkdir -p ${PKG}/etc/profile.d
install -m0755 ${CWD}/profile.d/kde.sh \
               ${PKG}/etc/profile.d/kde.sh
install -m0755 ${CWD}/profile.d/kde.csh \
               ${PKG}/etc/profile.d/kde.csh
chmod 0755 ${PKG}/etc/profile.d/kde.*

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS COMPILING COMPILING.html COPYING COPYING.BSD COPYING.LIB DEBUG \
  INSTALL KDE2PORTING.html KDE3PORTING.html NAMING README ${NAME}.lsm \
  ${CWD}/ChangeLog.SB ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# HTML docs
HTML_DIR=/usr/share/HTML
if [ -d ${PKG}/${HTML_DIR} ]; then
  for lang_dir in ${PKG}/${HTML_DIR}/* ; do
    if [ -d ${lang_dir} ]; then
      # replace absolute symlinks with relative ones
      ( cd ${lang_dir}
        for i in *; do
          [ -d ${i} -a -L ${i}/common ] && rm -f ${i}/common && ln -sf ../common ${i}/common
        done
      )
    fi
  done
fi

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
  CHROOT="chroot ${ROOTDIR} "
  ROOTDIR="${ROOTDIR}/"
fi
# Fix permissions
${CHROOT} /bin/chmod 4755 /usr/bin/kgrantpty
${CHROOT} /bin/chmod 4755 /usr/bin/fileshareset
${CHROOT} /bin/chmod 4755 /usr/bin/kpac_dhcp_helper
${CHROOT} /bin/chmod 4755 /usr/bin/start_kdeinit
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{patches,profile.d}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${CWD}/devices.protocol.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/* \
                 ${SBDIR}/patches/
  install -m0755 ${CWD}/profile.d/kde.*  \
                 ${SBDIR}/profile.d/
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  /bin/chmod 4755 usr/bin/{kgrantpty,fileshareset};
  /bin/chmod 4755 usr/bin/{kpac_dhcp_helper,start_kdeinit}; "

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
