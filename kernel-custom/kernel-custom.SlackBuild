#!/bin/bash
#-- kernel-k8 for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.brg>
# Suggested usage: $ kernel-k8.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://kernel.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

KERNNAME=${KERNNAME:-custom}
PNAME=linux
NAME=kernel-${KERNNAME}
MNAME=kernel-modules-${KERNNAME}
HNAME=kernel-headers
DNAME=kernel-doc
PKGF=${PKGF:-${TMP}/package-${NAME}}
PKG=${PKGF}/${NAME}
MPKG=${PKGF}/${MNAME}
HPKG=${PKGF}/${HNAME}
DPKG=${PKGF}/${DNAME}

# Fill this stuff in:

VERSION=${VERSION:-2.6.25.11}
SVER="$( echo ${VERSION} | cut -d . -f 1-2 )"
PVER="$( echo ${VERSION} | cut -d . -f 1-3 )"
ARCH=${ARCH:-i686}
BUILD=${BUILD:-1}
FVER="${VERSION}-${BUILD}${PACKAGER_ID}"
DOCDIR=${DPKG}/usr/doc/${NAME}-${FVER}
SBDIR=${PKG}/usr/src/slackbuilds/kernel/${NAME}-${FVER}
PKGDEST=${PKGDEST:-${CWD}}
KERNELSDIR=/usr/src/kernels/${FVER}-${ARCH}
MODDIR=/lib/modules/${FVER}
PKGNAME=${NAME}-$( echo ${FVER} | tr - _ )-${ARCH}-${BUILD}${PACKAGER_ID}
MPKGNAME=${MNAME}-$( echo ${FVER} | tr - _ )-${ARCH}-${BUILD}${PACKAGER_ID}
HPKGNAME=${HNAME}-$( echo ${FVER} | tr - _ )-x86-${BUILD}${PACKAGER_ID}
DPKGNAME=${DNAME}-$( echo ${FVER} | tr - _ )-noarch-${BUILD}${PACKAGER_ID}

# Do not interfere in make
PARCH=${ARCH}
unset ARCH LDFLAGS CFLAGS CXXFLAGS CPPFLAGS

DATE=$(LC_ALL=C date +%d-%b-%Y)

# Set to YES to only untar kernel and apply patches. The source will be in
# ${TMP} directory. This option can be used if you want create a .config before,
# not needing use SB_OTF option (put the .config file as in ${CWD} as config-custom.
SB_PREP=${SB_PREP:-NO}

# Set to YES if you want configure a kernel in ${TMP} dir before the "make"
# The menuconfig or xconfig will run. Else default (and incompatible)
# ${CWD}/config-custom will be used. OTF=On The Fly
SB_OTF=${SB_OTF:-YES}

SRCDIR=${PNAME}-${PVER}
SRCARCHIVE=${SRCDIR}.tar.bz2
PSRCARCHIVE=patch-${VERSION}.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://www.kernel.org/pub/linux/kernel/v${SVER}/${SRCARCHIVE}"
PDL_URL="http://www.kernel.org/pub/linux/kernel/v${SVER}/${PSRCARCHIVE}"

# Test if needs a patch.
[ "$( echo ${VERSION} | cut -d . -f 4 )" ] && export SB_PATCH=YES

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi
if [ "${SB_PATCH}" = "YES" ] ;then
  if ! test -r ${PSRCARCHIVE}; then
    test -r ${CWD}/${PSRCARCHIVE} || wget ${DL_OPTS} ${PDL_URL} || exit 1
  fi
fi

if [ -d ${PKGF} ]; then
  # Clean up a previous build
  rm -rf ${PKGF}
fi
mkdir -p ${PKG} ${MPKG} ${HPKG} ${DPKG}

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
if [ "${SB_PATCH}" = "YES" ] ;then
  bzcat ${CWD}/${PSRCARCHIVE} | patch -p1
fi
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

# Put custom config if it exists
[ -f ${CWD}/config-custom ] && cat ${CWD}/config-custom > .config

if [ "${SB_PREP}" = "YES" ] ;then
  echo "Patched kernel is in ${TMP}"
  exit 0
fi

if [ "${SB_OTF}" = "YES" ] ;then
  if [ "${DISPLAY}" ] ; then
    echo "DISPLAY founded. Running xconfig"
    make xconfig || exit 1
  else
    echo "DISPLAY not founded. Running menuconfig"
    make menuconfig || exit 1
  fi
fi

sed -i -e "/^CONFIG_LOCALVERSION=/s|=.*|=\"-${BUILD}${PACKAGER_ID}\"|g" \
          .config || exit 1

make || exit 1

mkdir -p ${PKG}/${MODDIR}
make INSTALL_MOD_PATH=${MPKG} modules_install KERNELRELEASE=${FVER} || exit 1
make INSTALL_MOD_PATH=${MPKG} vdso_install KERNELRELEASE=${FVER} || exit 1

# =================================================================
# Main package
# =================================================================

KERNEL=arch/i386/boot/bzImage
SYSMAP=System.map
CONFIG=.config

mkdir -p ${PKG}/boot || exit 1

cp ${KERNEL} ${PKG}/boot/vmlinuz-${KERNNAME}-${FVER} || exit 1
/sbin/rdev -R ${PKG}/boot/vmlinuz-${KERNNAME}-${FVER} 0
/sbin/rdev -v ${PKG}/boot/vmlinuz-${KERNNAME}-${FVER} -1
/sbin/rdev -r ${PKG}/boot/vmlinuz-${KERNNAME}-${FVER} 0
( cd ${PKG}/boot ; ln -sf vmlinuz-${KERNNAME}-${FVER} vmlinuz )
cp ${SYSMAP} ${PKG}/boot/System.map-${KERNNAME}-${FVER} || exit 1
( cd ${PKG}/boot ; ln -sf System.map-${KERNNAME}-${FVER} System.map )
cp ${CONFIG} ${PKG}/boot/config-${KERNNAME}-${FVER} || exit 1
( cd ${PKG}/boot ; ln -sf config-${KERNNAME}-${FVER} config )

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc

# =================================================================
# Modules package
# =================================================================
mkdir -p ${MPKG}/etc/rc.d
cat ${CWD}/rc.modules.new > \
    ${MPKG}/etc/rc.d/rc.modules-${FVER}.new || exit 1
chmod 755 ${MPKG}/etc/rc.d/rc.modules-${FVER}.new 
cat ${CWD}/rc.modules.custom > \
    ${MPKG}/etc/rc.d/rc.modules-${FVER}.${KERNNAME} || exit 1
chmod 755 ${MPKG}/etc/rc.d/rc.modules-${FVER}.${KERNNAME}

# Clean backup files from patch.
find . -type f -name "*~" | xargs rm -f

( # Development
  rm -f ${MPKG}/${MODDIR}/build || exit 1
  rm -f ${MPKG}/${MODDIR}/source || exit 1
  mkdir -p ${MPKG}/${MODDIR}/build || exit 1
  ( cd ${MPKG}/${MODDIR} ; ln -s build source ) || exit 1
  # dirs for additional modules per module-init-tools, kbuild/modules.txt
  mkdir -p ${MPKG}/${MODDIR}/extra || exit 1
  mkdir -p ${MPKG}/${MODDIR}/updates || exit 1
  # first copy everything
  cp --parents $(find  -type f -name "Makefile*" -o -name "Kconfig*") \
     ${MPKG}/${MODDIR}/build || exit 1
  cp Module.symvers ${MPKG}/${MODDIR}/build || exit 1
  cp System.map ${MPKG}/${MODDIR}/build || exit 1
  if [ -s Module.markers ]; then
    cp Module.markers ${MPKG}/${MODDIR}/build || exit 1
  fi
  # then drop all but the needed Makefiles/Kconfig files
  rm -rf ${MPKG}/${MODDIR}/build/Documentation || exit 1
  rm -rf ${MPKG}/${MODDIR}/build/scripts || exit 1
  rm -rf ${MPKG}/${MODDIR}/build/include || exit 1
  cp .config ${MPKG}/${MODDIR}/build || exit 1
  cp -a scripts ${MPKG}/${MODDIR}/build || exit 1

  if [ -d arch/x86/scripts ]; then
    cp -a arch/x86/scripts ${MPKG}/${MODDIR}/build/arch/x86 || exit 1
  fi
  if [ -f arch/x86/*lds ]; then
    cp -a arch/x86/*lds ${MPKG}/${MODDIR}/build/arch/x86/ || exit 1
  fi

  rm -f ${MPKG}/${MODDIR}/build/scripts/*.o
  rm -f ${MPKG}/${MODDIR}/build/scripts/*/*.o
  mkdir -p ${MPKG}/${MODDIR}/build/include

  cd include || exit 1
  cp -a acpi config keys linux math-emu media mtd net pcmcia rdma rxrpc scsi sound video asm asm-generic ${MPKG}/${MODDIR}/build/include || exit 1
  cp -a $(readlink asm) ${MPKG}/${MODDIR}/build/include || exit 1

) || exit 1

# Make sure the Makefile and version.h have a matching timestamp so that
# external modules can be built
touch -r ${MPKG}/${MODDIR}/build/Makefile \
         ${MPKG}/${MODDIR}/build/include/linux/version.h || exit 1
touch -r ${MPKG}/${MODDIR}/build/.config \
         ${MPKG}/${MODDIR}/build/include/linux/autoconf.h || exit 1
# Copy .config to include/config/auto.conf so "make prepare" is unnecessary.
cp ${MPKG}/${MODDIR}/build/.config \
   ${MPKG}/${MODDIR}/build/include/config/auto.conf || exit 1

# Move the devel headers out of the root file system
mkdir -p ${MPKG}/usr/src/kernels
mv ${MPKG}/${MODDIR}/build ${MPKG}/${KERNELSDIR} || exit 1
ln -sf ../../..${KERNELSDIR} ${MPKG}/${MODDIR}/build || exit 1

# Write out the doinst.sh:
mkdir -p ${MPKG}/install
cat ${CWD}/slack-desc.modules > ${MPKG}/install/slack-desc
echo "${NAME} = $( echo ${FVER} | tr - _ )-${PARCH}-${BUILD}${PACKAGER_ID}" \
     ${MPKG}/install/slack-required

cat > ${MPKG}/install/doinst.sh << EOF
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
config etc/rc.d/rc.modules-${FVER}.new

# If rc.modules is a real file, back it up:
if [ -r etc/rc.d/rc.modules -a ! -L etc/rc.d/rc.modules ]; then
  cp -a etc/rc.d/rc.modules etc/rc.d/rc.modules.bak
fi
# Make rc.modules a symlink if it's not already, but do not replace
# an existing symlink.  You'll have to decide to point at a new version
# of this script on your own...
if [ ! -L etc/rc.d/rc.modules ]; then
  ( cd etc/rc.d ; rm -rf rc.modules )
  ( cd etc/rc.d ; ln -sf rc.modules-${FVER} rc.modules )
fi

# A good idea whenever kernel modules are added or changed:
if [ -x sbin/depmod ]; then
  chroot . /sbin/depmod -a ${FVER} 1> /dev/null 2> /dev/null
fi

EOF

# =================================================================
# Headers package
# =================================================================

mkdir -p ${HPKG}/usr/include

cp -R include/asm-x86 ${HPKG}/usr/include/ || exit 1
cp -R include/asm-generic ${HPKG}/usr/include/ || exit 1
cp -R include/linux ${HPKG}/usr/include/ || exit 1
cp -R include/mtd ${HPKG}/usr/include/ || exit 1
cp -R include/rdma ${HPKG}/usr/include/ || exit 1
cp -R include/sound ${HPKG}/usr/include/ || exit 1
cp -R include/video ${HPKG}/usr/include/ || exit 1

find ${HPKG} -type d -exec chmod 755 {} \;
find ${HPKG} -type f -exec chmod 644 {} \;

# Write out the doinst.sh:
mkdir -p ${HPKG}/install
cat ${CWD}/slack-desc.headers > ${HPKG}/install/slack-desc
cat > ${HPKG}/install/doinst.sh <<'EOF'
( cd usr/include ; rm -rf asm )
( cd usr/include ; ln -sf asm-x86 asm )
( cd usr/include ; rm -rf asm-i386 )
( cd usr/include ; ln -sf asm-x86 asm-i386 )
EOF

# =================================================================
# Documentation package
# =================================================================
mkdir -p ${DOCDIR}

# copy the source over
chmod -R a+r Documentation/*
( cd Documentation || exit 1
  tar cf - * | tar xf - -C ${DOCDIR} || exit 1
) || exit 1
zcat ${CWD}/COPYING.modules.gz > \
     ${DOCDIR}/COPYING.modules || exit 1

find ${DPKG} -type d -exec chmod 0755 {} \;
find ${DPKG} -type f -exec chmod 0644 {} \;

mkdir -p ${DPKG}/install
cat ${CWD}/slack-desc.doc > ${DPKG}/install/slack-desc

sed -i "s|_KERNNAME|${KERNNAME}|g;
        s|_PACKAGER|${PACKAGER}|g;s|_BUILD_DATE|${DATE}|g" \
        ${PKGF}/*/install/slack-desc

cp .config config-custom

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc* ${CWD}/slack-required* ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${CWD}/rc.modules.{new,custom} \
                 ${CWD}/COPYING.modules.gz ${TMP}/${SRCDIR}/config-custom \
                 ${SBDIR}/
  install -m0755 ${CWD}/kernel-custom.SlackBuild \
                 ${SBDIR}/kernel-custom.SlackBuild
  install -m0644 ${CWD}/patches/*.gz \
                 ${SBDIR}/patches/
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^  ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}custom.SlackBuild
fi

# Build the package:
cd ${PKG} || exit 1
chown -R root.root ${PKG}/*
makepkg -l y -c n ${PKGDEST}/${PKGNAME}.tgz

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"
MROOTCOMMANDS="set -o errexit -o xtrace ; cd ${MPKG} ;
  /bin/chown --recursive root:root .  ;"
HROOTCOMMANDS="set -o errexit -o xtrace ; cd ${HPKG} ;
  /bin/chown --recursive root:root .  ;"
DROOTCOMMANDS="set -o errexit -o xtrace ; cd ${DPKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "
MROOTCOMMANDS="${MROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${MPKGNAME}.tgz "
HROOTCOMMANDS="${HROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${HPKGNAME}.tgz "
DROOTCOMMANDS="${DROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${DPKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  eval ${MROOTCOMMANDS}
  eval ${HROOTCOMMANDS}
  eval ${DROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
  echo ${MROOTCOMMANDS} | fakeroot
  echo ${HROOTCOMMANDS} | fakeroot
  echo ${DROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
  /bin/su -c "${MROOTCOMMANDS}"
  /bin/su -c "${HROOTCOMMANDS}"
  /bin/su -c "${DROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKGF} ]; then
    rm -rf ${PKGF} && echo "${PKGF} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
