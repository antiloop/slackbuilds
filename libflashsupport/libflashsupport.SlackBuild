#!/bin/sh
#-- libflashsupport for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ libflashsupport.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://pulseaudio.org

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

SNAPBUILD=${SNAPBUILD:-YES}

NAME=libflashsupport
PKG=${PKG:-${TMP}/package-${NAME}}

if [ "${SNAPBUILD}" = "YES" ] ;then
  VERSION=${VERSION:-"$(LC_ALL=C date +%Y%m%d)"}
else
  VERSION=${VERSION:-20080810}
fi
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
SLKTARGET=${SLKTARGET:-i486}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable pulseaudio/oss (if none, defaults to OSS)
SB_PA=${SB_PA:-YES}
SB_OSS=${SB_OSS:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
#DL_URL="http://dl.sf.net/sourceforge/${NAME}/${SRCARCHIVE}"
DL_URL="http://prdownloads.sourceforge.net/${NAME}/${SRCARCHIVE}"
#DL_URL="http://download.sf.net/${NAME}/${SRCARCHIVE}"
SNAPUPDATE=${NAME}-snapshot.sh
export snap=${VERSION}

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  if [ "${SNAPBUILD}" = "YES" ] ;then
    test -r ${CWD}/${SRCARCHIVE} || sh ${CWD}/${SNAPUPDATE} || exit 1
  else
    test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
  fi
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1

[ "${SB_PA}" = "NO" -o "${SB_OSS}" = "NO" ] && SB_OSS=YES

if [ ! -r configure ]; then
  NOCONFIGURE=1 sh bootstrap.sh || exit 1
fi

mv Makefile.in Makefile.in.orig || exit 1
mv Makefile.am Makefile.am.orig || exit 1

if [ "${SB_PA}" = "YES" ] ; then

  for file in Makefile.in Makefile.am ;do
    sed -e 's|libflashsupport.la|libflashsupport-pulse.la|g' \
      ${file}.orig > ${file} || exit 1
  done

  CFLAGS="${SLKCFLAGS}" \
  CXXFLAGS="${SLKCFLAGS}" \
  ./configure \
    --prefix=/usr \
    --sysconfdir=/etc \
    --localstatedir=/var/lib \
    --infodir=/usr/info \
    --mandir=/usr/man \
    --docdir=/usr/doc/${NAME}-${VERSION} \
    --build=${SLKTARGET}-slackware-linux

  sed -i 's|^hardcode_libdir_flag_spec=.*|hardcode_libdir_flag_spec=""|g' libtool || exit 1
  sed -i 's|^runpath_var=LD_RUN_PATH|runpath_var=DIE_RPATH_DIE|g' libtool || exit 1

    make -j${NJOBS}
    make install DESTDIR=${PKG}

  rm -f ${PKG}/usr/lib/*.a
  rm -f ${PKG}/usr/lib/*.la

fi

if [ "${SB_OSS}" = "YES" ] ; then
  make distclean
  sed -i \
      -e '/^\/\/#define OSS/s|^//||g' \
      -e '/^#define PULSEAUDIO/s|^|//|g' \
      flashsupport.c || exit 1

( set -o xtrace
  gcc -shared -Wall -Werror ${SLKCFLAGS} ${LDFLAGS} -Wl,-soname -Wl,${NAME}-oss.so \
    $(pkg-config openssl --libs) -pthread -ffast-math -export-dynamic \
    flashsupport.c -o ${NAME}-oss.so || exit 1
) || exit 1

mkdir -p ${PKG}/usr/lib
install -m0755 ${NAME}-oss.so ${PKG}/usr/lib/ || exit 1

fi

# If all selected, use a script to change default or disable.
mkdir -p ${PKG}/usr/sbin
cat > ${PKG}/usr/sbin/flashsupport-control <<'EOF'
#!/bin/sh
# Selects default libflashsupport audio out

if [ "$UID" -ne "0" ] ;then
 echo "Please, run $0 as root."
 exit 1
fi

libdel(){
  if [ -e  /usr/lib/libflashsupport.so ] ;then
    rm -f /usr/lib/libflashsupport.so || exit 1
  fi
}
libselect(){
  echo "Setting ${AUDIOOUT} as default libflashsupport audio output."
  ( cd /usr/lib || exit 1
    libdel
    ln -s libflashsupport-${AUDIOOUT}.so libflashsupport.so || exit 1
  ) || exit 1
}

case $1 in
EOF

if [ "${SB_PA}" = "YES" ] ; then
  cat >> ${PKG}/usr/sbin/flashsupport-control <<'EOF'
  pulseaudio|PULSEAUDIO|pulse|PULSE|pa|PA)
    AUDIOOUT=pulse
    libselect
    ;;
EOF
fi

if [ "${SB_OSS}" = "YES" ] ; then
  cat >> ${PKG}/usr/sbin/flashsupport-control <<'EOF'
  oss|OSS|opensound|OPENSOUND)
    AUDIOOUT=oss
    libselect
    ;;
EOF
fi

cat >> ${PKG}/usr/sbin/flashsupport-control <<'EOF'
  off|OFF|disable|DISABLE|shutdown)
    echo "Disabling libflashsupport"
    libdel
    ;;
  *|-h|--help)
    echo "Usage: $0 {_OUTPUTS|disable}"
    exit 2
    ;;
esac
EOF

if [ "${SB_PA}" = "YES" -o "${SB_OSS}" = "YES" ] ;then
  sed -i -e 's/_OUTPUTS/pulseaudio|oss/g' ${PKG}/usr/sbin/flashsupport-control || exit 1
elif [ "${SB_PA}" = "YES" ] ;then
  sed -i -e 's/_OUTPUTS/pulseaudio/g' ${PKG}/usr/sbin/flashsupport-control || exit 1
else
  sed -i -e 's/_OUTPUTS/oss/g' ${PKG}/usr/sbin/flashsupport-control || exit 1
fi

chmod 0755 ${PKG}/usr/sbin/flashsupport-control

touch ${PKG}/usr/lib/libflashsupport.so

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
cat > ${DOCDIR}/README.slackware <<'EOF'
libflashsupport is disabled as default.
  As root:

  View audio outputs compiled in (in usage):
    /usr/sbin/flashsupport-control -h

  Switch to pulse:
    /usr/sbin/flashsupport-control pulseaudio

  Switch to oss:
    /usr/sbin/flashsupport-control oss

  Disable:
    /usr/sbin/flashsupport-control disable
EOF
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
  CHROOT="chroot ${ROOTDIR} "
  ROOTDIR="${ROOTDIR}/"
fi
if [ -f usr/lib/libflashsupport.so ] ;then
  ${CHROOT} /bin/rm -f /usr/lib/libflashsupport.so
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/${SNAPUPDATE} ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^  ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
