#!/bin/sh
#-- man for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ man.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=man
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-1.6f}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
SLKTARGET=${SLKTARGET:-i486}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable cache use
SB_CACHE=${SB_CACHE:-NO}
SB_CACHEDIR="/var/cache/man"

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
#DL_URL="http://dl.sf.net/sourceforge/${NAME}/${SRCARCHIVE}"
DL_URL="http://prdownloads.sourceforge.net/${NAME}/${SRCARCHIVE}"
#DL_URL="http://download.sf.net/${NAME}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

#replace bad ru trans
zcat ${CWD}/mess.ru.gz > msgs/mess.ru || exit 1

for src in $(find msgs -type f -name 'mess.[a-z][a-z]'); do
   lang=$(echo ${src} | sed -r 's;.*([a-z]{2})$;\1;')
   if   [ ${lang} = ja ]; then charset=euc-jp
   elif [ ${lang} = ko ]; then charset=euc-kr
   elif [ ${lang} = ru ]; then charset=koi8-r
   elif [ ${lang} = da ]; then charset=iso-8859-1
   elif [ ${lang} = de ]; then charset=utf-8
   elif [ ${lang} = en ]; then charset=iso-8859-1
   elif [ ${lang} = es ]; then charset=iso-8859-1
   elif [ ${lang} = fi ]; then charset=iso-8859-1
   elif [ ${lang} = fr ]; then charset=iso-8859-1
   elif [ ${lang} = it ]; then charset=iso-8859-1
   elif [ ${lang} = pt ]; then charset=iso-8859-1
   elif [ ${lang} = nl ]; then charset=iso-8859-1
   elif [ ${lang} = cs ]; then charset=iso-8859-2
   elif [ ${lang} = hr ]; then charset=iso-8859-2
   elif [ ${lang} = pl ]; then charset=iso-8859-2
   elif [ ${lang} = ro ]; then charset=iso-8859-2
   elif [ ${lang} = sl ]; then charset=iso-8859-2
   elif [ ${lang} = bg ]; then charset=cp1251
   elif [ ${lang} = el ]; then charset=iso-8859-7
   else
      echo === LANGUAGE ${lang}: MUST SPECIFY CHARSET/ENCODING
      exit 1
   fi
   iconv -t utf-8 -f ${charset} -o ${src}.utf ${src} && mv ${src}.utf ${src} || exit 1
done

unset NLSPATH

./configure -default +lang all +traditional -confdir /etc || exit 1

# HACK: Make output default to using -c; otherwise it appears broken.
sed -i -e "s/nroff /nroff -c /" conf_script || exit 1

touch Makefile   # make sure Make thinks we ran configure

sed -i -e "s|^s,@cmp@,.*|s,@cmp@,/usr/libexec/man-cmp.sh,|g" conf_script || exit 1
chmod 0755 conf_script

make CC="gcc ${SLKCFLAGS}" || exit 1

if [ "${SB_CACHE}" = "YES" ] ; then
  sed -i -e "s,^NOCACHE,# NOCACHE,g" src/man.conf || exit 1
fi

mkdir -p ${PKG}/usr/bin ${PKG}/usr/sbin

make install PREFIX=${PKG}

mkdir -p ${PKG}/usr/man/man1
mkdir -p ${PKG}/usr/man/man5
mkdir -p ${PKG}/usr/man/man8

for src in $(find man -type f -name '*.[1-9n]'); do
   lang=$(echo ${src} | sed -r 's;.*/([a-z]{2})/.*;\1;')
   page=$(basename ${src})
   sect=$(echo ${page} | sed -r 's;.*([1-9n])$;man\1;')
   dir=${PKG}/usr/man
   if   [ ${lang} = ja ]; then charset=euc-jp
   elif [ ${lang} = ko ]; then charset=euc-kr
   elif [ ${lang} = da ]; then charset=iso-8859-1
   elif [ ${lang} = de ]; then charset=iso-8859-1
   elif [ ${lang} = en ]; then charset=iso-8859-1
   elif [ ${lang} = es ]; then charset=iso-8859-1
   elif [ ${lang} = fi ]; then charset=iso-8859-1
   elif [ ${lang} = fr ]; then charset=iso-8859-1
   elif [ ${lang} = it ]; then charset=iso-8859-1
   elif [ ${lang} = pt ]; then charset=iso-8859-1
   elif [ ${lang} = nl ]; then charset=iso-8859-1
   elif [ ${lang} = cs ]; then charset=iso-8859-2
   elif [ ${lang} = hr ]; then charset=iso-8859-2
   elif [ ${lang} = pl ]; then charset=iso-8859-2
   elif [ ${lang} = ro ]; then charset=iso-8859-2
   elif [ ${lang} = sl ]; then charset=iso-8859-2
   elif [ ${lang} = bg ]; then charset=cp1251
   elif [ ${lang} = el ]; then charset=iso-8859-7
   else
      echo === LANGUAGE ${lang}: MUST SPECIFY CHARSET/ENCODING
      exit 1
   fi
   mkdir -p ${dir}/${lang}/${sect}
   iconv -t utf-8 -f ${charset} -o ${dir}/${lang}/${sect}/${page} ${src}

   # ensure POSIX/C locale only has ASCII subset and no latin-1 
   if [ ${lang} = en ]; then
      mkdir -p ${dir}/${sect}
      iconv -t ascii//translit -f ${charset} -o ${dir}/${sect}/${page} ${src}
   fi
done

mkdir -p ${PKG}/etc/cron.{daily,weekly}
mv ${PKG}/etc/man.conf ${PKG}/etc/man.conf.new || exit 1

zcat ${CWD}/makewhatis.crondaily.gz > \
     ${PKG}/etc/cron.daily/makewhatis.cron || exit 1
zcat ${CWD}/makewhatis.cronweekly.gz > \
     ${PKG}/etc/cron.weekly/makewhatis.cron || exit 1
chmod 0755 ${PKG}/etc/cron.*/makewhatis.cron

mkdir -p ${PKG}/usr/libexec
zcat ${CWD}/man-cmp.sh.gz > ${PKG}/usr/libexec/man-cmp.sh || exit 1
chmod 0755 ${PKG}/usr/libexec/man-cmp.sh

mkdir -p ${PKG}/${SB_CACHEDIR}

mkdir -p ${PKG}/${SB_CACHEDIR}/local
mkdir -p ${PKG}/${SB_CACHEDIR}/X11R6
for i in 1 2 3 4 5 6 7 8 9 n; do
  mkdir -p ${PKG}/${SB_CACHEDIR}/cat${i}
  mkdir -p ${PKG}/${SB_CACHEDIR}/local/cat${i}
  mkdir -p ${PKG}/${SB_CACHEDIR}/X11R6/cat${i}
done

# added man2html stuff
make -C man2html install DESTDIR=${PKG} || exit 1

for src in $(find ${PKG}/usr/man -type f -name '*.[1-9n]'); do
  gzip -9 ${src}
done

# symlinks for manpath
ln -s man ${PKG}/usr/bin/manpath
ln -s man.1.gz ${PKG}/usr/man1/manpath.1.gz

# move locale files to proper directories
for i in $(ls ${PKG}/usr/share/locale/); do
  mkdir ${PKG}/usr/share/locale/${i}/LC_MESSAGES
  mv ${PKG}/usr/share/locale/${i}/man ${PKG}/usr/share/locale/${i}/LC_MESSAGES/man.mo
done

rm -rf ${PKG}/usr/etc

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
)

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  COPYING* LSM README TODO  ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi

if [ -f usr/lib/man.conf ] ; then
  mv usr/lib/man.conf etc/man.conf
fi

config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

if [ "${SB_CACHE}" = "YES" ] ; then
cat >> ${PKG}/install/doinst.sh <<'EOF'
${CHROOT} /bin/chown root.man /usr/bin/man
${CHROOT} /bin/chmod 2755 /usr/bin/man
EOF
fi

cat >> ${PKG}/install/doinst.sh <<EOF
\${CHROOT} /bin/chown root.man ${SB_CACHEDIR}/cat[123456789n]
\${CHROOT} /bin/chown root.man ${SB_CACHEDIR}/local
\${CHROOT} /bin/chown root.man ${SB_CACHEDIR}/local/cat[123456789n]
\${CHROOT} /bin/chown root.man ${SB_CACHEDIR}/X11R6
\${CHROOT} /bin/chown root.man ${SB_CACHEDIR}/X11R6/cat[123456789n]
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${CWD}/mess.ru.gz ${CWD}/*.cron*.gz \
                 ${CWD}/man-cmp.sh.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.gz \
                 ${SBDIR}/patches/
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^  ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  [ "${SB_CACHE}" = "YES" ] && /bin/chown root.man ./usr/bin/man ;
  [ "${SB_CACHE}" = "YES" ] && /bin/chmod 2755 ./usr/bin/man ;
  /bin/chown root.man ./${SB_CACHEDIR}/cat[123456789n] ;
  /bin/chown root.man ./${SB_CACHEDIR}/local ;
  /bin/chown root.man ./${SB_CACHEDIR}/local/cat[123456789n] ;
  /bin/chown root.man ./${SB_CACHEDIR}/X11R6 ;
  /bin/chown root.man ./${SB_CACHEDIR}/X11R6/cat[123456789n] ; "

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
