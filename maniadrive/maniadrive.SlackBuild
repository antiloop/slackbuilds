#!/bin/sh
#-- maniadrive for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.brg>
# Suggested usage: $ maniadrive.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://maniadrive.raydium.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

CWD=$(pwd)
if [ "${TMP}" = "" ]; then
  TMP=/tmp
fi

PNAME=ManiaDrive
NAME=maniadrive
PKG=${TMP}/package-${NAME}

VERSION=${VERSION:-1.2}
OVER=${OVER:-0.7}
ARCH=${ARCH:-i686}
BUILD=${BUILD:-3}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}-${VERSION}-src
SRCDIR2=${PNAME}-${VERSION}-data
SRCARCHIVE=${SRCDIR}.tar.gz
SRCARCHIVE2=${SRCDIR2}.tar.bz2
OSRCARCHIVE=ode-src-${OVER}.zip
PSRCARCHIVE=php5.2-latest.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://dl.sf.net/sourceforge/${NAME}/${SRCARCHIVE}"
#DL_URL="http://prdownloads.sourceforge.net/${NAME}/${SRCARCHIVE}"
#DL_URL="http://download.sf.net/${NAME}/${SRCARCHIVE}"
DL_URL2="http://dl.sf.net/sourceforge/${NAME}/${SRCARCHIVE2}"
O_DL_URL="http://dl.sf.net/sourceforge/opende/${OSRCARCHIVE}"
PHP_DL_URL="http://snaps.php.net/php5.2-latest.tar.bz2"

if [ "$ARCH" = "i386" ]; then
  SLKCFLAGS="-O2 -march=i386 -mtune=i686"
elif [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=athlon64 -mtune=athlon64 -msse3 -pipe -fomit-frame-pointer"
elif [ "$ARCH" = "s390" ]; then
  SLKCFLAGS="-O2"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2"
fi

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi
if ! test -r ${SRCARCHIVE2}; then
  test -r ${CWD}/${SRCARCHIVE2} || wget ${DL_OPTS} ${DL_URL2} || exit 1
fi
if ! test -r ${OSRCARCHIVE}; then
  test -r ${CWD}/${OSRCARCHIVE} || wget ${DL_OPTS} ${O_DL_URL} || exit 1
fi
if ! test -r ${PSRCARCHIVE}; then
  test -r ${CWD}/${PSRCARCHIVE} || wget ${DL_OPTS} ${PHP_DL_URL} || exit 1
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1
tar -xjvf ${CWD}/${SRCARCHIVE2} || exit 1

chmod -R u+w,go+r-w,a-s .

zcat ${CWD}/${PNAME}-Makefile.diff.gz | patch -p0 -E --backup --verbose || exit 1
zcat ${CWD}/${PNAME}-mania2.c.diff.gz | patch -p0 -E --backup --verbose || exit 1
zcat ${CWD}/${PNAME}-mania_drive.c.diff.gz | patch -p0 -E --backup --verbose || exit 1

sed -i "s|mania_server_tracks.php|/usr/share/${NAME}/mania_server_tracks.php|g" \
         mania_server.c || exit 1

( cd raydium || exit 1

  # build ode with SINGLE-PRECISION
  ( unzip -o -q ${CWD}/${OSRCARCHIVE} || exit 1
    mv ode-0.7 ode || exit 1
    cd ode || exit 1
    CFLAGS="${SLKCFLAGS} -ffast-math -fPIC" \
    CXXFLAGS="${SLKCFLAGS} -ffast-math -fPIC" \
    ./configure || exit 1

   echo '
#ifndef dEpsilon
#define dEpsilon FLT_EPSILON
#endif
' >> include/ode/config.h || exit 1

    make || exit 1
  ) || exit 1

  # build static php5 lib
  # if php5-devel would provide libphp5.a ...
  ( tar -xjf ${CWD}/${PSRCARCHIVE} || exit 1
    php=$(ls -dt php5*)
    mv "${php}" php || exit 1
    cd php || exit 1
    ./configure \
       --enable-embed=static \
       --with-zlib \
       --enable-ftp \
       --enable-static=zlib \
       --with-curl \
       --disable-simplexml \
       --disable-xmlreader \
       --disable-xmlwriter \
       --enable-soap \
       --without-iconv || exit 1

    make -j${NJOBS} || exit 1
  ) || exit 1
) || exit 1

# build raydium libs
make -j${NJOBS} || exit 1

# build binaries (libphp5 is static linked)
( set +o xtrace
  for i in mania2 mania_server mania_drive; do
	gcc ${i}.c -Wall ${SLKCFLAGS} \
		-DFORCE_LIBRAYDIUM -DBINDIR=\"/usr/bin/${NAME}\" -DGAMEDIR=\"/usr/share/${NAME}\" \
		-o ${i} \
		-Iraydium/php/ -Iraydium/php/main/ -Iraydium/php/Zend -Iraydium/php/TSRM \
		-Iraydium/ode/include \
		raydium/ode/ode/src/libode.a \
		-L ./ -lraydium \
		-L/usr/X11R6/lib/ -lXinerama \
		-lGL -lGLU -lm -lopenal -lvorbis -logg -lvorbisfile -ljpeg \
		raydium/php/libs/libphp5.a \
		-lresolv -lcrypt -lz -lcurl -lxml2 -lGLEW || exit 1
  done
) || exit 1

# binaries
mkdir -p ${PKG}/usr/bin
install -m 755 mania2 mania_drive \
               ${PKG}/usr/bin/ || exit 1
mkdir -p ${PKG}/usr/libexec
install -m 755 mania_server ${PKG}/usr/libexec/mania_server.bin || exit 1

cat > ${PKG}/usr/bin/mania_server <<EOF
#!/bin/bash

cd /usr/share/${NAME}/
exec mania_server.bin "\$@"
EOF
chmod 0755 ${PKG}/usr/bin/mania_server || exit 1

# libraydium
mkdir -p ${PKG}/usr/lib
install -m 0644 libraydium.so.0.0 \
	${PKG}/usr/lib/
ln -sf libraydium.so.0.0 ${PKG}/usr/lib/libraydium.so.0
ln -sf libraydium.so.0.0 ${PKG}/usr/lib/libraydium.so

mkdir -p ${PKG}/usr/share/${NAME}
# rayphp
cp -a rayphp \
      ${PKG}/usr/share/${NAME}/ || exit 1

# data
install -m 0644 *.php \
                ${PKG}/usr/share/${NAME}/ || exit 1
install -m 0644 ${SRCDIR2}/data/* \
                ${PKG}/usr/share/${NAME}/ || exit 1
# sounds
mkdir -p ${PKG}/usr/share/${NAME}/mania_music
install -m 0644 ${SRCDIR2}/mania_music/*.ogg \
                ${PKG}/usr/share/${NAME}/mania_music/ || exit 1

# clean up, is copyied by %doc
rm -f ${PKG}/usr/share/${NAME}/COPYING
rm -f ${PKG}/usr/share/${NAME}/README

( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)

mkdir -p ${PKG}/usr/share/applications
cat > ${PKG}/usr/share/applications/${NAME}.desktop <<EOF
[Desktop Entry]
Encoding=UTF-8
Name=ManiaDrive
Comment=ManiaDrive is a free clone of Trackmania
Exec=mania_drive
Terminal=false
Icon=${NAME}.png
Type=Application
Categories=Game;3DGame;
EOF

cat > ${PKG}/usr/share/applications/${NAME}-trackedit.desktop <<EOF
[Desktop Entry]
Encoding=UTF-8
Name=Mania Drive Track Editor
Comment=ManiaDrive is a free clone of Trackmania
Exec=mania2
Terminal=false
Icon=${NAME}.png
Type=Application
Categories=Game;3DGame;
EOF

mkdir -p ${PKG}/usr/share/icons/hicolor/48x48/apps
zcat ${CWD}/${NAME}.png.gz >\
     ${PKG}/usr/share/icons/hicolor/48x48/apps/${NAME}.png
( cd ${PKG}/usr/share/icons/hicolor || exit 1
  for size in 16x16 32x32 ;do
    dir=${size}/apps
    mkdir -p ${dir}
    convert 48x48/apps/${NAME}.png -depth 8 -filter Lanczos \
            -resize ${size} ${dir}/${NAME}.png || exit 1
  done
) || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  raydium/*.txt ${SRCDIR2}/{COPYING,README} ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
    mv ${PKG}/usr/share/man ${PKG}/usr/man
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
      rm -f dir
      gzip -9 *
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

# Replicate slackbuild and patches
mkdir -p ${SBDIR}
install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
               ${CWD}/${NAME}*.diff.gz ${CWD}/${NAME}.png.gz ${SBDIR}/
install -m0755 ${CWD}/${NAME}.SlackBuild \
               ${SBDIR}/${NAME}.SlackBuild
sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
        /^BUILD=/s/:-.*}/:-$BUILD}/
        /^ARCH=/s/:-.*}/:-$ARCH}/
        " ${SBDIR}/${NAME}.SlackBuild


# Build package:
set +o xtrace			# no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test $UID = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR}
    echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  rm -rf ${PKG}
  echo "Cleanup completed"
fi
