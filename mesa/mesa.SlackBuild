#!/bin/sh
#-- mesa for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ mesa.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.mesa3d.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=Mesa
NAME=mesa
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-7.0.3}
if [ "${SB_NATIVE}" = "NO" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
SLKTARGET=${SLKTARGET:-i486}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}-${VERSION}
SRCARCHIVE=${PNAME}Lib-${VERSION}.tar.gz
SRCARCHIVE2=${PNAME}GLUT-${VERSION}.tar.gz
SRCARCHIVE3=${PNAME}Demos-${VERSION}.tar.gz

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
#DL_URL="http://dl.sf.net/sourceforge/mesa3d"
DL_URL="http://prdownloads.sourceforge.net/mesa3d"
#DL_URL="http://download.sf.net/mesa3d"
DL_URLB="http://www.mesa3d.org/beta"

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi

# if source is not present, download in source rootdir if possible, or in /tmp
for file in ${SRCARCHIVE} ${SRCARCHIVE2} ${SRCARCHIVE3} ; do
  if ! test -r ${file}; then
    test -r ${CWD}/${file} || wget ${DL_OPTS} ${DL_URLB}/${file} || wget ${DL_OPTS} ${DL_URL}/${file} || exit 1
  fi
done

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
if $(file -L ${CWD}/${SRCARCHIVE2} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE2} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE2} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE2} || exit 1
fi
if $(file -L ${CWD}/${SRCARCHIVE3} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE3} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE3} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE3} || exit 1
fi
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
# Patch to build into "/usr":
zcat ${CWD}/${NAME}.linux-dri-x86.diff.gz | patch -p1 --verbose || exit 1

# Remove nouveau dri driver (do not builds without some work).
sed -i -e 's|nouveau||g' configs/linux-dri || exit 1
rm -rf src/mesa/drivers/dri/nouveau || exit 1

find src/mesa/drivers/dri -name *.[hc] -exec egrep -l "\#define\W+DO_DEBUG\W+1" {} \; | xargs sed -i -re "s/\#define\W+DO_DEBUG\W+1/\#define DO_DEBUG 0/"

echo "ARCH_FLAGS += -DGLX_USE_TLS" >> configs/linux-dri-x86

echo "DEFINES += -DUSE_XCB" >> configs/linux-dri-x86
echo "X11_INCLUDES += $(pkg-config --cflags-only-I xcb) $(pkg-config --cflags-only-I x11-xcb) $(pkg-config --cflags-only-I xcb-glx)" >> configs/linux-dri-x86
echo "GL_LIB_DEPS += $(pkg-config --libs xcb) $(pkg-config --libs x11-xcb) $(pkg-config --libs xcb-glx)" >> configs/linux-dri-x86

# Build and install:
make linux-dri-x86 OPT_FLAGS="${SLKCFLAGS} -fno-strict-aliasing" || exit 1

# Patch to put into /tmp/package-mesa:  (sorry, I know this should use $PKG ;-)
#zcat ${CWD}/${NAME}.linux-dri-x86-fake-destdir.diff.gz | patch -p1 --verbose  || exit 1

make install DESTDIR=${PKG} || exit 1

# Install some "demos":
( cd progs/xdemos
  make -i
  mkdir -p ${PKG}/usr/bin
  cp glthreads glxcontexts glxdemo glxgears glxgears_fbconfig glxheads \
    glxinfo glxpbdemo glxpixmap \
    ${PKG}/usr/bin/
)

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  docs/* ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
rm -f ${DOCDIR}/{RELNOTES,relnotes}*
cp -a docs/{RELNOTES-${VERSION},relnotes-${VERSION}.html,relnotes.html} \
      ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
      rm -f dir
      gzip -9 *
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

# Replicate slackbuild and patches
mkdir -p ${SBDIR}
install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
               ${CWD}/${NAME}*.{diff,patch}.gz ${SBDIR}/
install -m0755 ${CWD}/${NAME}.SlackBuild \
               ${SBDIR}/${NAME}.SlackBuild
sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
        /^BUILD=/s/:-.*}/:-$BUILD}/
        /^ARCH=/s/:-.*}/:-$ARCH}/
        " ${SBDIR}/${NAME}.SlackBuild

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
