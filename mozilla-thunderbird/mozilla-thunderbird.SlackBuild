#!/bin/sh
#-- mozilla-thunderbird for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ mozilla-thunderbird.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil..
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.mozilla.org/projects/firefox/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

CWD=$(pwd)
if [ "${TMP}" = "" ]; then
  TMP=/tmp
fi

PNAME=thunderbird
NAME=mozilla-${PNAME}
PKG=${TMP}/package-${NAME}

WITH_PANGO_SB=${WITH_PANGO_SB:-YES}
WITH_GNOME_SB=${WITH_GNOME_SB:-NO}

# If you enable official branding, do not redistribute this build
# to any users on your network or the internet. Doing so puts yourself into
# a legal problem with mozilla foundation"
OFFICIAL=${OFFICIAL:-YES}

VERSION=${VERSION:-2.0.0.5}
SLCKVER=${SLCKVER:-12.0.0}
ARCH=${ARCH:-i686}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

TBLANGS=${TBLANGS:-"af ar be bg ca cs da de el en-GB es-AR es-ES eu fi fr fy-NL ga-IE gu-IN he hu it ja ka ko ku lt mk mn nb-NO nl nn-NO pa-IN pl pt-BR pt-PT ro ru sk sl sv-SE tr zh-CN zh-TW"}
NOSHORTLANGS=${NOSHORTLANGS:-"en-GB es-AR pt-BR zh-TW"}
LANGDIR=${CWD}/langpacks/${VERSION}
LANGDOWNALL=${LANGDOWNALL:-NO}

SRCDIR=mozilla
SRCARCHIVE=${PNAME}-${VERSION}-source.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://releases.mozilla.org/pub/mozilla.org/${PNAME}/releases/${VERSION}/source/${SRCARCHIVE}"
LDL_URL="http://releases.mozilla.org/pub/mozilla.org/${PNAME}/releases/${VERSION}/linux-i686/xpi"

if [ "${ARCH}" = "i386" ]; then
  SLKCFLAGS="-O2 -march=i386 -mtune=i686"
elif [ "${ARCH}" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
elif [ "${ARCH}" = "i686" ]; then
  SLKCFLAGS="-O2 -march=athlon64 -mtune=athlon64 -msse3 -msse3 -pipe -fomit-frame-pointer -msse2 -mmmx -m3dnow -mfpmath=sse -fno-reorder-functions -D_FORTIFY_SOURCE=2"
elif [ "${ARCH}" = "s390" ]; then
  SLKCFLAGS="-O2"
elif [ "${ARCH}" = "x86_64" ]; then
  SLKCFLAGS="-O2"
fi

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi

TBLANGS=${TBLANGS/_/-}

echo -n "Selected langpacks: "
echo ${TBLANGS}
read junk

mkdir -p ${LANGDIR}

if [ "${LANGDOWNALL}" = "NO" ] ;then
  for lang in ${TBLANGS} ;do
    if ! test -r ${LANGDIR}/${lang}.xpi ; then
  test -r ${LANGDIR}/${lang}.xpi || wget ${DL_OPTS} -P ${LANGDIR} ${LDL_URL}/${lang}.xpi || exit 1
    fi
  done
else
  wget -P ${LANGDIR} -m -np -c -nd ${LDL_URL}/
  rm -f ${LANGDIR}/{index.*,robots.txt,.listing}
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# Fedora patches

# build patches
zcat ${CWD}/firefox-2.0-link-layout.patch.gz | patch -p1 -E --backup --verbose || exit 1
zcat ${CWD}/firefox-1.0-prdtoa.patch.gz | patch -p0 -E --backup --verbose || exit 1

# customization patches
zcat ${CWD}/${PNAME}-0.7.3-psfonts.patch.gz | patch -p1 -E --backup --verbose || exit 1
zcat ${CWD}/${PNAME}-0.7.3-gnome-uriloader.patch.gz | patch -p1 -E --backup --verbose || exit 1

if [ "${WITH_GNOME_SB}" = "YES" ] ;then
  zcat ${CWD}/${PNAME}-2.0-default-applications.patch.gz | patch -p0 -E --backup --verbose || exit 1
fi

# local bugfixes
zcat ${CWD}/firefox-1.5-bullet-bill.patch.gz | patch -p1 -E --backup --verbose || exit 1
zcat ${CWD}/firefox-2.0.0.4-undo-uriloader.patch.gz | patch -p1 -E --backup --verbose || exit 1
zcat ${CWD}/firefox-1.1-uriloader.patch.gz | patch -p0 -E --backup --verbose || exit 1

# font system fixes
if [ "${WITH_PANGO_SB}" = "YES" ] ;then
  zcat ${CWD}/firefox-1.5-nopangoxft.patch.gz | patch -p1 -E --backup --verbose || exit 1
  #zcat ${CWD}/firefox-1.5-pango-mathml.patch.gz | patch -p1 -E --backup --verbose || exit 1
  zcat ${CWD}/firefox-1.5-pango-cursor-position.patch.gz | patch -p1 -E --backup --verbose || exit 1
  zcat ${CWD}/firefox-2.0-pango-printing.patch.gz | patch -p0 -E --backup --verbose || exit 1
  zcat ${CWD}/firefox-2.0-pango-ligatures.patch.gz | patch -p1 -E --backup --verbose || exit 1
  zcat ${CWD}/firefox-1.5-pango-cursor-position-more.patch.gz | patch -p1 -E --backup --verbose || exit 1
  zcat ${CWD}/firefox-1.5-pango-justified-range.patch.gz | patch -p1 -E --backup --verbose || exit 1
  zcat ${CWD}/firefox-1.5-pango-underline.patch.gz | patch -p1 -E --backup --verbose || exit 1
fi
zcat ${CWD}/${PNAME}-1.5-xft-rangewidth.patch.gz | patch -p1 -E --backup --verbose || exit 1

( cd gfx/src/ps
  # This sort of sucks, but it works for now.
  ln -s ../gtk/nsFontMetricsPango.h .
  ln -s ../gtk/nsFontMetricsPango.cpp .
  ln -s ../gtk/mozilla-decoder.h .
  ln -s ../gtk/mozilla-decoder.cpp .
)

# Other
zcat ${CWD}/firefox-1.5-theme-change.patch.gz | patch -p0 -E --backup --verbose || exit 1
zcat ${CWD}/${PNAME}-1.5-profile-migrator.patch.gz | patch -p1 -E --backup --verbose || exit 1

rm -f .mozconfig
cat ${CWD}/${PNAME}-mozconfig > .mozconfig || exit 1

if [ "${WITH_PANGO_SB}" = "YES" ] ;then
  echo "ac_add_options --enable-pango" >> .mozconfig || exit 1
else
#  echo "ac_add_options --disable-freetype2" >> .mozconfig || exit 1
#  echo "ac_add_options --enable-xft" >> .mozconfig || exit 1
  echo "ac_add_options --disable-pango" >> .mozconfig || exit 1
fi

if [ "${WITH_GNOME_SB}" = "NO" ] ;then
  echo "ac_add_options --disable-gnomeui" >> .mozconfig || exit 1
  echo "ac_add_options --disable-gnomevfs" >> .mozconfig || exit 1
fi

if [ "${OFFICIAL}" = "YES" ] ;then
  cat ${CWD}/${PNAME}-mozconfig-branded >> .mozconfig || exit 1
fi

echo "ac_add_options --build=${ARCH}-slackware-linux" >> .mozconfig || exit 1

MOZAPPDIRSB=/usr/lib/${PNAME}-${VERSION}

# Build with -Os as it helps the browser; also, don't override mozilla's warning
# level; they use -Wall but disable a few warnings that show up _everywhere_
MOZ_OPT_FLAGS="$(echo $SLKCFLAGS | sed -e 's/-O2/-Os/' -e 's/-Wall//')"

export SLKCFLAGS="${MOZ_OPT_FLAGS}"
export PREFIX='/usr'
export LIBDIR='/usr/lib'

export LDFLAGS="-Wl,-rpath,${MOZAPPDIRSB}"
export MAKE="gmake -j${NJOBS}"
make -f client.mk build || exit 1

DESTDIR=${PKG} make install || exit 1


# set up the thunderbird start script
mkdir -p ${PKG}/usr/bin
zcat ${CWD}/${PNAME}.sh.in.gz | sed -e "s,TBIRD_VERSION,${VERSION},g" > \
  ${PKG}/usr/bin/${PNAME} || exit 1
chmod 0755 ${PKG}/usr/bin/${PNAME}

zcat ${CWD}/${PNAME}-open-browser.sh.gz | sed -e 's|LIBDIR|/usr/lib|g' > \
            ${PKG}/${MOZAPPDIRSB}/open-browser.sh || exit 1
chmod 0755 ${PKG}/${MOZAPPDIRSB}/open-browser.sh

# set up our default preferences
zcat ${CWD}/${PNAME}-slackware-default-prefs.js.gz | sed \
  -e "s,TBIRD_SLK_VR,${SLCKVER},g" > slk-default-prefs
install -m0644 slk-default-prefs \
               ${PKG}/${MOZAPPDIRSB}/greprefs/all-slackware.js || exit 1
install -m0644 slk-default-prefs \
               ${PKG}/${MOZAPPDIRSB}/defaults/pref/all-slackware.js || exit 1
rm -f slk-default-prefs

( cd ${PKG}/${MOZAPPDIRSB}/chrome
  find . -name "*" -type d -maxdepth 1 -exec rm -rf {} \;
)

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)

mkdir -p ${PKG}/usr/share/applications
zcat ${CWD}/${NAME}.desktop.gz > ${PKG}/usr/share/applications/${NAME}.desktop || exit 1

mkdir -p ${PKG}/usr/share/pixmaps
zcat ${CWD}/${PNAME}.png.gz > ${PKG}/usr/share/pixmaps/${PNAME}.png || exit 1

cat > ${PKG}/${MOZAPPDIRSB}/defaults/pref/all-l10n.js << EOF
pref("general.useragent.locale", "chrome://global/locale/intl.properties");
EOF
chmod 0644 ${PKG}/${MOZAPPDIRSB}/defaults/pref/all-l10n.js

mkdir -p ${PKG}/${MOZAPPDIRSB}/chrome/icons/default/
install -m0644 other-licenses/branding/${PNAME}/default.xpm \
        ${PKG}/${MOZAPPDIRSB}/chrome/icons/default/default.xpm
install -m0644 other-licenses/branding/${PNAME}/default.xpm \
        ${PKG}/${MOZAPPDIRSB}/icons/default.xpm

mkdir -p ${PKG}/usr/lib/mozilla/plugins

# Install langpacks
mkdir -p ${PKG}/${MOZAPPDIRSB}/extensions
for language in ${TBLANGS}; do
  langpack=${LANGDIR}/${language}.xpi
  extensiondir=${PKG}/${MOZAPPDIRSB}/extensions/langpack-${language}@thunderbird.mozilla.org
  mkdir -p ${extensiondir}
  unzip ${langpack} -d ${extensiondir}
  find ${extensiondir} -type f | xargs chmod 0644

  tmpdir=$(mktemp -d ${PNAME}.XXXXXXXX)
  langtmp=${tmpdir}/${PNAME}/langpack-${language}
  mkdir -p ${langtmp}
  jarfile=${extensiondir}/chrome/${language}.jar
  unzip ${jarfile} -d ${langtmp}

  find ${langtmp} -type f | xargs chmod 0644
  rm -rf ${jarfile}
  cd ${langtmp}
  zip -r -D ${jarfile} locale
  cd -
  rm -rf ${tmpdir}
done

rm -rf ${PKG}/usr/include
rm -rf ${PKG}/${MOZAPPDIRSB}/{TestGtkEmbed,xpidl,xpcshell,xpt_dump,xpt_link,xpicleanup}
rm -rf ${PKG}/usr/share/idl
rm -rf ${PKG}/usr/lib/pkgconfig
rm -rf ${PKG}/usr/share/aclocal

rm -f ${PKG}/usr/bin/${PNAME}-config

# Copy over the LICENSE
install -c -m 644 LICENSE ${PKG}/${MOZAPPDIRSB}/

# ghost files
touch ${PKG}/${MOZAPPDIRSB}/components/compreg.dat
touch ${PKG}/${MOZAPPDIRSB}/components/xpti.dat

( cd ${PKG}/usr/lib
  ln -sf ${PNAME}-${VERSION} ${PNAME}
)

if [ "${WITH_PANGO_SB}" = "YES" ] ;then
  mkdir -p ${PKG}/etc/profile.d
  install -m0755 ${CWD}/profile.d/${PNAME}.sh \
                 ${PKG}/etc/profile.d/${PNAME}.sh
  install -m0755 ${CWD}/profile.d/${PNAME}.csh \
                ${PKG}/etc/profile.d/${PNAME}.csh
  chmod 0755 ${PKG}/etc/profile.d/${PNAME}.*
fi


# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  LICENSE ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
    mv ${PKG}/usr/share/man ${PKG}/usr/man
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
      rm -f dir
      gzip -9 *
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

# Replicate slackbuild and patches
mkdir -p ${SBDIR}
install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
               ${CWD}/${PNAME}*mozconfig* ${CWD}/*.patch.gz \
               ${CWD}/{*.sh.in,*.desktop,*.png,*.sh,*.js}.gz \
               ${SBDIR}/
install -m0755 ${CWD}/${NAME}.SlackBuild \
               ${SBDIR}/${NAME}.SlackBuild
mkdir -p ${SBDIR}/profile.d
install -m0755 ${CWD}/profile.d/${PNAME}.* ${SBDIR}/profile.d/
sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
        /^BUILD=/s/:-.*}/:-$BUILD}/
        /^ARCH=/s/:-.*}/:-$ARCH}/
        " ${SBDIR}/${NAME}.SlackBuild

# Build package:
set +o xtrace			# no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test $UID = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR}
    echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  rm -rf ${PKG}
  echo "Cleanup completed"
fi
