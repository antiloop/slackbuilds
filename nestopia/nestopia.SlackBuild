#!/bin/bash
#-- nestopia for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ nestopia.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://rbelmont.mameworld.info/?page_id=200
# http://nestopia.sourceforge.net/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=nestopia
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-1.40}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
SLKTARGET=${SLKTARGET:-i486}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=Nestopia140src.zip
SRCARCHIVE2=nst140_lnx_release_g.zip

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://prdownloads.sourceforge.net/${NAME}/${SRCARCHIVE}"
DL_URL2="--user-agent='Mozilla/5.0' http://rbelmont.mameworld.info/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi
if ! test -r ${SRCARCHIVE2}; then
  test -r ${CWD}/${SRCARCHIVE2} || wget ${DL_OPTS} ${DL_URL2} || exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O3 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O3 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O3"
                 ;;
    x86_64)      SLKCFLAGS="-O3 -fPIC"
                 ;;
  esac
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
unzip ${CWD}/${SRCARCHIVE} -d ${SRCDIR} || exit 1
cd ${SRCDIR} || exit 1
unzip ${CWD}/${SRCARCHIVE2} || exit 1

chmod -R u+w,go+r-w,a-s .

# Fix EOLs
sed -i -e 's/\r//' *.txt *.xml *.html *.xsd
find doc -type f -name "*.html" | xargs sed -i -e 's/\r//'
find source/core -type f '(' -name *.cpp -or -name *.hpp -or -name *.inl ')' | \
  xargs sed -i -e 's/\r//'

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
zcat ${CWD}/${NAME}-1.40-verbose.patch.gz | patch -p0 -E --backup --verbose || exit 1

if [ "${LDFLAGS}" ] ;then
  sed -i -e "s|\$(LIBS)|\$(LIBS) ${LDFLAGS}|g" Makefile || exit 1
fi

sed -i -e "/^CFLAGS =/s|=.*$|= -c ${SLKCFLAGS}|g" Makefile || exit 1

make -j${NJOBS} || exit 1

mkdir -p ${PKG}/usr/bin
cat > ${PKG}/usr/bin/${NAME} <<'EOF'
#!/bin/sh

# Create a variable equal to $HOME that will be used later
home=('$HOME')

mkdir -p ~/.nestopia
cd ~/.nestopia || exit 1

for config in nstcontrols NstDatabase.xml ;do
  [ -f ~/.nestopia/${config} ] || cp /usr/share/nestopia/${config} ~/.nestopia/${config}
done

exec /usr/libexec/nst "$@"
EOF
chmod 0755 ${PKG}/usr/bin/${NAME}

mkdir -p ${PKG}/usr/libexec
install -m0755 nst ${PKG}/usr/libexec/ || exit 1

mkdir -p ${PKG}/usr/share/${NAME}
install -m0644 nstcontrols NstDatabase.xml ${PKG}/usr/share/${NAME}/ || exit 1

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
)

mkdir -p ${PKG}/usr/share/applications
cat > ${PKG}/usr/share/applications/${NAME}.desktop <<EOF
[Desktop Entry]
Encoding=UTF-8
Name=NEStopia
GenericName=NES emulator
GenericName[pt_BR]=Emulador de NES
Comment=NES/Famicom emulator.
Exec=${NAME}
Icon=${NAME}
Terminal=false
Type=Application
X-Desktop-File-Install-Version=0.14
Categories=Game;Emulator;
EOF

mkdir -p ${PKG}/usr/share/icons/hicolor/{16x16,32x32,48x48}/apps
convert source/win32/resource/application.ico -delete 0,1,3,4 -depth 8 \
        ${PKG}/usr/share/icons/hicolor/48x48/apps/${NAME}.png || exit 1
convert source/win32/resource/application.ico -delete 0,1,2,4 -depth 8 \
        ${PKG}/usr/share/icons/hicolor/32x32/apps/${NAME}.png || exit 1
convert source/win32/resource/application.ico -delete 0,1,2,3 -depth 8 \
        ${PKG}/usr/share/icons/hicolor/16x16/apps/${NAME}.png || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  COPYING readme.html README.Linux *.txt doc/ ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
    rm -f dir
    gzip -9 *
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/${NAME}-*.patch.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^  ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
