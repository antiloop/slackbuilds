#!/bin/bash
#-- nvidia-glx for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ nvidia-glx.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http:/www.nvidia.com

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=nvidia-glx
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-173.14.12}
LVER=$(echo ${VERSION} | tr - . )
VIDEOGP="$(getent group video | cut -d ':' -f 3)"
ARCH=i386
BUILD=${BUILD:-3}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to add libwfb from nvidia (for older xorg)
SB_WFB=${SB_WFB:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=NVIDIA-Linux-x86-${VERSION}-pkg0.run

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="ftp://download.nvidia.com/XFree86/Linux-x86/${VERSION}/${SRCARCHIVE}"
# DL_URL="http://us.download.nvidia.com/XFree86/Linux-x86/${VERSION}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}
cd ${TMP}
rm -rf ${SRCDIR}
sh ${CWD}/${SRCARCHIVE} -x --target ${SRCDIR} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
# Use the correct defines to make gtkglext build work
zcat ${CWD}/NVIDIA_glx-defines.patch.gz | patch -p1 -E --backup --verbose || exit 1
# Use some more sensible gl headers and make way for new glext.h
zcat ${CWD}/NVIDIA_glx-glheader.patch.gz | patch -p0 -E --backup --verbose || exit 1

# etc files
mkdir -m 0755 -p ${PKG}/etc/{modprobe,profile}.d
zcat ${CWD}/${NAME}.modprobe.gz | sed -e "s|_VIDEOGP|${VIDEOGP}|g" > \
     ${PKG}/etc/modprobe.d/${NAME} || exit 1

zcat ${CWD}/${NAME}.csh.gz > \
     ${PKG}/etc/profile.d/${NAME}.csh || exit 1
zcat ${CWD}/${NAME}.sh.gz > \
     ${PKG}/etc/profile.d/${NAME}.sh || exit 1
chmod 0755 ${PKG}/etc/profile.d/${NAME}.*

# Binaries
mkdir -m 0755 -p ${PKG}/usr/{bin,sbin}
install -m 0755 usr/bin/nvidia-{settings,bug-report.sh} \
               ${PKG}/usr/bin/ || exit 1
[ -f usr/bin/nvidia-smi ] && install -m0755 usr/bin/nvidia-smi \
   ${PKG}/usr/bin/
install -m 0755 usr/bin/nvidia-xconfig \
                ${PKG}/usr/sbin/nvidia-xconfig || exit 1
zcat ${CWD}/nvidia-config-display.gz > \
     ${PKG}/usr/sbin/nvidia-config-display || exit 1
chmod 0755 ${PKG}/usr/{bin,sbin}/*

# Libraries
mkdir -m 0755 -p ${PKG}/usr/lib/nvidia/tls
install -m 0755 usr/lib/*.so.${LVER} \
               ${PKG}/usr/lib/nvidia/ || exit 1
install -m 0755 usr/lib/tls/*.so.${LVER} \
               ${PKG}/usr/lib/nvidia/tls/ || exit 1
install -m 0755 usr/X11R6/lib/libXvMCNVIDIA.so.${LVER} \
               ${PKG}/usr/lib/nvidia/ || exit 1
install -m 0644 usr/X11R6/lib/libXvMCNVIDIA.a \
               ${PKG}/usr/lib/nvidia/ || exit 1

( cd ${PKG}/usr/lib/nvidia

 ln -s libXvMCNVIDIA.so.${LVER} libXvMCNVIDIA_dynamic.so.${LVER} || exit 1

 for file in *.so.${LVER} ;do
    ln -sf ${file} \
           ${file%.${LVER}}.1 || exit 1
 done
 for file in *.so.1 ;do
    ln -sf ${file} \
           ${file%.1} || exit 1
 done
)

( cd ${PKG}/usr/lib/nvidia/tls
  for file in *.so.${LVER} ;do
    ln -sf ${file} \
           ${file%.${LVER}}.1 || exit 1
  done
  for file in *.so.1 ;do
    ln -sf ${file} \
           ${file%.1} || exit 1
  done
) || exit 1

# Xorg modules
mkdir -m 0755 -p ${PKG}/usr/lib/xorg/modules/drivers
install -m 0755 usr/X11R6/lib/modules/*.so.${LVER} \
               ${PKG}/usr/lib/xorg/modules/ || exit 1

#( cd ${PKG}/usr/lib/xorg/modules
  #for file in *.so.${LVER} ;do
    #ln -sf ${file} \
           #${file%.${LVER}}.1 || exit 1
  #done
  #for file in *.so.1 ;do
    #ln -sf ${file} \
           #${file%.1} || exit 1
  #done
#) || exit 1

# Xorg driver
install -m 0755 usr/X11R6/lib/modules/drivers/*.so \
               ${PKG}/usr/lib/xorg/modules/drivers/ || exit 1

# Xorg extension
mkdir -m 0755 -p ${PKG}/usr/lib/xorg/modules/extensions/nvidia
install -m 0755 usr/X11R6/lib/modules/extensions/*.so.${LVER} \
                ${PKG}/usr/lib/xorg/modules/extensions/nvidia/ || exit 1

if [ "${SB_WFB}" = "YES" ] ; then
  mv ${PKG}/usr/lib/xorg/modules/libnvidia-wfb.so.${LVER} \
     ${PKG}/usr/lib/xorg/modules/extensions/nvidia/ || exit 1
  ln -sf libnvidia-wfb.so.${LVER} \
         ${PKG}/usr/lib/xorg/modules/extensions/nvidia/libwfb.so
fi

( cd ${PKG}/usr/lib/xorg/modules/extensions/nvidia
  for file in *.so.${LVER} ;do
    ln -sf ${file} \
           ${file%.${LVER}}.1 || exit 1
  done
  for file in *.so.1 ;do
    ln -sf ${file} \
           ${file%.1} || exit 1
  done
) || exit 1


# Include files
mkdir -m 0755 -p ${PKG}/usr/include/nvidia/GL
install -m 0644 usr/include/GL/*.h \
               ${PKG}/usr/include/nvidia/GL/ || exit 1

mkdir -m 0755 -p ${PKG}/usr/man/man1
install -m 0644 usr/share/man/man1/* \
               ${PKG}/usr/man/man1/ || exit 1

# ld.so.conf 
mkdir -p ${PKG}/etc/ld.so.conf.d
echo '/usr/lib/nvidia' > ${PKG}/etc/ld.so.conf.d/nvidia.conf || exit 1

# Desktop file and icon.
mkdir -m 0755 -p ${PKG}/usr/share/{applications,pixmaps}
zcat ${CWD}/nvidia-settings.desktop.gz > \
     ${PKG}/usr/share/applications/nvidia-settings.desktop || exit 1
install -m 0644 usr/share/pixmaps/nvidia-settings.png \
                ${PKG}/usr/share/pixmaps/ || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  usr/share/doc/{Copyrights,README.txt,NVIDIA_Changelog,html} LICENSE \
  usr/share/doc/{nvidia-settings-user-guide.txt,XF86Config.sample} \
  ${CWD}/ChangeLog.SB ${DOCDIR}/
zcat ${CWD}/nvidia-README.Fedora.gz > ${DOCDIR}/README.Fedora
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/{nvidia-config-display,nvidia-settings.desktop}.gz \
                 ${CWD}/{nvidia-glx*,nvidia-README.Fedora}.gz ${CWD}/*.patch.gz \
                 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
