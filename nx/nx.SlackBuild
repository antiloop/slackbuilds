#!/bin/sh
#-- nx for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ nx.SlackBuild 2>&1 | tee build.log
#--
# Installation script by Rick Stout <zipsonic[AT]gmail.com> from Fedora RPM spec file.
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.nomachine.com

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=nx
PKG=${TMP}/package-${NAME}

VERSION=${VERSION:-3.2.0}
if [ "${SB_NATIVE}" = "NO" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
SLKTARGET=${SLKTARGET:-i486}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVES="nxproxy-${VERSION}-1 nxcomp-${VERSION}-6 nxcompext-${VERSION}-1 \
             nxssh-${VERSION}-1 nxcompshad-${VERSION}-1 nx-X11-${VERSION}-1 \
             nxauth-${VERSION}-1 nxagent-${VERSION}-3 nxscripts-${VERSION}-1"

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
# Download Fedora source rpm and extract it.
DL_URL="http://64.34.161.181/download/${VERSION}/sources"
#DL_URL="http://web04.nomachine.com/download/${VERSION}/sources"

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi

# if source is not present, download in source rootdir if possible, or in /tmp
for file in ${SRCARCHIVES} ; do
  if ! test -r ${file}.tar.gz ; then
    test -r ${CWD}/${file}.tar.gz || wget ${DL_OPTS} ${DL_URL}/${file}.tar.gz || exit 1
  fi
done

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
mkdir -p ${SRCDIR} || exit 1
cd ${SRCDIR} || exit 1
for file in ${SRCARCHIVES} ;do
  tar -xzvf ${CWD}/${file}.tar.gz || exit 1
done

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
zcat ${CWD}/${NAME}comp-3.2.0-gcc43.patch.gz | patch -p0 -E --backup --verbose || exit 1
zcat ${CWD}/${NAME}compshad-3.2.0-gcc43.patch.gz | patch -p0 -E --backup --verbose || exit 1

cat >> nx-X11/config/cf/host.def << EOF
#ifdef  i386Architecture
#undef  DefaultGcc2i386Opt
#define DefaultGcc2i386Opt ${SLKCFLAGS} -fno-strict-aliasing
#endif
#ifdef AMD64Architecture
#undef DefaultGcc2AMD64Opt ${SLKCFLAGS} -fno-strict-aliasing
#endif
#define DefaultGcc2AMD64Opt
#ifdef MipsArchitecture
#undef DefaultGcc2MipsOpt
#define DefaultGcc2MipsOpt ${SLKCFLAGS} -fno-strict-aliasing
#endif
#ifdef s390xArchitecture
#undef OptimizedCDebugFlags
#define OptimizedCDebugFlags ${SLKCFLAGS} -fno-strict-aliasing
#endif
EOF

export CFLAGS="${SLKCFLAGS}"
export CXXFLAGS="${SLKCFLAGS}"
perl -pi -e "s|CXXFLAGS=.-O.*|CXXFLAGS=\"$CXXFLAGS\"|" */configure || exit 1

# build Compression Library and Proxy
for i in nxcomp nxcompshad nxproxy; do
  ( cd ${i} || exit 1
    ./configure || exit 1
    make CCFLAGS="${SLKCFLAGS}" || exit 1
  ) || exit 1
done

# build X11 Support Libraries and Agents
make -C nx-X11 World || exit 1

# build Extended Compression Library
( cd nxcompext || exit 1
  ./configure  || exit 1
  make || exit 1
) || exit 1
# build nxssh
( cd nxssh
  ./configure --without-zlib-version-check || exit 1
  make || exit 1
) || exit 1
( cd nxproxy || exit 1
  ./configure  || exit 1
  make CCFLAGS="${SLKCFLAGS}" || exit 1
) || exit 1

PKGLIBDIR=/usr/lib/nx
PKGLIBEXECDIR=/usr/libexec/nx

mkdir -p ${PKG}/usr/bin
mkdir -p ${PKG}/${PKGLIBDIR}
mkdir -p ${PKG}/${PKGLIBEXECDIR}
# No man :(
#mkdir -p ${PKG}/usr/man/man1

# install X11 Support Libraries and Agents
install -p -m 0755 nx-X11/lib/X11/libX11.so.* \
                   nx-X11/lib/Xext/libXext.so.* \
                   nx-X11/lib/Xrender/libXrender.so.* \
                   ${PKG}/${PKGLIBDIR}/ || exit 1
install -p -m 0755 nx-X11/programs/Xserver/nxagent \
                   ${PKG}/${PKGLIBEXECDIR}/

# nxwrapper
cat > ${PKG}/${PKGLIBEXECDIR}/nxwrapper <<EOF 
#!/bin/sh

export LD_LIBRARY_PATH=${PKGLIBDIR}:\$LD_LIBRARY_PATH
exec ${PKGLIBEXECDIR}/\$(basename \$0) "\$@"
EOF
chmod 0755 ${PKG}/${PKGLIBEXECDIR}/nxwrapper

ln -s ${PKGLIBEXECDIR}/nxwrapper ${PKG}/usr/bin/nxagent
# install Compression Libraries and Proxy
install -p -m 0755 nxcomp/libXcomp.so.* ${PKG}/${PKGLIBDIR}/ || exit 1
install -p -m 0755 nxcompext/libXcompext.so.* ${PKG}/${PKGLIBDIR}/ || exit 1
install -p -m 0755 nxcompshad/libXcompshad.so.* ${PKG}/${PKGLIBDIR}/ || exit 1
install -p -m 0755 nxssh/nxssh ${PKG}/${PKGLIBEXECDIR}/ || exit 1

ln -s ${PKGLIBEXECDIR}/nxwrapper ${PKG}/usr/bin/nxssh
install -p -m 0755 nxproxy/nxproxy ${PKG}/${PKGLIBEXECDIR}
ln -s ${PKGLIBEXECDIR}/nxwrapper ${PKG}/usr/bin/nxproxy

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
   nxcomp/LICENSE nxscripts ${CWD}/ChangeLog.SB \
   ${DOCDIR}/
# documentation and license
tar xjf ${CWD}/docs.tar.bz2 -C ${DOCDIR}/
for i in nxcomp; do
  mkdir ${DOCDIR}/${i}
done
cp -a nxcomp/README ${DOCDIR}/nxcomp/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
      rm -f dir
      gzip -9 *
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

# Replicate slackbuild and patches
mkdir -p ${SBDIR}
install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
               ${CWD}/*.patch.gz ${CWD}/nxagent.gz ${CWD}/docs.tar.bz2 \
               ${SBDIR}/
install -m0755 ${CWD}/${NAME}.SlackBuild \
               ${SBDIR}/${NAME}.SlackBuild
sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
        /^BUILD=/s/:-.*}/:-$BUILD}/
        /^ARCH=/s/:-.*}/:-$ARCH}/
        " ${SBDIR}/${NAME}.SlackBuild

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
