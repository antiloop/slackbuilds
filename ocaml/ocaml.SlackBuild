#!/bin/sh
#-- ocaml for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ ocaml.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.ocaml.org

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=ocaml
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-3.10.1}
SVER=$(echo ${VERSION} | awk -F. '{ print $1"."$2 }')
if [ "${SB_NATIVE}" = "NO" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
SLKTARGET=${SLKTARGET:-i486}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2
SRCARCHIVE2=${NAME}-${SVER}-refman.html.tar.gz
SRCARCHIVE3=${NAME}-${SVER}-refman.info.tar.gz
SRCARCHIVE4=${NAME}-${SVER}-refman.pdf

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://caml.inria.fr/distrib/${NAME}-${SVER}/${SRCARCHIVE}"
DL_URL="http://caml.inria.fr/distrib/${NAME}-${SVER}/${SRCARCHIVE2}"
DL_URL="http://caml.inria.fr/distrib/${NAME}-${SVER}/${SRCARCHIVE3}"
DL_URL="http://caml.inria.fr/distrib/${NAME}-${SVER}/${SRCARCHIVE4}"

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi
if ! test -r ${SRCARCHIVE2}; then
  test -r ${CWD}/${SRCARCHIVE2} || wget ${DL_OPTS} ${DL_URL2} || exit 1
fi
if ! test -r ${SRCARCHIVE3}; then
  test -r ${CWD}/${SRCARCHIVE3} || wget ${DL_OPTS} ${DL_URL3} || exit 1
fi
if ! test -r ${SRCARCHIVE4}; then
  test -r ${CWD}/${SRCARCHIVE4} || wget ${DL_OPTS} ${DL_URL4} || exit 1
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1
tar -xzvf ${CWD}/${SRCARCHIVE2} || exit 1
tar -xzvf ${CWD}/${SRCARCHIVE3} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
zcat ${CWD}/${NAME}-rpath.patch.gz | patch -p1 -E --backup --verbose || exit 1
zcat ${CWD}/${NAME}-user-cflags.patch.gz | patch -p1 -E --backup --verbose || exit 1
zcat ${CWD}/${NAME}ocaml-3.10.0-tclver.patch.gz | patch -p1 -E --backup --verbose || exit 1

CFLAGS="${SLKCFLAGS}" \
./configure \
  -bindir /usr/bin \
  -libdir /usr/lib/ocaml \
  -x11lib /usr/lib \
  -x11include /usr/include \
  -mandir /usr/man/man1 || exit 1

make world opt opt.opt || exit 1
make -C emacs ocamltags || exit 1
( cd tools || exit 1
  ../boot/ocamlrun ../ocamlopt -nostdlib -I ../stdlib -I ../utils -I ../parsing -I ../typing -I ../bytecomp -I ../asmcomp -I ../driver -o objinfo config.cmx objinfo.ml || exit 1
) || exit 1
make install \
  BINDIR=${PKG}/usr/bin \
  LIBDIR=${PKG}/usr/lib/ocaml \
  MANDIR=${PKG}/usr/man || exit 1

sed -i -e "s|^${PKG}||" ${PKG}/usr/lib/ocaml/ld.conf || exit 1
(
    cd emacs;
    make install \
      BINDIR=${PKG}/usr/bin \
      EMACSDIR=${PKG}/usr/share/emacs/site-lisp exit 1
    make install-ocamltags BINDIR=${PKG}/usr/bin || exit 1
) || exit 1
(
    mkdir -p ${PKG}/usr/info ;
    cd infoman;
    cp ocaml*.gz ${PKG}/usr/info/ || exit 1
) || exit 1

cp tools/objinfo ${PKG}/usr/bin/ocamlobjinfo || exit 1

# Remove rpaths from stublibs .so files.
if [ -x /usr/bin/chrpath ] ;then
  echo "Removing rpaths"
  chrpath --delete ${PKG}/usr/lib/ocaml/stublibs/*.so
fi

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  README LICENSE Changes otherlibs/labltk/examples_{cam,lab}ltk \
  ocamldoc/Changes.txt htmlman ${CWD}/${SRCARCHIVE4} \
  ${CWD}/ChangeLog.SB ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
    mv ${PKG}/usr/share/man ${PKG}/usr/man
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
      rm -f dir
      gzip -9 *
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
# Install the info files for this package
if [ -x usr/bin/install-info ]
then
  \${CHROOT} /usr/bin/install-info --info-dir=/usr/info usr/info/${NAME}.info.gz 2>/dev/null
fi

EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

# Replicate slackbuild and patches
mkdir -p ${SBDIR}
install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
               ${CWD}/${NAME}*.patch.gz ${SBDIR}/
install -m0755 ${CWD}/${NAME}.SlackBuild \
               ${SBDIR}/${NAME}.SlackBuild
sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
        /^BUILD=/s/:-.*}/:-$BUILD}/
        /^ARCH=/s/:-.*}/:-$ARCH}/
        " ${SBDIR}/${NAME}.SlackBuild

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
