#!/bin/sh
#-- oss for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ oss.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.opensound.com/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=oss
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-4.1-080705}
SVER="$(echo ${VERSION} | cut -d - -f1)"
BVER="$(echo ${VERSION} | cut -d - -f2)"
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
SLKTARGET=${SLKTARGET:-i486}
BUILD=${BUILD:-3}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
RSRCDIR=${NAME}-v${SVER}-build${BVER}-src-gpl
SRCARCHIVE=${RSRCDIR}.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://www.4front-tech.com/developer/sources/testing/gpl/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi

unset CFLAGS CXXFLAGS CPPFLAGS OSFLAGS LIBRARIES

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
mkdir -p ${SRCDIR}/build
cd ${SRCDIR} || exit 1
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1

FSRCDIR="${TMP}/${SRCDIR}/${RSRCDIR}"
OSSETC=/etc/oss

( cd build || exit 1

  "${FSRCDIR}/configure" || exit 1

  sed -i -e 's|/usr/lib/oss/etc|/etc/oss|g' \
    os_cmd/Linux/ossdetect/ossdetect.c \
    cmd/ossdevlinks/ossdevlinks.c \
    cmd/savemixer/savemixer.c || exit 1
  
  for file in $(find -name "*.man") ;do
    sed -i -e 's|/usr/lib/oss/etc|/etc/oss|g' ${file} 
  done

  sed -i -e '/^SUBDIRS=/s|=.*$|=cmd lib os_cmd|g' Makefile || exit 1
  echo > .makefile
  sed -i -e '/^SUBDIRS=/s|=.*$|=libOSSlib|g' lib/Makefile || exit 1

  for file in $(find cmd os_cmd -name Makefile) ;do
    sed -i \
        -e "/^CFLAGS=/s|=.*$|=${SLKCFLAGS}|g" \
        -e "/^LDFLAGS=/s|$| ${LDFLAGS}|g" ${file} || exit 1
  done

  sed -i \
      -e "/^CFLAGS=/s|=.*$|=${SLKCFLAGS} -fPIC|g" \
      -e "/^LDFLAGS=/s|$| ${LDFLAGS}|g" lib/libOSSlib/Makefile || exit 1

  make build || exit 1

  cp -R prototype/* ${PKG}/ || exit 1

) || exit 1

rm -rf ${PKG}/etc
mkdir -p ${PKG}/${OSSETC}/conf

for conf in ${PKG}/usr/lib/oss/conf.tmpl/*.conf ; do
  confbase=$(basename ${conf})
  install -m0644 ${conf} ${PKG}/${OSSETC}/conf/${confbase}.new
done

rm -f ${PKG}/${OSSETC}/devices.list
for file in $(find build/kernel/ -name .devices) ;
do
  cat ${file} >> ${PKG}/${OSSETC}/devices.list
done

mkdir -p ${PKG}/usr/share/misc
mv ${PKG}/usr/lib/oss/version.dat ${PKG}/usr/share/misc/ossversion.dat || exit 1

mv ${PKG}/usr/lib/oss/lib/*.so ${PKG}/usr/lib/ || exit 1

# ALSA emulation is currently outdated (exports an old ALSA API).
# Disable it to avoid symbol conflicts with software linked against
# the newer ALSA API.
rm -f ${PKG}/usr/lib/libsalsa.so*

rm -rf ${PKG}/usr/lib/oss

rm -f ${PKG}/usr/sbin/sound* ${PKG}/usr/share/man/man1/sound*

# Startup scripts.
mkdir -p ${PKG}/etc/rc.d
zcat ${CWD}/rc.${NAME}.gz > \
     ${PKG}/etc/rc.d/rc.${NAME}.new || exit 1
chmod 0755 ${PKG}/etc/rc.d/rc.${NAME}.new

mkdir -p ${PKG}/var/log/setup
zcat ${CWD}/setup.onlyonce.rc${NAME}.gz > \
    ${PKG}/var/log/setup/setup.onlyonce.rc${NAME} || exit 1
chmod 0755 ${PKG}/var/log/setup/setup.onlyonce.rc${NAME}

mkdir -p ${PKG}/var/log

touch ${PKG}/var/log/${NAME}.log
touch ${PKG}/${OSSETC}/installed_drivers
touch ${PKG}/${OSSETC}/legacy_devices

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
)

mkdir -p ${PKG}/usr/share/applications
cat > ${PKG}/usr/share/applications/${NAME}.desktop <<EOF
[Desktop Entry]
Encoding=UTF-8
Name=OSSmix
Comment=OSS mixer tool
Exec=ossxmix
Icon=ossxmix
Terminal=false
Type=Application
StartupNotify=false
Categories=GTK;AudioVideo;
EOF

mkdir -p ${PKG}/usr/share/icons/hicolor/{48x48,scalable}/apps
zcat ${CWD}/ossxmix.png.gz > \
     ${PKG}/usr/share/icons/hicolor/48x48/apps/ossxmix.png || exit 1
zcat ${CWD}/ossxmix.svg.gz > \
     ${PKG}/usr/share/icons/hicolor/scalable/apps/ossxmix.svg || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a ${FSRCDIR}/{COPYING,Changelog,RELNOTES.txt} ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
zcat ${CWD}/COPYING.tango-icon.gz > ${DOCDIR}/COPYING.tango-icon
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
    rm -f dir
    gzip -9 *
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.${NAME}.new:
if [ -e etc/rc.d/rc.${NAME} ]; then
  cp -a etc/rc.d/rc.${NAME} etc/rc.d/rc.${NAME}.new.incoming
  cat etc/rc.d/rc.${NAME}.new > etc/rc.d/rc.${NAME}.new.incoming
  mv etc/rc.d/rc.${NAME}.new.incoming etc/rc.d/rc.${NAME}.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
if [ -f etc/oss/installed_drivers ] ;then
  ${CHROOT} /bin/rm -f /etc/oss/installed_drivers
fi
if [ -f etc/oss/legacy_devices ] ;then
  ${CHROOT} /bin/rm -f /etc/oss/legacy_devices
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/rc.${NAME}.gz ${CWD}/setup.*.rc${NAME}.gz \
                 ${CWD}/COPYING.*.gz ${CWD}/ossxmix.*.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^  ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
