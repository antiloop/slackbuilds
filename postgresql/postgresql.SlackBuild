#!/bin/sh
#-- postgresql for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ postgresql.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.postgresql.org/ 

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=postgresql
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-8.3.3}
DVER=${DVER:-8.3.3}
PVER=${PVER:-3.8.1}
TVER=${TVER:-1.6.2}
DTVER=${DTVER:-20070115}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
SLKTARGET=${SLKTARGET:-i486}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable tests.
SB_TEST=${SB_TEST:-YES}

PYSITEARCH=$(python -c 'from distutils import sysconfig; print sysconfig.get_python_lib(1)')
PYSITELIB=$(python -c 'from distutils import sysconfig; print sysconfig.get_python_lib()')
PYABI=$(python -c 'import sys; print ".".join(sys.version.split(".")[:2])')
PYVER=$(python -c 'import sys; print sys.version.split(" ")[0]')

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2
SRCARCHIVE2=postgresql-${DVER}-US.pdf
SRCARCHIVE3=PyGreSQL-${PVER}.tgz
SRCARCHIVE4=pgtcl${TVER}.tar.gz
SRCARCHIVE5=pgtcldocs-${DTVER}.zip

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="ftp://ftp.postgresql.org/pub/source/v${VERSION}/${SRCARCHIVE}"
DL_URL2="http://www.postgresql.org/docs/manuals/${SRCARCHIVE2}"
DL_URL3="ftp://ftp.pygresql.org/pub/distrib/${SRCARCHIVE3}"
DL_URL4="http://pgfoundry.org/projects/pgtclng"

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi
if ! test -r ${SRCARCHIVE2}; then
  test -r ${CWD}/${SRCARCHIVE2} || wget ${DL_OPTS} ${DL_URL2} || exit 1
fi
if ! test -r ${SRCARCHIVE3}; then
  test -r ${CWD}/${SRCARCHIVE3} || wget ${DL_OPTS} ${DL_URL3} || exit 1
fi
for file in ${SRCARCHIVE4} ${SRCARCHIVE5} ;do
  if ! test -r ${file}; then
  test -r ${CWD}/${file} || wget ${DL_OPTS} ${DL_URL4}/${file} || exit 1
  fi
done

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

autoconf || exit 1

# python
( tar -xzf ${CWD}/${SRCARCHIVE3} || exit 1
  PYGRESQLDIR=$(basename ${SRCARCHIVE3} .tgz)
  mv ${PYGRESQLDIR} PyGreSQL || exit 1
  # Some versions of PyGreSQL.tgz contain wrong file permissions
  chmod 755 PyGreSQL/tutorial
  chmod 644 PyGreSQL/tutorial/*.py
  chmod 755 PyGreSQL/tutorial/advanced.py PyGreSQL/tutorial/basics.py
) || exit 1

# tcl
( tar -xzf ${CWD}/${SRCARCHIVE4} || exit 1
  PGTCLDIR=$(basename ${SRCARCHIVE4} .tar.gz)
  mv ${PGTCLDIR} Pgtcl || exit 1
  unzip ${CWD}/${SRCARCHIVE5}
  PGTCLDOCDIR=$(basename ${SRCARCHIVE5} .zip)
  mv ${PGTCLDOCDIR} Pgtcl-docs || exit 1
  pushd Pgtcl
    zcat ${SB_PATCHDIR}/pgtcl-no-rpath.patch.gz | patch -p1 -E --backup --verbose || exit 1
    autoconf || exit 1
  popd) || exit 1

# Strip out -ffast-math from CFLAGS....
SLKCFLAGS="$(echo ${SLKCFLAGS}|xargs -n 1|grep -v ffast-math|xargs -n 100)"

export CFLAGS="${SLKCFLAGS}"
export CXXFLAGS="${SLKCFLAGS}"

./configure \
  --prefix=/usr \
  --sysconfdir=/etc/pgsql \
  --localstatedir=/var \
  --datadir=/usr/share/pgsql \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --with-docdir=/usr/doc \
  --disable-rpath \
  --with-perl \
  --with-tcl \
  --with-tclconfig=/usr/lib \
  --with-python \
  --with-openssl \
  --enable-nls \
  --enable-thread-safety \
  --with-system-tzdata=/usr/share/zoneinfo \
  --build=${SLKTARGET}-slackware-linux || exit 1

make -j${NJOBS} all || exit 1
make -j${NJOBS} -C contrib all

# Have to hack makefile to put correct path into tutorial scripts
sed "s|C=\`pwd\`;|C=/usr/lib/pgsql/tutorial;|" < src/tutorial/Makefile > src/tutorial/GNUmakefile
make -j${NJOBS} -C src/tutorial NO_PGXS=1 all || exit 1
rm -f src/tutorial/GNUmakefile

if [ "${SB_TEST}" = "YES" ] ;then
  echo ====================TESTING=========================
  ( cd src/test/regress
    make all
    cp ../../../contrib/spi/refint.so .
    cp ../../../contrib/spi/autoinc.so .
    make MAX_CONNECTIONS=5 check || exit 1
    make clean
    rm -f refint.so autoinc.so
  ) || exit 1
  echo ====================TESTING END=====================
fi

# python
PYTHON=/usr/bin/python
python_version=$(${PYTHON} -c "import sys; print sys.version[:3]")
python_prefix=$(${PYTHON} -c "import sys; print sys.prefix")
python_includespec="-I${python_prefix}/include/python${python_version}"
( cd PyGreSQL || exit 1
  gcc ${CFLAGS} -fpic -shared -o _pgmodule.so ${python_includespec} -I../src/interfaces/libpq -I../src/include -L../src/interfaces/libpq -lpq pgmodule.c
) || exit 1

# tcl
( cd Pgtcl
  # pgtcl's configure only handles one include directory :-(
  ./configure --prefix=/usr \
    --libdir=/usr/lib \
    --with-tcl=/usr/lib \
    --with-postgres-include="../src/interfaces/libpq -I../src/include" \
    --with-postgres-lib=../src/interfaces/libpq
   # note: as of pgtcl 1.5.2, its makefile is not parallel-safe
   make all || exit 1
) || exit 1

make DESTDIR=${PKG} install || exit 1
make -C contrib all install DESTDIR=${PKG} || exit 1

mkdir -p ${PKG}/usr/lib/pgsql/tutorial
cp src/tutorial/* ${PKG}/usr/lib/pgsql/tutorial/ || exit 1

# python
( cd PyGreSQL || exit 1
   mkdir -p ${PKG}/${PYSITEARCH}
   install -m 0755 _pgmodule.so ${PKG}/${PYSITEARCH}/ || exit 1
   install -m 0644 pg.py ${PKG}/${PYSITEARCH}/ || exit 1
   install -m 0644 pgdb.py ${PKG}/${PYSITEARCH}/ || exit 1
) || exit 1

# tcl
mkdir -p ${PKG}/usr/lib/Pgtcl
cp Pgtcl/pkgIndex.tcl ${PKG}/usr/lib/Pgtcl/ || exit 1
cp Pgtcl/libpgtcl*.so ${PKG}/usr/lib/Pgtcl/ || exit 1

# PGDATA needs removal of group and world permissions due to pg_pwd hole.
mkdir -p ${PKG}/var/lib/pgsql/data
chmod 0700 ${PKG}/var/lib/pgsql
chmod 700 ${PKG}/var/lib/pgsql/data

# backups of data go here...
mkdir -p ${PKG}/var/lib/pgsql/backups
chmod 700 ${PKG}/var/lib/pgsql/backups

# postgres' .bash_profile
zcat ${CWD}/${NAME}-bashprofile.gz > \
     ${PKG}/var/lib/pgsql/.bash_profile.new || exit 1

# Create the multiple postmaster startup directory
mkdir -p ${PKG}/etc/pgsql
chmod 0700 ${PKG}/etc/pgsql

mkdir -p ${PKG}/etc/rc.d
zcat ${CWD}/rc.${NAME}.gz | sed "s/^PGVERSION=.*$/PGVERSION=${VERSION}/" > \
     ${PKG}/etc/rc.d/rc.${NAME}.new || exit 1
chmod 0755 ${PKG}/etc/rc.d/rc.${NAME}.new || exit 1

mkdir -p ${PKG}/var/log/setup
zcat ${CWD}/setup.onlyonce.rc${NAME}.gz > \
     ${PKG}/var/log/setup/setup.onlyonce.rc${NAME} || exit 1
chmod 0755 ${PKG}/var/log/setup/setup.onlyonce.rc${NAME} || exit 1

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)

# Add a documentation directory:
if [ -d ${PKG}/usr/doc/pgsql ] ; then
  mv ${PKG}/usr/doc/pgsql ${DOCDIR}
fi
mkdir -p ${DOCDIR}/contrib
cp -a \
  COPYRIGHT README HISTORY doc/src/FAQ ${CWD}/${SRCARCHIVE2} ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
zcat ${CWD}/README.rpm-dist.gz > ${DOCDIR}/README.rpm-dist
cp -a  contrib/*/README.* contrib/spi/*.example ${DOCDIR}/contrib/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
    rm -f dir
    gzip -9 *
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
  CHROOT="chroot ${ROOTDIR} "
  ROOTDIR="${ROOTDIR}/"
fi

GROUP_ID=26
# Set up group.
if ! grep --quiet '^postgres:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
            -g ${GROUP_ID} \
            postgres 2> /dev/null
fi

# Set up user: add it if it doesn't exist, update it if it already does.
if OLD_ENTRY=$(grep --max-count=1 '^postgres:' etc/passwd) \
  || OLD_ENTRY=$(grep --max-count=1 \
  ':/var/lib/pgsql:[a-z/]*$' etc/passwd)
then
  # Modify existing user
  OLD_USER=$(echo ${OLD_ENTRY} | cut --fields=1 --delimiter=':')
  USER_ID=$(echo ${OLD_ENTRY} | cut --fields=3 --delimiter=':')
  test ${USER_ID} -ge 1000 && USER_ID=$(free_user_id)
  if test "${OLD_USER}" = "postgres"; then
    echo -n "Updating unprivileged user" 1>&2
  else
    echo -ne "Changing unprivileged user \e[1m${OLD_USER}\e[0m to" 1>&2
  fi
  ${CHROOT} /usr/sbin/usermod \
            -d /var/lib/pgsql \
            -u ${USER_ID} \
            -s /bin/bash \
            -g postgres \
            ${OLD_USER}
else
  # Add new user
  echo -n "Creating unprivileged user" 1>&2
  ${CHROOT} /usr/sbin/useradd \
            -c 'PostgreSQL Server' \
            -u ${GROUP_ID} \
            -g postgres \
            -s /bin/bash \
            -d /var/lib/pgsql \
            postgres 2> /dev/null
fi
EOF

cat >> ${PKG}/install/doinst.sh <<EOF
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.${NAME}.new:
if [ -e etc/rc.d/rc.${NAME} ]; then
  cp -a etc/rc.d/rc.${NAME} etc/rc.d/rc.${NAME}.new.incoming
  cat etc/rc.d/rc.${NAME}.new > etc/rc.d/rc.${NAME}.new.incoming
  mv etc/rc.d/rc.${NAME}.new.incoming etc/rc.d/rc.${NAME}.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
# Fix permissions' >> ${PKG}/install/doinst.sh
${CHROOT} /bin/chown postgres.postgres /var/lib/pgsql
${CHROOT} /bin/chmod 0700 /var/lib/pgsql
${CHROOT} /bin/chown postgres.postgres /var/lib/pgsql/data
${CHROOT} /bin/chmod 0700 /var/lib/pgsql/data
${CHROOT} /bin/chown postgres.postgres /var/lib/pgsql/backups
${CHROOT} /bin/chmod 0700 /var/lib/pgsql/backups
${CHROOT} /bin/chown postgres.postgres /var/lib/pgsql/.bash_profile*
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${CWD}/${NAME}-bashprofile.gz ${CWD}/*.h.gz \
                 ${CWD}/README.*.gz ${CWD}/{rc.,setup.onlyonce.rc}*.gz \
                 ${CWD}/Makefile*.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.gz \
                 ${SBDIR}/patches/
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^  ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
