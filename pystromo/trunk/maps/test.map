# This file contains demonstration key re-mappings.

# Mappings within this default section apply to all grabbed devices.
[DEFAULT]

# A remapping statement consists of two input:output halves, seperated by a
# colon or equals sign. Whitespace is ignored.
# See constants.py for possible values for the in and out-put keys.
# If a remapping is specified more than once, the latter definition will rule.

# Eg.:
## Replace the TAB key with the 1 key.
KEY_TAB:KEY_1


# You can assign multiple keys to the same output:
## Both Q and W should press 2.
KEY_Q,KEY_W:KEY_2


# It is also possible to use chording on the input:
## Both E and R at the same time will result in an 'enter' keypress.
KEY_E+KEY_R: KEY_ENTER

## But it's probably a good idea to neutralise either key when pressed alone!
KEY_E:
KEY_R:none


# The output can perform a sequence of keypresses:
## A is remapped to write out "apple"
KEY_A:KEY_A, KEY_P, KEY_P, KEY_L, KEY_E


# Or simultaneous keypress combinations:
# (each key is pressed in the order given, then released in reverse order)
## S is remapped to press ctrl-F2
KEY_S:KEY_LEFTALT + KEY_F2


# Delays can also be introduced:
# (delays won't block other events from being processed, don't worry)
## D will type "D'oh" at one key per second
KEY_D:KEY_LEFTSHIFT+KEY_D, 1000, KEY_APOSTROPHE, 1000, KEY_O, 1000, KEY_H


# Delays can also be put on output combinations.
# These will cause that combination to be held for that amount of time.
# For example, UT2004 requires movement keys to be held down for a (small)
# amount of time before it is counted as part of a dodge move.
# Why do you think I implemented this feature? :)
## This will hold down 'F' for half a second, twice.
KEY_F:KEY_F+500,1000,KEY_F+500


# You can also make cycles of keypresses, such that the first press of a key
# does one thing, the next another, and so forth.
## Pressing left-shift will trigger a, then b, then c, and so on
KEY_LEFTSHIFT:KEY_A. KEY_B,KEY_B. KEY_C,KEY_C,KEY_C. KEY_D,KEY_D,KEY_D,KEY_D. KEY_E,KEY_T,KEY_C,KEY_DOT


# Something such as "KEY_? + (KEY_?, KEY_?, KEY_?), KEY_?" may come later.


# You may assign remappings to a specific device, or set of devices, by
# putting remapping statements after a [Device:*] section. After the colon
# in the section title you may put any number of device IDs (as defined in
# a conf file), separated by commas, to which the remappings will apply.

[Device:n52]
# For the nostromo n52, we remap key #6 (capslock) to print 'w00t!'.
# NB. "!" is not a basic key, so it's location may depend on keyboard layout.
KEY_CAPSLOCK=KEY_W, KEY_0, KEY_0, KEY_T, KEY_LEFTSHIFT + KEY_1

# For relative actions (such as wheels) you need to specify the direction of
# motion to match using ">" (positive/up/right) and "<" (negative/down/left)
## Remap the positive wheel motion to "+"
REL_WHEEL>=KEY_LEFTSHIFT+KEY_EQUAL
## Remap the negative wheel motion to "-"
REL_WHEEL<=KEY_MINUS


[Device:n50]
# Relative and absolute motion (such as from joysticks) can also be remapped
# based on it's value. The aforementioned plain ">" and "<" are actually
# just shorthand for ">0" and "<0"
## The n50's d-pad acts as an analog joystick;
## 0, 0 is the up-left position, 128, 128 is centre (off) position.
ABS_X<128:KEY_LEFT
ABS_X>128:KEY_RIGHT
ABS_Y<128:KEY_UP
ABS_Y>128:KEY_DOWN


# You can also specify specific values to match on
## The throttle at min (255) will output a hash (on a UK keyboard at least)
ABS_THROTTLE@255:KEY_BACKSLASH
## FYI, The UK backslash key is actually KEY_102ND
## Damn yanks :P

# And additionally ranges of values to match against
ABS_THROTTLE@0~9:None
ABS_THROTTLE@10~100:KEY_LEFTSHIFT+KEY_EQUAL
ABS_THROTTLE@101~154:NONE
ABS_THROTTLE@155~254:KEY_MINUS


[Device:saitek-p2500]
# Specifying a value for output is also possible
## Moving the left joystick down will move the mouse down at a constant rate.
## We need the extra None in the sequence in order to repeat the motion.
ABS_Y@144~255:REL_Y@5,None

# You can also specify ranges on output, which will scale with the input range.
## Moving the left joystick up will move the mouse upward, at a relative speed.
ABS_Y@0~112:REL_Y@-10~0,None

# Ignore any other ABS_Y motion
ABS_Y@113~143:None


# An absolute control can also be chorded with keypresses
# NB. This is still buggy, I advise you don't use it yet!
## The left-joystick x-axis controls the mouse only when the '3' button is held.
ABS_X:None
BTN_THUMB2+ABS_X@0~112: REL_X@-10~0,None
BTN_THUMB2+ABS_X@144~255: REL_X@0~10,None


# I suspect a GUI for all this stuff may be forthcoming at some point.
