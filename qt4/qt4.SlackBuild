#!/bin/sh
#-- qt4 for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ qt4.SlackBuild 2>&1 | tee build.log
#--
# Using code from Rex Dieter <rexdieter[AT]users.sf.net> RPM spec file
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.trolltech.com/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=qt
NAME=${PNAME}4
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-4.4.1}
PVER=${PVER:-"$(LC_ALL=C date +%Y%m%d)"}
if [ "${SB_NATIVE}" = "NO" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable webkit module
SB_WEBKIT=${SB_WEBKIT:-YES}

# Set to YES to build demo and examples
SB_DEMOS=${SB_DEMOS:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}-x11-opensource-src-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2
SRCARCHIVE2=qt-copy-patches-${PVER}.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="ftp://ftp.trolltech.com/qt/source/${SRCARCHIVE}"
SNAPUPDATE=${PNAME}-copy-patches-snapshot.sh
export snap=${VERSION}

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi
if ! test -r ${SRCARCHIVE2}; then
  test -r ${CWD}/${SRCARCHIVE2} || sh ${CWD}/${SNAPUPDATE} || exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe "
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi

unset CFLAGS CXXFLAGS CPPFLAGS

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1
tar -xjvf ${CWD}/${SRCARCHIVE2} || exit 1

# these should match contents of qt4.macros:
_qt4_prefix=/usr/lib/qt4
_qt4_bindir=${_qt4_prefix}/bin
_qt4_datadir=${_qt4_prefix}
_qt4_demosdir=${_qt4_prefix}/demos
_qt4_docdir=/usr/doc/qt4
_qt4_examplesdir=${_qt4_prefix}/examples
_qt4_headerdir=/usr/include
_qt4_libdir=/usr/lib
_qt4_plugindir=${_qt4_prefix}/plugins
_qt4_sysconfdir=/etc
_qt4_translationdir=${_qt4_datadir}/translations

# Fix file perms:
chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

# drop -fexceptions from $SLKCFLAGS
SLKCFLAGS="$(echo ${SLKCFLAGS} | sed 's|-fexceptions||g')"

sed -i \
  -e "s|-O2|${SLKCFLAGS}|g" \
  -e "s|g++.conf|g++-multilib.conf|g" mkspecs/linux-g++/qmake.conf
sed -e "s|^QMAKE_CFLAGS_RELEASE|#QMAKE_CFLAGS_RELEASE|g" \
 mkspecs/common/g++.conf > mkspecs/common/g++-multilib.conf

if [ "${_qt4_libdir}" == "/usr/lib" ] ;then
  sed -i -e "s|^QMAKE_LIBDIR_QT.*=.*|QMAKE_LIBDIR_QT       =|" \
    mkspecs/common/linux.conf
fi

if [ "${LDFLAGS}" ] ;then
  sed -i -e "/^QMAKE_LFLAGS_RELEASE/s|$| ${LDFLAGS}|g" \
            mkspecs/*/qmake*.conf mkspecs/common/g++-multilib.conf || exit 1
fi
unset LDFLAGS

# undefine QMAKE_STRIP, so we get useful -debuginfo pkgs
sed -i -e "s|^QMAKE_STRIP.*=.*|QMAKE_STRIP             =|" \
  mkspecs/common/linux.conf

if [ "${SB_DEMOS}" != "YES" ] ; then
  sed -i '/^CFG_NOBUILD_PARTS=/s|"$| demos examples"|g' \
    configure || exit 1
  SB_DEMOSOPTS="-nomake demos -nomake examples"
fi

if [ "${SB_WEBKIT}" = "YES" ] ;then
  SB_WEBKITOPTS="-webkit -assistant-webkit"
else
  SB_WEBKITOPTS="-no-webkit"
fi

# And here's what we are currently using.  The "-confirm-license" agrees to the GPL, so don't run this script if you
# don't agree.  :-)
./configure -v \
  -confirm-license \
  -optimized-qmake \
  -prefix ${_qt4_prefix} \
  -bindir ${_qt4_bindir} \
  -datadir ${_qt4_datadir} \
  -demosdir ${_qt4_demosdir} \
  -docdir ${_qt4_docdir} \
  -examplesdir ${_qt4_examplesdir} \
  -headerdir ${_qt4_headerdir} \
  -libdir ${_qt4_libdir} \
  -plugindir ${_qt4_plugindir} \
  -sysconfdir ${_qt4_sysconfdir} \
  -translationdir ${_qt4_translationdir} \
  -platform linux-g++ \
  -release \
  -shared \
  -release \
  -shared \
  -cups \
  -fontconfig \
  -largefile \
  -qt-gif \
  -no-rpath \
  -reduce-relocations \
  -no-separate-debug-info \
  -sm \
  -stl \
  -system-libmng \
  -system-libpng \
  -system-libjpeg \
  -system-libtiff \
  -system-zlib \
  -tablet \
  -xcursor \
  -xfixes \
  -xinerama \
  -xshape \
  -xrandr \
  -xrender \
  -xkb \
  -glib \
  -openssl-linked \
  -xmlpatterns \
  -opengl \
  -dbus-linked ${SB_WEBKITOPTS} \
  -no-phonon -no-gstreamer ${SB_DEMOSOPTS} \
  -plugin-sql-mysql \
  -plugin-sql-sqlite -system-sqlite || exit 1

make -j${NJOBS} || exit 1

make install INSTALL_ROOT=${PKG} || exit 1


## pkg-config
# strip extraneous dirs/libraries -- Rex
# safe ones
glib2_libs="$(pkg-config --libs glib-2.0 gthread-2.0)"
for dep in -laudio -ldbus-1 -lfreetype -lfontconfig ${glib2_libs} -lmng -ljpeg -lpng -lm -lz -lssl -lcrypto -lsqlite3 \
  -L${TMP}/${SRCDIR}/lib ; do
  sed -i -e "s|${dep} ||g" ${PKG}/${_qt4_libdir}/lib*.la ||:
  sed -i -e "s|${dep} ||g" ${PKG}/${_qt4_libdir}/pkgconfig/*.pc
  sed -i -e "s|${dep} ||g" ${PKG}/${_qt4_libdir}/*.prl
done

# riskier
for dep in -lXrender -lXrandr -lXcursor -lXfixes -lXinerama -lXi -lXft -lXt -lXext -lX11 -lSM -lICE -ldl -lpthread ; do
  sed -i -e "s|${dep} ||g" ${PKG}/${_qt4_libdir}/lib*.la ||:
  sed -i -e "s|${dep} ||g" ${PKG}/${_qt4_libdir}/pkgconfig/*.pc
  sed -i -e "s|${dep} ||g" ${PKG}/${_qt4_libdir}/*.prl
done

# nuke dandling reference(s) to ${PKG}
sed -i -e "/^QMAKE_PRL_BUILD_DIR/d" ${PKG}/${_qt4_libdir}/*.prl

if [ "${_qt4_docdir}" != "${_qt4_prefix}/doc" ] ;then
  # -doc make symbolic link to _qt4_docdir
  rm -rf ${PKG}/${_qt4_prefix}/doc
  ln -s  ../../doc/qt4 ${PKG}/${_qt4_prefix}/doc
fi

if [ "/usr/bin" = "${_qt4_bindir}" ] ;then
  # compat symlink
  rm -rf ${PKG}/${_qt4_prefix}/bin
  ln -s ../../bin ${PKG}/${_qt4_prefix}/bin
fi

## Make symlinks in $bindir
if [ "/usr/bin" != "${_qt4_bindir}" ] ;then
  mkdir -p ${PKG}/usr/bin
  ( cd ${PKG}/${_qt4_bindir}
    for i in *; do
      case "${i}" in
        assistant|designer|linguist|lrelease|lupdate|moc|qmake|qtconfig|qtdemo|uic)
          mv ${i} ../../../bin/${i}-qt4
          ln -s ../../../bin/${i}-qt4 .
          ln -s ../../../bin/${i}-qt4 ${i}
          ;;
        *)
          mv ${i} ../../../bin/
          ln -s ../../../bin/${i} .
          ;;
      esac
    done
  ) || exit 1
fi

# _debug lib symlinks
( cd ${PKG}/${_qt4_libdir}
  for lib in libQt*.so ; do
    ln -s ${lib} $(basename ${lib} .so)_debug.so
  done
  for lib in libQt*.a ; do
    ln -s ${lib} $(basename ${lib} .a)_debug.a
  done
) || exit 1

# .la files, die, die, die.
rm -f ${PKG}/${_qt4_libdir}/lib*.la

## multilib: qconfig
# mv ${PKG}/${_qt4_headerdir}/Qt/qconfig.h \
#    ${PKG}/${_qt4_headerdir}/QtCore/qconfig-i386.h || exit 1
# zcat ${CWD}/qconfig-multilib.h.gz > \
#      ${PKG}/${_qt4_headerdir}/QtCore/qconfig-multilib.h || exit 1
# ln -sf qconfig-multilib.h ${PKG}/${_qt4_headerdir}/QtCore/qconfig.h || exit 1
# ln -sf ../QtCore/qconfig.h ${PKG}/${_qt4_headerdir}/Qt/qconfig.h || exit 1

## multilib: mkspecs
if [ "${_qt4_datadir}" != "${_qt4_prefix}" ] ;then
  # mkspecs
  mkdir -p ${PKG}/${_qt4_prefix}/mkspecs
  mv ${PKG}/${_qt4_datadir}/mkspecs/{default,linux-g++*,qconfig.pri} \
     ${PKG}/${_qt4_prefix}/mkspecs/
  ln -s ${_qt4_datadir}/mkspecs/common ${PKG}/${_qt4_prefix}/mkspecs/common
fi

# Trolltech.conf
mkdir -p ${PKG}/${_qt4_sysconfdir}
zcat ${CWD}/Trolltech.conf.gz > \
     ${PKG}/${_qt4_sysconfdir}/Trolltech.conf.new

if [ "${_qt4_libdir}" != "/usr/lib" ] ;then
mkdir -p ${PKG}/etc/ld.so.conf.d
cat > ${PKG}/etc/ld.so.conf.d/qt4.conf.new << EOF
${_qt4_libdir}
EOF
fi

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)

# Qt.pc
cat > ${PKG}/usr/lib/pkgconfig/Qt.pc <<EOFP
prefix=${_qt4_prefix}
exec_prefix=\${prefix}
bindir=${_qt4_bindir}
datadir=${_qt4_datadir}
demosdir=${_qt4_demosdir}
docdir=${_qt4_docdir}
examplesdir=${_qt4_examplesdir}
headerdir=${_qt4_headerdir}
libdir=${_qt4_libdir}
plugindir=${_qt4_plugindir}
qmake=${_qt4_bindir}/qmake
sysconfdir=${_qt4_sysconfdir}
translationdir=${_qt4_translationdir}

Name: Qt
Description: Qt Configuration
Version: ${VERSION}
EOFP

# rpm macros
mkdir -p ${PKG}/etc/rpm
cat > ${PKG}/etc/rpm/macros.qt4 <<EOFM
%_qt4_version ${VERSION}
%_qt4_prefix %{_libdir}/qt4
%_qt4_bindir %{_qt4_prefix}/bin
%_qt4_datadir %{_datadir}/qt4
%_qt4_demosdir %{_qt4_prefix}/demos
%_qt4_docdir %{_docdir}/qt4
%_qt4_examples %{_qt4_prefix}/examples
%_qt4_headerdir %{_includedir}
%_qt4_libdir %{_libdir}
%_qt4_plugindir %{_qt4_prefix}/plugins
%_qt4_qmake %{_qt4_bindir}/qmake
%_qt4_sysconfdir %{_sysconfdir}
%_qt4_translationdir %{_qt4_datadir}/translations
EOFM

# Add desktop file(s)
mkdir -p ${PKG}/usr/share/applications
cat > ${PKG}/usr/share/applications/${NAME}-assistant.desktop <<EOF1
[Desktop Entry]
Name=Qt4 Assistant
Comment=Shows Qt4 documentation and examples
Exec=assistant-qt4
Icon=assistant
Terminal=false
Encoding=UTF-8
Type=Application
Categories=Qt;Development;Documentation;
EOF1

cat > ${PKG}/usr/share/applications/${NAME}-designer.desktop <<EOF2
[Desktop Entry]
Name=Qt4 Designer
GenericName=Interface Designer
Comment=Design GUIs for Qt4 applications
Exec=designer-qt4
Icon=designer
MimeType=application/x-designer;
Terminal=false
Encoding=UTF-8
Type=Application
Categories=Qt;Development;
EOF2

cat > ${PKG}/usr/share/applications/${NAME}-linguist.desktop <<EOF3
[Desktop Entry]
Name=Qt4 Linguist
Comment=Add translations to Qt4 applications
Exec=linguist-qt4
Icon=linguist4
MimeType=application/x-linguist;
Terminal=false
Encoding=UTF-8
Type=Application
Categories=Qt;Development;
EOF3

cat > ${PKG}/usr/share/applications/${NAME}config.desktop <<EOF4
[Desktop Entry]
Name=Qt4 Config
Comment=Configure Qt4 behavior, styles, fonts
Exec=qtconfig-qt4
Icon=qt4-logo
Terminal=false
Encoding=UTF-8
Type=Application
Categories=Qt;Settings;
EOF4

if [ "${SB_DEMOS}" = "YES" ] ; then
cat > ${PKG}/usr/share/applications/${NAME}demo.desktop <<EOF5
[Desktop Entry]
Name=Qt4 Demo
Comment=Show Qt4 demos and programming examples
Exec=qtdemo-qt4
Icon=qt4-logo
Terminal=false
Encoding=UTF-8
Type=Application
Categories=Qt;Development;
EOF5
fi

# qt4-logo (generic) icons
mkdir -p ${PKG}/usr/share/icons/hicolor/{128x128,48x48}/apps
zcat ${CWD}/hi128-app-qt4-logo.png.gz > \
     ${PKG}/usr/share/icons/hicolor/128x128/apps/qt4-logo.png
zcat ${CWD}/hi48-app-qt4-logo.png.gz > \
     ${PKG}/usr/share/icons/hicolor/48x48/apps/qt4-logo.png
# linguist icons
for icon in tools/linguist/linguist/images/icons/linguist-*-32.png ; do
  size=$(echo $(basename ${icon}) | cut -d- -f2)
  install -p \
    -m644 -D ${icon} \
    ${PKG}/usr/share/icons/hicolor/${size}x${size}/apps/linguist4.png
done

# Add a documentation directory:
( cd ${PKG}/usr/doc && ln -s ${NAME} ${NAME}-${VERSION} )
#mkdir -p ${DOCDIR}
cp -a \
  README* LICENSE.GPL* GPL_EXCEPTION*.TXT OPENSOURCE-*.TXT changes-* \
  ${CWD}/ChangeLog.SB ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${CWD}/*-multilib.h.gz \
                 ${CWD}/*.png.gz ${CWD}/Trolltech.conf.gz ${CWD}/${SNAPUPDATE} \
                 ${SBDIR}/
  install -m0644 ${CWD}/patches/* \
                 ${SBDIR}/patches/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^  ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
