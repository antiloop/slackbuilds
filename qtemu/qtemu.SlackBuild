#!/bin/sh
#-- qtemu for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.brg>
# Suggested usage: $ qtemu.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

CWD=`pwd`
if [ "${TMP}" = "" ]; then
  TMP=/tmp
fi

NAME=qtemu
PKG=${TMP}/package-${NAME}

VERSION=${VERSION:-1.0.2}
ARCH=${ARCH:-i686}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}
SRCARCHIVE=${SRCDIR}-${VERSION}.tar.bz2
DL_URL="--timeout=5 http://dl.sf.net/sourceforge/${NAME}/${SRCARCHIVE}"
#DL_URL="--timeout=5 http://prdownloads.sourceforge.net/${NAME}/${SRCARCHIVE}"

if [ "${ARCH}" = "i386" ]; then
  SLKCFLAGS="-O2 -march=i386 -mtune=i686"
elif [ "${ARCH}" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
elif [ "${ARCH}" = "i686" ]; then
  SLKCFLAGS="-O3 -march=athlon64 -mtune=athlon64 -msse3 -pipe"
elif [ "${ARCH}" = "s390" ]; then
  SLKCFLAGS="-O2"
elif [ "${ARCH}" = "x86_64" ]; then
  SLKCFLAGS="-O2"
fi

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_URL}
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xjmvf ${CWD}/${SRCARCHIVE} || exit 1
mkdir -p ${SRCDIR}/build
cd ${SRCDIR}/build || exit 1

find . -perm 777 -exec chmod 755 {} \;
find . -perm 666 -exec chmod 644 {} \;
find . -perm 664 -exec chmod 644 {} \;
find . -perm 640 -exec chmod 644 {} \;
find . -perm 444 -exec chmod 644 {} \;

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1

qtdir=$(qmake-qt4 -query QT_INSTALL_PREFIX)
qtinc=${qtdir}/include
qtlib=$(qmake-qt4 -query QT_INSTALL_LIBS)/qt4/lib

CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
          cmake .. -DCMAKE_INSTALL_PREFIX:PATH=/usr/lib/${NAME} \
|| exit 1

make -j${NJOBS} || exit 1
make install DESTDIR=${PKG} || exit 1

cd ..

mkdir -p ${PKG}/usr/bin
cat > ${PKG}/usr/bin/${NAME} <<EOF
#!/bin/sh
exec /usr/lib/${NAME}/bin/${NAME} "\$@"
EOF
chmod 755 ${PKG}/usr/bin/${NAME}

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)

mkdir -p ${PKG}/usr/share/applications
cat > ${PKG}/usr/share/applications/${NAME}.desktop <<EOF
[Desktop Entry]
Encoding=UTF-8
Name=QtEmu
GenericName=QEmu GUI
Comment=QtEmu is a graphical user interface for QEMU written in Qt4.
Icon=${NAME}.png
Exec=${NAME}
Terminal=false
Type=Application
Categories=Application;System;
EOF

mkdir -p ${PKG}/usr/share/pixmaps
install -m 0644 images/${NAME}.png \
        ${PKG}/usr/share/pixmaps/${NAME}.png

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS COPYING ChangeLog README NEWS THANKS TODO ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
ln -s /usr/lib/${NAME}/help ${DOCDIR}/help
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
    mv ${PKG}/usr/share/man ${PKG}/usr/man
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd $manpagedir
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink $eachpage ).gz $eachpage.gz
          rm $eachpage
        done
        gzip -9 *.?
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
      rm -f dir
      gzip -9 *
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

# Replicate slackbuild and patches
mkdir -p ${SBDIR}
install -m644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
              ${SBDIR}/
install -m755 ${CWD}/${NAME}.SlackBuild \
              ${SBDIR}/${NAME}.SlackBuild
sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
        /^BUILD=/s/:-.*}/:-$BUILD}/
        /^ARCH=/s/:-.*}/:-$ARCH}/
        " ${SBDIR}/${NAME}.SlackBuild

# Build package:
set +o xtrace			# no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"
# `chgrp bin' is abolished from Slack 11 on
read SLACK SLACKVER < /etc/slackware-version
if test ${SLACKVER%%.*} -lt 11
then ROOTCOMMANDS="$ROOTCOMMANDS
	/usr/bin/find . -type d '(' -name bin -or -name sbin ')'	\
		-exec /bin/chgrp --recursive bin {} ';'  ;"
fi
ROOTCOMMANDS="$ROOTCOMMANDS
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test $UID = 0; then
  eval $ROOTCOMMANDS
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo $ROOTCOMMANDS | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "$ROOTCOMMANDS"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR}
    echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  rm -rf ${PKG}
  echo "Cleanup completed"
fi
