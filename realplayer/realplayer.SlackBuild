#!/bin/sh
#-- realplayer for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ realplayer.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.real.com/linux
# https://player.helixcommunity.org/2005/downloads/index.html
# https://player.helixcommunity.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

RNAME=RealPlayer
PNAME=realplay
NAME=realplayer
NAME2=${NAME}-plugin
PKGF=${PKGF:-${TMP}/package-${NAME}}
PKG=${PKGF}/${NAME}
PKG2=${PKGF}/${NAME2}

VERSION=${VERSION:-11.0.0.4028-20080225}
ARCH=i586
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-1}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKGNAME2=${NAME2}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
#SRCARCHIVE=${RNAME}-${VERSION}.${ARCH}.rpm
SRCARCHIVE=${RNAME}11GOLD.rpm

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
#DL_URL="https://helixcommunity.org/projects/player/files/download/2668"
DL_URL="http://software-dl.real.com/194363a6b579ed02d919/unix/RealPlayer11GOLD.rpm"

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
#  test -r ${CWD}/${SRCARCHIVE} || echo "Download needed file in ${DL_URL}" && exit 1
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
mkdir -p ${SRCDIR}
cd ${SRCDIR} || exit 1
rpm2cpio ${CWD}/${SRCARCHIVE} | cpio -imdv --no-absolute-filenames || exit 1

find . -type d | xargs chmod 0755 2> /dev/null
chmod -R u+rw,go+r-w,a-s ${PKG}/

SRCPREFIX="opt/real"

sed -i -e '/^Categories=/s|=.*|=GTK;AudioVideo;|g' \
           ${SRCPREFIX}/${RNAME}/share/realplay.desktop || exit 1
    
mkdir -p ${PKG}/usr/bin
cat > ${PKG}/usr/bin/${PNAME} <<EOF
#!/bin/sh
# Force UTF-8
if [ -z \${LANG} ] ;then
  echo "Please set system variable LANG to proper program execution."
else
  LANG="\$(echo \${LANG} | awk -F'.' '{print \$1}').UTF-8"
  export LANG
fi
HELIX_LIBS=/usr/lib/helix
export HELIX_LIBS
exec \${HELIX_LIBS}/${PNAME}.bin "\$@"
EOF
chmod 0755 ${PKG}/usr/bin/${PNAME}

mkdir -p ${PKG}/usr/lib/helix
install -p -m 755 ${SRCPREFIX}/${RNAME}/${PNAME}.bin \
                  ${PKG}/usr/lib/helix/ || exit 1

mkdir -p ${PKG}/usr/lib/helix/common
install -p -m 755 ${SRCPREFIX}/${RNAME}/common/*.so \
                  ${PKG}/usr/lib/helix/common/ || exit 1
mkdir -p ${PKG}/usr/lib/helix/plugins
install -p -m 755 ${SRCPREFIX}/${RNAME}/plugins/*.so \
                  ${PKG}/usr/lib/helix/plugins/ || exit 1

mkdir -p ${PKG}/usr/lib/helix
install -p -m 644 ${SRCPREFIX}/${RNAME}/LICENSE \
                 ${PKG}/usr/lib/helix/ || exit 1
install -p -m 644 ${SRCPREFIX}/${RNAME}/README \
                  ${PKG}/usr/lib/helix/ || exit 1

mkdir -p ${PKG}/usr/lib/helix/codecs
install -p -m 755 ${SRCPREFIX}/${RNAME}/codecs/*.so \
                  ${PKG}/usr/lib/helix/codecs/ || exit 1

# Hack to get rid of executable stack on shared object files
if [ -x /usr/bin/execstack ] ;then 
  echo "Getting rid of executable stack"
  execstack -c ${PKG}/usr/lib/helix/codecs/*.so
  execstack -c ${PKG}/usr/lib/helix/plugins/vidsite.so
fi

for x in drvc drv2 atrc sipr; do
  ln -s ${x}.so ${PKG}/usr/lib/helix/codecs/${x}.so.6.0 || exit 1
done

mkdir -p ${PKG2}/usr/lib/mozilla/plugins
install -p -m 755 ${SRCPREFIX}/${RNAME}/mozilla/nphelix.so \
                  ${PKG2}/usr/lib/mozilla/plugins/ || exit 1
install -p -m 644 ${SRCPREFIX}/${RNAME}/mozilla/nphelix.xpt \
                  ${PKG2}/usr/lib/mozilla/plugins/ || exit 1

mkdir -p ${PKG}/usr/share/application-registry/
install -p -m 644 ${SRCPREFIX}/${RNAME}/share/${PNAME}.applications \
                  ${PKG}/usr/share/application-registry/ || exit 1
# Desktop file
mkdir -p ${PKG}/usr/share/applications
install -m 0644 ${SRCPREFIX}/${RNAME}/share/${PNAME}.desktop \
                ${PKG}/usr/share/applications/ || exit 1

mkdir -p ${PKG}/usr/share/mime-info/
install -p -m 644 ${SRCPREFIX}/${RNAME}/share/${PNAME}.{keys,mime} \
                  ${PKG}/usr/share/mime-info/ || exit 1

mkdir -p ${PKG}/usr/lib/helix/share/${PNAME}/superbuffer
( cd ${PKG}/usr/lib/helix/share/ && ln -s /usr/share/icons/hicolor/48x48/apps/${PNAME}.png .) || exit 1
install -p -m 644 ${SRCPREFIX}/${RNAME}/share/default/*.png \
                  ${PKG}/usr/lib/helix/share/${PNAME}/ || exit 1
install -p -m 644 ${SRCPREFIX}/${RNAME}/share/${PNAME}/*.png \
                  ${PKG}/usr/lib/helix/share/${PNAME}/ || exit 1

mkdir -p ${PKG}/usr/lib/helix/share/superbuffer
install -p -m 644 ${SRCPREFIX}/${RNAME}/share/superbuffer/*.png \
                  ${PKG}/usr/lib/helix/share/superbuffer/ || exit 1

for LANGUAGE in "de" "es" "fr" "it" "ja" "ko" "pt_BR" "zh_CN" "zh_TW"; do
  dir=${PKG}/usr/share/locale/${LANGUAGE}/LC_MESSAGES/
  mkdir -p ${dir}
  install -p -m 644 "${SRCPREFIX}/${RNAME}/share/locale/${LANGUAGE}/player.mo" \
                    "${dir}/${PNAME}.mo" || exit 1
  install -p -m 644 "${SRCPREFIX}/${RNAME}/share/locale/${LANGUAGE}/widget.mo" \
                    "${dir}/libgtkhx.mo" || exit 1
done

convert ${SRCPREFIX}/${RNAME}/share/icons/${PNAME}_192x192.png -filter Lanczos \
       -depth 8 -resize 128x128 ${SRCPREFIX}/${RNAME}/share/icons/${PNAME}_128x128.png

for SIZE in "16x16" "32x32" "48x48" "128x128" "192x192" ; do
  mkdir -p ${PKG}/usr/share/icons/hicolor/${SIZE}
  mkdir -p ${PKG}/usr/share/icons/hicolor/${SIZE}/apps
  mkdir -p ${PKG}/usr/share/icons/hicolor/${SIZE}/mimetypes

  ICON=${SRCPREFIX}/${RNAME}/share/icons/${PNAME}_${SIZE}.png
  if [ -f "${ICON}" ] ; then
    mkdir -p ${PKG}/usr/share/icons/hicolor/${SIZE}/apps
    install -p -m 644 "${ICON}" \
                       ${PKG}/usr/share/icons/hicolor/${SIZE}/apps/${PNAME}.png || exit 1
  fi

  for MIME in \
    "application-ram"     \
    "application-rpm"     \
    "application-rm"      \
    "audio-mp4"           \
    "audio-ra"            \
    "text-realtext"       \
    "video-rv" ; do

    if [ "${SIZE}" = "16x16" ] || [ "${SIZE}" = "32x32" ] || [ "${SIZE}" = "128x128" ] ;then 
      convert ${SRCPREFIX}/${RNAME}/share/icons/mime-${MIME}_192x192.png -filter Lanczos \
       -depth 8 -resize ${SIZE} ${SRCPREFIX}/${RNAME}/share/icons/mime-${MIME}_${SIZE}.png
    fi

    ICON=${SRCPREFIX}/${RNAME}/share/icons/mime-${MIME}_${SIZE}.png
    if [ -f "${ICON}" ] ; then
      mkdir -p ${PKG}/usr/share/icons/hicolor/${SIZE}/mimetypes
      install -p -m 644 "${ICON}" \
                 ${PKG}/usr/share/icons/hicolor/${SIZE}/mimetypes/${PNAME}-${MIME}.png || exit 1
    fi
  done
done

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  ${SRCPREFIX}/${RNAME}/share/*.{css,html} ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
ln -sf /usr/lib/helix/LICENSE ${DOCDIR}/LICENSE
ln -sf /usr/lib/helix/README ${DOCDIR}/README
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644


mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

mkdir -p ${PKG2}/install
cat ${CWD}/slack-desc.plugin > ${PKG2}/install/slack-desc
cat ${CWD}/slack-required.plugin > ${PKG2}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc ${PKG2}/install/slack-desc

# Replicate slackbuild and patches
mkdir -p ${SBDIR}
install -m0644 ${CWD}/slack-desc* ${CWD}/slack-required* ${CWD}/ChangeLog.SB \
               ${SBDIR}/
install -m0755 ${CWD}/${NAME}.SlackBuild \
               ${SBDIR}/${NAME}.SlackBuild
sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
        /^BUILD=/s/:-.*}/:-$BUILD}/
        /^ARCH=/s/:-.*}/:-$ARCH}/
        " ${SBDIR}/${NAME}.SlackBuild

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS2="set -o errexit -o xtrace ; cd ${PKG2} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "
ROOTCOMMANDS2="${ROOTCOMMANDS2}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME2}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  eval ${ROOTCOMMANDS2}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
  echo ${ROOTCOMMANDS2} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
  /bin/su -c "${ROOTCOMMANDS2}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKGF} ]; then
    rm -rf ${PKGF} && echo "${PKGF} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
