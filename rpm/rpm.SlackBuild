#!/bin/sh
#-- rpm for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.brg>
# Suggested usage: $ rpm.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.rpm.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=rpm
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-4.4.2.3}
if [ "${SB_NATIVE}" = "NO" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
SLKTARGET=${SLKTARGET:-i486}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

PYSITEARCH=$(python -c 'from distutils import sysconfig; print sysconfig.get_python_lib(1)')
PYABI=$(python -c 'import sys; print ".".join(sys.version.split(".")[:2])')

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.gz

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://rpm.org/releases/${NAME}-4.4.x/${SRCARCHIVE}"

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

# force external popt
rm -rf popt/

# XXX for popt removal 
autoreconf -ivf || exit 1

# Ugly fix to po bulding erros
cp -f po/Makefile.in.in~ po/Makefile.in.in

# XXX pull in updated config.guess and config.sub as done by %%configure
# which cannot be used to build rpm itself due to makefile brokenness
#for i in $(find . -name config.guess -o -name config.sub) ; do 
    #[ -f /usr/lib/rpm/$(basename $i) ] && %{__rm} -f $i && cp -fv /usr/lib/rpm/$(basename $i) $i 
#done 

export CFLAGS="${SLKCFLAGS}"
./configure \
  --prefix=/usr \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --without-selinux \
  --with-python=${PYABI} \
  --enable-posixmutexes \
  --without-javaglue \
  --without-apidocs \
  --build=${SLKTARGET}-slackware-linux || exit 1

make -j${NJOBS} || exit 1
make DESTDIR=${PKG} install || exit 1

# Clean up useless symlinks
for i in rpme rpmi rpmu; do
    rm -f ${PKG}/usr/bin/${i}
done

# Save list of packages through cron
# mkdir -p ${PKG}/etc/cron.daily
# install -m 755 scripts/rpm.daily ${RPM_BUILD_ROOT}/etc/cron.daily/rpm
#
mkdir -p ${PKG}/etc/logrotate.d
install -m 0644 scripts/rpm.log \
                ${PKG}/etc/logrotate.d/rpm.new || exit 1

mkdir -p ${PKG}/etc/rpm

mkdir -p ${PKG}/var/spool/repackage
mkdir -p ${PKG}/var/lib/rpm
# for dbi in \
# 	Basenames Conflictname Dirnames Group Installtid Name Packages \
# 	Providename Provideversion Requirename Requireversion Triggername \
# 	Filemd5s Pubkeys Sha1header Sigmd5 \
# 	__db.001 __db.002 __db.003 __db.004 __db.005 __db.006 __db.007 \
# 	__db.008 __db.009
# do
#     touch ${PKG}/var/lib/rpm/$dbi
# done

# Stupid RPM should be taken out back and shot for installing making a chmod 755 /var/tmp:
# rmdir $PKG/var/tmp
# Sigh... have to maintain it for at least one build as an update..
chmod 1777 ${PKG}/var/tmp

mkdir -p ${PKG}/var/lib/rpm/tmp
zcat ${CWD}/Packages.gz > \
     ${PKG}/var/lib/rpm/tmp/Packages || exit 1

# Filter all .la files (thanks much to Mark Post for the sed script):
( cd ${PKG}
  for file in $(find . -type f -name "*.la") ; do
    cat ${file} | sed -e 's%-L/tmp/[[:graph:]]* % %g' > ${TMP}/tmp-la-file
    cat ${TMP}/tmp-la-file > ${file}
  done
  rm ${TMP}/tmp-la-file
)

# Here's a bug that's been around forever:
( cd ${PKG}/usr/lib/rpm
  if [ ! -r rpmpopt ]; then
    if [ -r rpmpopt-${VERSION} ]; then
      ln -sf rpmpopt-${VERSION} rpmpopt
    fi
  fi
)

strip -g ${PKG}/usr/lib/*.a
# Since rpm linked statically is generally segfaulting after each glibc
# upgrade, these static libraries are very likely equally useless.
rm -f ${PKG}/usr/lib/*.a

# Get rid of unpackaged files
( cd ${PKG}
  rm -f ./usr/lib/lib*.la
  rm -f ./usr/lib/rpm/{Specfile.pm,cpanflute,cpanflute2,rpmdiff,rpmdiff.cgi,sql.prov,sql.req,tcl.req,rpm.*}
  rm -rf ./usr/man/{fr,ko}
  rm -f .${PYSITEARCH}/*.{a,la}
  rm -f .${PYSITEARCH}/rpm/*.{a,la}
  rm -f .${PYSITEARCH}/rpmdb/*.{a,la}
)

find ${PKG}/usr/lib/python${PYABI} -name "*.py"|xargs chmod 644

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)

# copy db and file/libmagic license info to distinct names
cp -p db/LICENSE LICENSE-bdb
cp -p file/LEGAL.NOTICE LEGAL.NOTICE-file
cp -p lua/COPYRIGHT COPYRIGHT-lua

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  CHANGES GROUPS COPYING  LICENSE-bdb LEGAL.NOTICE-file CREDITS \
  ChangeLog COPYRIGHT-lua doc/manual/[a-z]* ${CWD}/ChangeLog.SB \
  ${CWD}/${NAME}.spec ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
    mv ${PKG}/usr/share/man ${PKG}/usr/man
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
      rm -f dir
      gzip -9 *
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
 	CHROOT="chroot ${ROOTDIR} "
 	ROOTDIR="${ROOTDIR}/"
fi

GROUP_ID=37
# Set up group.
if ! grep --quiet '^rpm:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
            -g ${GROUP_ID} \
            rpm 2> /dev/null
fi
# Set up user.
if ! grep --quiet '^rpm:' etc/passwd ;then
  ${CHROOT} /usr/sbin/useradd \
            -u ${GROUP_ID} \
            -g rpm \
            -s /bin/false \
            -d '/var/lib/rpm' \
            rpm 2> /dev/null
fi

EOF

cat >> ${PKG}/install/doinst.sh <<EOF
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
# Fix permissions'
${CHROOT} /bin/chown rpm.rpm /bin/rpm 
${CHROOT} /bin/chown rpm.rpm /usr/bin/{rpmbuild,rpm2cpio,gendiff,rpmdb}
${CHROOT} /bin/chown rpm.rpm /usr/bin/{rpmgraph,rpmsign,rpmquery,rpmverify}

${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/config.{guess,sub}
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/convertrpmrc.sh
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/freshen.sh
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/macros
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/mkinstalldirs
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/rpm2cpio.sh
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/rpm{d,e,i,u,k,q,v,b,t}
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/tgpg
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/rpmpopt*
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/rpmrc
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/{i[3-6],athlon,pentium,noarch}*
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/rpmdb_*
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/rpmfile

${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/rpmcache

${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/brp-*
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/check-*
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/config.site
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/cross-build
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/find-*
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/get_magic.pl
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/getpo.sh
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/http.req
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/javadeps
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/magic*
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/mono-find-*
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/perl*
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/pythondeps.sh
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/{rpmdeps,trpm}
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/u_pkg.sh
${CHROOT} /bin/chown rpm.rpm /usr/lib/rpm/vpkg-*

${CHROOT} /bin/chown rpm.rpm /var/lib/rpm
${CHROOT} /bin/chown rpm.rpm /var/spool/repackage

${CHROOT} /bin/chown rpm.rpm /var/lib/rpm/[A-Z]*

if [ ! -r var/lib/rpm/Packages ]; then
  ( cd var/lib/rpm/tmp ; cp -a * .. )
fi
( cd var/lib/rpm && rm -f tmp/* && rmdir tmp )
${CHROOT} /bin/rpm --rebuilddb
${CHROOT} /bin/chown rpm.rpm /var/lib/rpm/[A-Z]*
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

# Replicate slackbuild and patches
mkdir -p ${SBDIR}/patches
install -m0644 ${CWD}/slack-desc* ${CWD}/slack-required ${CWD}/ChangeLog.SB \
               ${CWD}/apply-patches.sh ${CWD}/${NAME}.spec ${CWD}/Packages.gz \
               ${SBDIR}/
install -m0755 ${CWD}/${NAME}.SlackBuild \
               ${SBDIR}/${NAME}.SlackBuild
install -m0644 ${CWD}/patches/*.gz \
               ${SBDIR}/patches/
sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
        /^BUILD=/s/:-.*}/:-$BUILD}/
        /^ARCH=/s/:-.*}/:-$ARCH}/
        " ${SBDIR}/${NAME}.SlackBuild

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  /bin/chmod 1777 var/tmp ; "

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
