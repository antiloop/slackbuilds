#!/bin/sh
#-- slack-artwork for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ slack-artwork.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://phantomx.dnsdojo.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=slack-artwork
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-1.9}
ARCH=noarch
SLKTARGET=${SLKTARGET:-i486}
SLKDIST=${SLKDIST:-Slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://phantomx.dnsdojo.org/down/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1

mkdir -p ${PKG}/usr/share/apps/kdm/themes
cp -a kdm/* ${PKG}/usr/share/apps/kdm/themes/ || exit 1

mkdir -p ${PKG}/usr/share/apps/ksplash/Themes
cp -a ksplash/* ${PKG}/usr/share/apps/ksplash/Themes/ || exit 1

mkdir -p ${PKG}/usr/share/gnome-background-properties
install -m0644 wallpapers/desktop-backgrounds-slack.xml \
               ${PKG}/usr/share/gnome-background-properties/ || exit 1
mkdir -p ${PKG}/usr/share/wallpapers
install -m0644 wallpapers/*.jpg* ${PKG}/usr/share/wallpapers/ || exit 1
mkdir -p ${PKG}/usr/share/backgrounds/images
( cd ${PKG}/usr/share/backgrounds/images
  ln -sf ../../wallpapers/*.jpg . || exit 1
) || exit 1

for res in 16 20 22 24 32 36 48 64 96 ;do
  dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
  mkdir -p ${dir}
  install -m0644 icons/slack-logo-icon-${res}.png \
                 ${dir}/slack-logo-icon.png || exit 1
  ln -s slack-logo-icon.png ${dir}/icon-panel-menu.png
  ln -s slack-logo-icon.png ${dir}/gnome-main-menu.png
  ln -s slack-logo-icon.png ${dir}/kmenu.png
  ln -s slack-logo-icon.png ${dir}/start-here.png
done

mkdir -p ${PKG}/usr/share/pixmaps
install -m0644 icons/xfce-slack-logo.png \
               ${PKG}/usr/share/pixmaps/ || exit 1

mkdir -p ${PKG}/etc/gtk-2.0
cat > ${PKG}/etc/gtk-2.0/gtkrc.new <<'EOF'
gtk-theme-name = "Clearlooks"
gtk-icon-theme-name = "Bluecurve"
gtk-fallback-icon-theme = "gnome"
EOF

( cd defaults/xfce
  mkdir -p ${PKG}/etc/xfce/xdg/xfce4/panel
  sed -e "s|XFCE_SLK_DIST|${SLKDIST}|g" xfce4-menu-5.rc > \
         ${PKG}/etc/xfce/xdg/xfce4/panel/xfce4-menu-5.rc.new || exit 1

  mkdir -p ${PKG}/etc/xfce/xdg/xfce4-session
  install -m0644 xfce4-splash.rc \
                 ${PKG}/etc/xfce/xdg/xfce4-session/xfce4-splash.rc.new || exit 1

  mkdir -p ${PKG}/etc/xfce/xdg/xfce4/mcs_settings
  install -m0644 desktop.xml \
                 ${PKG}/etc/xfce/xdg/xfce4/mcs_settings/desktop.xml.new || exit 1
) || exit 1

mkdir -p ${PKG}/usr/share/config \
         ${PKG}/etc/kde/kdm \
         ${PKG}/usr/share/apps/kdisplay/color-schemes
( cd defaults/kde || exit 1
  for f in kdeglobals mediamanagerrc kdesktoprc kickerrc konsolerc ksplashrc kstylerc ;do
    install -m0644 ${f} ${PKG}/usr/share/config/${f}.new || exit 1
  done
  install -m0644 kdmrc \
                 ${PKG}/etc/kde/kdm/kdmrc.new || exit 1
  install -m0644 *.kcsrc \
                 ${PKG}/usr/share/apps/kdisplay/color-schemes/
) || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS COPYING propaganda/ ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find usr/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^  ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
