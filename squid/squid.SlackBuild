#!/bin/sh
#-- squid for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ squid.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.squid-cache.org

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=squid
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-3.0.STABLE7}
SVER=$(echo ${VERSION} | awk -F. '{ print $1"."$2 }')
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
SLKTARGET=${SLKTARGET:-i486}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://www.squid-cache.org/Squid/Versions/v3/${SVER}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p1 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

export CFLAGS="-fPIC $(echo ${SLKCFLAGS} | sed -e 's/-O./-Os/') -g -pipe -fsigned-char -fno-strict-aliasing -D_FORTIFY_SOURCE=2"
export LDFLAGS="-pie"
export CXXFLAGS="-fPIE ${SLKCFLAGS} -D_FORTIFY_SOURCE=2 -fno-strict-aliasing"

./configure \
  --prefix=/usr \
  --exec_prefix=/usr \
  --bindir=/usr/sbin \
  --libexecdir=/usr/lib/squid \
  --localstatedir=/var \
  --datadir=/usr/share \
  --sysconfdir=/etc/squid \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --disable-dependency-tracking \
  --enable-arp-acl \
  --enable-auth="basic,digest,ntlm" \
  --enable-basic-auth-helpers="LDAP,MSNT,NCSA,SMB,YP,getpwnam,multi-domain-NTLM,SASL" \
  --enable-cache-digests \
  --enable-cachemgr-hostname=localhost \
  --enable-delay-pools \
  --enable-digest-auth-helpers="password" \
  --enable-epoll \
  --enable-external-acl-helpers="ip_user,ldap_group,unix_group,wbinfo_group" \
  --enable-icap-client \
  --enable-ident-lookups \
  --with-large-files \
  --enable-linux-netfilter \
  --enable-ntlm-auth-helpers="SMB,fakeauth" \
  --enable-referer-log \
  --enable-removal-policies="heap,lru" \
  --enable-snmp \
  --enable-ssl \
  --enable-storeio="aufs,coss,diskd,null,ufs" \
  --enable-useragent-log \
  --enable-wccpv2 \
  --with-aio \
  --with-default-user="squid" \
  --with-filedescriptors=16384 \
  --with-large-files \
  --with-dl \
  --with-openssl=/usr \
  --with-pthreads \
  --build=${SLKTARGET}-slackware-linux || exit 1

make -j${NJOBS} || exit 1

mkdir faq
( cd faq
  zcat ${CWD}/FAQ.sgml.gz > FAQ.sgml || exit 1
  sgml2html FAQ.sgml || exit 1
) || exit 1

make install DESTDIR=${PKG} sysconfdir=/etc/squid || exit 1

ln -s ../../usr/share/squid/errors/English ${PKG}/etc/squid/errors || exit 1
ln -s ../../usr/share/squid/icons ${PKG}/etc/squid/icons || exit 1

mkdir -p ${PKG}/etc/logrotate.d
zcat ${CWD}/${NAME}.logrotate.gz >\
     ${PKG}/etc/logrotate.d/squid.new || exit 1

mkdir -p ${PKG}/etc/httpd/extra/
cat > ${PKG}/etc/httpd/extra/${NAME}.conf.new <<'EOF'
#
# This is /etc/httpd/extra/squid.conf
#

ScriptAlias /Squid/cgi-bin/cachemgr.cgi /usr/lib/squid/cachemgr.cgi

# Only allow access from localhost by default
<Location /Squid/cgi-bin/cachemgr.cgi>
 order allow,deny
 allow from localhost.localdomain
 # Add additional allowed hosts as needed
 # allow from .example.com
</Location>
EOF

mkdir -p ${PKG}/var/log/squid
mkdir -p ${PKG}/var/spool/squid  

mkdir -p ${PKG}/etc/rc.d
zcat ${CWD}/rc.${NAME}.gz > ${PKG}/etc/rc.d/rc.${NAME} || exit 1
chmod 0755 ${PKG}/etc/rc.d/rc.${NAME} || exit 1
zcat ${CWD}/${NAME}opts.conf.gz > ${PKG}/etc/squid/${NAME}opts.conf.new || exit 1

mkdir -p ${PKG}/var/log/setup
zcat ${CWD}/setup.onlyonce.rc${NAME}.gz > \
     ${PKG}/var/log/setup/setup.onlyonce.rc${NAME} || exit 1
chmod 0755 ${PKG}/var/log/setup/setup.onlyonce.rc${NAME} || exit 1

# remove unpackaged files from the buildroot
rm -f ${PKG}/usr/sbin/{RunAccel,RunCache}

rmdir ${PKG}/etc/squid/squid

( cd ${PKG}/etc/squid
  for f in squid.conf cachemgr.conf msntauth.conf mime.conf mib.txt ;do
    mv ${f} ${f}.new || exit 1
  done
) || exit 1

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  faq/* README ChangeLog QUICKSTART doc/* ${CWD}/ChangeLog.SB \
  contrib/{url-normalizer.pl,rredir.*,user-agents.pl} \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
    rm -f dir
    gzip -9 *
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
  CHROOT="chroot ${ROOTDIR} "
  ROOTDIR="${ROOTDIR}/"
fi

GROUP_ID=23
# Set up group.
if ! grep --quiet '^squid:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
            -g ${GROUP_ID} \
            squid 2> /dev/null
fi
# Set up user.
if ! grep --quiet '^squid:' etc/passwd ;then
  ${CHROOT} /usr/sbin/useradd \
            -u ${GROUP_ID} \
            -g squid \
            -s /bin/false \
            -d '/var/spool/squid' \
            squid 2> /dev/null
fi

EOF

cat >> ${PKG}/install/doinst.sh <<EOF
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
# Fix permissions'
${CHROOT} /bin/chown root.squid /etc/squid/squid.conf*
${CHROOT} /bin/chmod 0640 /etc/squid/squid.conf*
${CHROOT} /bin/chown root.squid /etc/squid/cachemgr.conf*
${CHROOT} /bin/chmod 0644 /etc/squid/cachemgr.conf*

${CHROOT} /bin/chown squid.squid /var/log/squid
${CHROOT} /bin/chmod 0750 /var/log/squid
${CHROOT} /bin/chown squid.squid /var/spool/squid
${CHROOT} /bin/chmod 0750 /var/spool/squid

${CHROOT} /bin/chown root.squid /usr/lib/squid/ncsa_auth
${CHROOT} /bin/chmod 4750 /usr/lib/squid/ncsa_auth

for i in /var/log/squid /var/spool/squid ; do
  if [ -d ${i} ] ; then
    for adir in $(find $i -maxdepth 0 \! -user squid); do
      ${CHROOT} chown -R squid.squid ${adir}
    done
  fi
done

case "$LANG" in
  bg*)
     DIR=Bulgarian
     ;;
  ca*)
     DIR=Catalan
     ;;
  cs*)
     DIR=Czech
     ;;
  da*)
     DIR=Danish
     ;;
  nl*)
     DIR=Dutch
     ;;
  en*)
     DIR=English
     ;;
  ea*)
     DIR=Estonian
     ;;
  fi*)
     DIR=Finnish
     ;;
  fr*)
     DIR=French
     ;;
  de*)
     DIR=German
     ;;
  he*)
     DIR=Hebrew
     ;;
  hu*)
     DIR=Hungarian
     ;;
  it*)
     DIR=Italian
     ;;
  ja*)
     DIR=Japanese
     ;;
  kr*)
     DIR=Korean
     ;;
  pl*)
     DIR=Polish
     ;;
  pt*)
     DIR=Portuguese
     ;;
  ro*)
     DIR=Romanian
     ;;
  ru*)
     DIR=Russian-koi8-r
     ;;
  sr*)
     DIR=Serbian
     ;;
  sk*)
     DIR=Slovak
     ;;
  es*)
     DIR=Spanish
     ;;
  sv*)
     DIR=Swedish
     ;;
  zh_TW*)
     DIR=Traditional_Chinese
     ;;
  zh_CN*)
     DIR=Simplify_Chinese
     ;;
  tr*)
     DIR=Turkish
     ;;
  greek)
     DIR=Greek
     ;;
  *)
     DIR=English
     ;;
 esac
 ln -snf ../../usr/share/squid/errors/${DIR} /etc/squid/errors
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${CWD}/${NAME}opts.conf.gz \
                 ${CWD}/{rc.,setup.onlyonce.rc}*.gz ${CWD}/FAQ.sgml.gz \
                 ${CWD}/${NAME}.logrotate.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.gz \
                 ${SBDIR}/patches/
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^  ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  /bin/chmod 0640 ./etc/squid/squid.conf* ;
  /bin/chmod 0644 ./etc/squid/cachemgr.conf* ;
  /bin/chmod 0750 ./var/log/squid ;
  /bin/chmod 0750 ./var/spool/squid ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0

