#!/bin/sh
#-- symsolon for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ symsolon.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://sourceforge.net/projects/symsolon/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=symsolon
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-0.4b}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
SLKTARGET=${SLKTARGET:-i486}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}
SRCARCHIVE=${SRCDIR}-src-${VERSION}.tgz

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
#DL_URL="http://dl.sf.net/sourceforge/${NAME}/${SRCARCHIVE}"
DL_URL="http://prdownloads.sourceforge.net/${NAME}/${SRCARCHIVE}"
#DL_URL="http://download.sf.net/${NAME}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

unset QTDIR QTINC QTLIB
export QTDIR=$(qmake-qt4 -query QT_INSTALL_PREFIX)

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
zcat ${CWD}/${NAME}-0.4b-prefix.patch.gz | patch -p0 -E --backup --verbose || exit 1

sed -i -e 's|^TryExec=|Exec=|g;/^Category=/d' \
           share/${NAME}/icons/${NAME}.desktop || exit 1

for filepro in $(find . -type f -name "*.pro") ; do
  echo "QMAKE_CFLAGS_RELEASE = ${SLKCFLAGS}" >> "${filepro}"
  echo "QMAKE_CXXFLAGS_RELEASE = ${SLKCFLAGS}" >> "${filepro}"
  echo "QMAKE_LFLAGS_RELEASE = ${LDFLAGS}" >> "${filepro}"
done

${QTDIR}/bin/qmake || exit 1

make -j${NJOBS} || exit 1

mkdir -p ${PKG}/usr/bin
install -m0755 bin/${NAME} ${PKG}/usr/bin/ || exit 1

mkdir -p ${PKG}/usr/share/${NAME}
cp -a share/${NAME}/* ${PKG}/usr/share/${NAME}/ || exit 1
find ${PKG}/usr/share/${NAME}/ -type d -print0 | xargs -0 chmod 0755
find ${PKG}/usr/share/${NAME}/ -type f -print0 | xargs -0 chmod 0644

mkdir -p ${PKG}/var/lib/${NAME}
( cd var/lib/${NAME} || exit 1
  for file in * ;do
    install -m0644 ${file} ${PKG}/var/lib/${NAME}/${file}.new || exit 1
  done
) || exit 1

mkdir -p ${PKG}/etc/
zcat ${CWD}/${NAME}-config.xml.gz > \
     ${PKG}/etc/${NAME}-config.xml.new || exit 1

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
)

mkdir -p ${PKG}/usr/share/applications
desktop-file-install --delete-original --vendor="" \
  --dir ${PKG}/usr/share/applications  \
  --add-category="Qt" \
  --add-category="Education" \
  --add-category="Science" \
  share/${NAME}/icons/${NAME}.desktop || exit 1

mkdir -p ${PKG}/usr/share/icons/hicolor/scalable/apps
install -p -m0644 share/${NAME}/icons/${NAME}.svg \
         ${PKG}/usr/share/icons/hicolor/scalable/apps/ || exit 1
for res in 64 128 ;do
  dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
  mkdir -p ${dir}
  install -p -m0644 \
    share/${NAME}/icons/${NAME}-icon-${res}.png ${dir}/${NAME}.png || exit 1
done
for res in 16 32 48 ;do
  dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
  mkdir -p ${dir}
  convert share/${NAME}/icons/${NAME}-icon-128.png -depth 8 -filter Lanczos \
          -resize ${res}x${res} ${dir}/${NAME}.png || exit 1
done

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  COPYING share/doc/symsolon/* ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find var/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/${NAME}-*.patch.gz ${CWD}/${NAME}-config.xml.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^  ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
