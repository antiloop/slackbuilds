#!/bin/sh
#-- util-linux-ng for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ util-linux-ng.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://userweb.kernel.org/~kzak/util-linux-ng/
# ftp://ftp.kernel.org/pub/linux/utils/util-linux-ng/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=util-linux-ng
ADJTNAME=adjtimex
NTOOLNAME=net-tools
SETSERNAME=setserial
ZIPTNAME=ziptool
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-2.14}
SVER=$(echo ${VERSION} | awk -F. '{ print $1"."$2 }')
ADJTVER=${ADJTVER:-1.24}
NTOOLVER=${NTOOLVER:-1.60}
SETSERVER=${SETSERVER:-2.17}
ZIPTVER=${ZIPTVER:-1.4.0}

if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
SLKTARGET=${SLKTARGET:-i486}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
ADJTDOCDIR=${PKG}/usr/doc/${ADJTNAME}-${ADJTVER}
SETSERDOCDIR=${PKG}/usr/doc/${SETSERNAME}-${SETSERVER}
ZIPTDOCDIR=${PKG}/usr/doc/${ZIPTNAME}-${ZIPTVER}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
ADJTSRCDIR=${ADJTNAME}-${ADJTVER}
NTOOLSRCDIR=${NTOOLNAME}-${NTOOLVER}
SETSERSRCDIR=${SETSERNAME}-${SETSERVER}
ZIPTSRCDIR=${ZIPTNAME}-${ZIPTVER}
SRCARCHIVE=${SRCDIR}.tar.bz2
ADJTSRCARCHIVE=${ADJTNAME}_${ADJTVER}.orig.tar.gz
PADJTSRCARCHIVE=${ADJTNAME}_${ADJTVER}-1.diff.gz
NTOOLSRCARCHIVE=${NTOOLSRCDIR}.tar.bz2
PNTOOLSRCARCHIVE=${NTOOLNAME}_${NTOOLVER}-19.diff.gz
SETSERSRCARCHIVE=${SETSERSRCDIR}.tar.gz
ZIPTSRCARCHIVE=${ZIPTSRCDIR}.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="ftp://ftp.kernel.org/pub/linux/utils/${NAME}/v${SVER}/${SRCARCHIVE}"
ADJTDL_URL="http://ftp.de.debian.org/debian/pool/main/a/${ADJTNAME}/${ADJTSRCARCHIVE}"
PADJTDL_URL="http://ftp.de.debian.org/debian/pool/main/a/${ADJTNAME}/${PADJTSRCARCHIVE}"
NTOOLDL_URL="http://www.tazenda.demon.co.uk/phil/${NTOOLNAME}/${NTOOLSRCARCHIVE}"
PNTOOLDL_URL="http://ftp.de.debian.org/debian/pool/main/n/${NTOOLNAME}/${PNTOOLSRCARCHIVE}"
SETSERDL_URL="http://prdownloads.sourceforge.net/${SETSERNAME}/${SETSERSRCARCHIVE}"
#ZIPTDL_URL="http://wolfpack.twu.net/users/wolfpack/${ZIPTSRCARCHIVE}"
ZIPTDL_URL="ftp://ftp.slackware.com/pub/slackware/slackware-current/source/a/${NAME}/${ZIPTSRCARCHIVE}"

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi
if ! test -r ${ADJTSRCARCHIVE}; then
  test -r ${CWD}/${ADJTSRCARCHIVE} || wget ${DL_OPTS} ${ADJTDL_URL} || exit 1
fi
if ! test -r ${PADJTSRCARCHIVE}; then
  test -r ${CWD}/patches/${PADJTSRCARCHIVE} || wget -P ${CWD}/patches ${DL_OPTS} ${PADJTDL_URL} || exit 1
fi
if ! test -r ${NTOOLSRCARCHIVE}; then
  test -r ${CWD}/${NTOOLSRCARCHIVE} || wget ${DL_OPTS} ${NTOOLDL_URL} || exit 1
fi
if ! test -r ${PNTOOLSRCARCHIVE}; then
  test -r ${CWD}/patches/${PNTOOLSRCARCHIVE} || wget -P ${CWD}/patches ${DL_OPTS} ${PNTOOLDL_URL} || exit 1
fi
if ! test -r ${SETSERSRCARCHIVE}; then
  test -r ${CWD}/${SETSERSRCARCHIVE} || wget ${DL_OPTS} ${SETSERDL_URL} || exit 1
fi
if ! test -r ${ZIPTSRCARCHIVE}; then
  test -r ${CWD}/${ZIPTSRCARCHIVE} || wget ${DL_OPTS} ${ZIPTDL_URL} || exit 1
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# Disabled login and init stuff from being built, as this is provided by 
# shadow and sysvinit
#
# /sbin/elvtune is not built, as configure says it only works with 2.2 and 
#   2.4 kernels

# This block is handled near the bottom of the script in symlink creation
# /bin/setterm -- now located in /usr/bin/setterm (might want to move and 
#   symlink ?)
# /bin/getopt -- same as setterm
# /usr/bin/readprofile -- now in /usr/sbin (might cause problems for some
#   scripts ?)
# /usr/bin/tunelp -- same as readprofile

# /usr/bin/clear -- not provided (part of ncurses package)
# /usr/bin/tput -- not provided (part of ncurses package)
# /usr/bin/setfdprm -- not provided (part of floppy package)

# You'll have to rebuild nfs-utils and kill these lines in the build
# script, as the mount code in util-linux-ng doesn't include the nfs
# helpers (and thus nfs mounts fail)
#  # Remove things that seem like bad ideas, and hope it all still works:
#  rm -f $PKG/sbin/*mount* $PKG/usr/man/man8/*mount.nfs*
#  rm -f $PKG/var/lib/nfs/*

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

unset LINGUAS

CFLAGS="${SLKCFLAGS} -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64" \
./configure \
  --prefix=/usr \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --enable-arch \
  --enable-agetty \
  --disable-init \
  --enable-kill \
  --enable-rdev \
  --disable-last \
  --enable-mesg \
  --enable-raw \
  --enable-rename \
  --enable-reset \
  --disable-login-utils \
  --enable-schedutils \
  --enable-wall \
  --enable-write \
  --enable-use-tty-group \
  --disable-makeinstall-chown \
  --build=${SLKTARGET}-slackware-linux \
  --host=${SLKTARGET}-slackware-linux || exit 1

make -j${NJOBS} || exit 1
make install DESTDIR=${PKG} || exit 1

# Install (probably obsolete) rdev manually:
cat ./sys-utils/rdev > ${PKG}/sbin/rdev || exit 1
chmod 755 ${PKG}/sbin/rdev


# Build ziptool
(
  if $(file -L ${CWD}/${ZIPTSRCARCHIVE} | grep -q ": bzip2"); then
    tar -xjvf ${CWD}/${ZIPTSRCARCHIVE} || exit 1
  elif $(file -L ${CWD}/${ZIPTSRCARCHIVE} | grep -q ": gzip"); then
    tar -xzvf ${CWD}/${ZIPTSRCARCHIVE} || exit 1
  fi
  cd ${ZIPTSRCDIR} || exit 1
  zcat ${SB_PATCHDIR}/${ZIPTNAME}-1.4.0-llh.patch.gz | patch -p0 || exit 1
  sed -i -e "/^CFLAGS/s|-O2|${SLKCFLAGS}|g" Makefile || exit 1
  make LINUX_SRC_DIR=/usr || exit 1
  cat ziptool > ${PKG}/sbin/ziptool || exit 1
  chmod 0755 ${PKG}/sbin/ziptool
  zcat ziptool.1.gz > ${PKG}/usr/man/man1/ziptool.1 || exit 1
  mkdir -p ${ZIPTDOCDIR}
  cp -a README ${ZIPTDOCDIR}/
) || exit 1

# Build bsdstrings
( tar -xvf ${CWD}/bsdstrings.tar.gz || exit 1
  cd bsdstrings || exit 1
  make || exit 1
  cat strings > ${PKG}/usr/bin/strings || exit 1
  chmod 0755 ${PKG}/usr/bin/strings || exit 1
  cat strings.1 > ${PKG}/usr/man/man1/strings.1 || exit 1
) || exit 1

# Add just the hostname utilities from net-tools, so that anyone
# installing just the A series will not have a hostname (null):
(
  if $(file -L ${CWD}/${NTOOLSRCARCHIVE} | grep -q ": bzip2"); then
    tar -xjvf ${CWD}/${NTOOLSRCARCHIVE} || exit 1
  elif $(file -L ${CWD}/${NTOOLSRCARCHIVE} | grep -q ": gzip"); then
    tar -xzvf ${CWD}/${NTOOLSRCARCHIVE} || exit 1
  fi
  cd ${NTOOLSRCDIR} || exit 1
  zcat ${SB_PATCHDIR}/net-tools.diff.gz | patch -p1 || exit 1
  zcat ${SB_PATCHDIR}/${PNTOOLSRCARCHIVE} | patch -p1 || exit 1
  make version.h || exit 1
  make hostname || exit 1
  cat hostname > ${PKG}/bin/hostname || exit 1
  chmod 755 ${PKG}/bin/hostname
  ( cd ${PKG}/bin || exit 1
    ln -sf hostname dnsdomainname
    ln -sf hostname nisdomainname
    ln -sf hostname ypdomainname
    ln -sf hostname domainname
  ) || exit 1
  cd man/en_US  || exit
  for page in hostname.1 dnsdomainname.1 nisdomainname.1 ypdomainname.1 \
    domainname.1 ; do
    cat ${page} > ${PKG}/usr/man/man1/${page}
  done
) || exit 1

# Build adjtimex
(
  if $(file -L ${CWD}/${ADJTSRCARCHIVE} | grep -q ": bzip2"); then
    tar -xjvf ${CWD}/${ADJTSRCARCHIVE} || exit 1
  elif $(file -L ${CWD}/${ADJTSRCARCHIVE} | grep -q ": gzip"); then
    tar -xzvf ${CWD}/${ADJTSRCARCHIVE} || exit 1
  fi
  cd ${ADJTSRCDIR} || exit 1
  zcat ${SB_PATCHDIR}/${ADJTSRCARCHIVE} | patch -p1 || exit 1
  CFLAGS=-O2 ./configure --prefix=/usr || exit 1
  make || exit 1
  cat adjtimex > ${PKG}/sbin/adjtimex || exit 1
  chmod 0755 ${PKG}/sbin/adjtimex || exit 1
  cat adjtimex.8 > ${PKG}/usr/man/man8/adjtimex.8 || exit 1
  mkdir -p ${ADJTDOCDIR}
  cp -a COPYING COPYRIGHT README README.ru adjtimex.lsm \
        ${ADJTDOCDIR}/
) || exit 1

# Build setserial
(
  if $(file -L ${CWD}/${SETSERSRCARCHIVE} | grep -q ": bzip2"); then
    tar -xjvf ${CWD}/${SETSERSRCARCHIVE} || exit 1
  elif $(file -L ${CWD}/${SETSERSRCARCHIVE} | grep -q ": gzip"); then
    tar -xzvf ${CWD}/${SETSERSRCARCHIVE} || exit 1
  fi
  cd ${SETSERSRCDIR} || exit 1
  zcat ${SB_PATCHDIR}/setserial-rc.serial.diff.gz | patch -E -p1 --verbose || exit 1
  ./configure --prefix=/usr || exit 1
  make || exit 1
  cat setserial > ${PKG}/sbin/setserial || exit 1
  chmod 0755 ${PKG}/sbin/setserial
  mkdir -p ${PKG}/etc/rc.d
  cat rc.serial > ${PKG}/etc/rc.d/rc.serial.new || exit 1
  cat serial.conf > ${PKG}/etc/serial.conf.new || exit 1
  cat setserial.8 > ${PKG}/usr/man/man8/setserial.8 || exit 1
) || exit 1

# These have always traditionally been available before /usr
# might be mounted:
( cd ${PKG}/usr/bin
  mv getopt setterm ${PKG}/bin
  cd ${PKG}/usr/bin
  ln -s ../../bin/getopt .
  ln -s ../../bin/setterm .
) || exit 1

# Now let's add some important symlinks :)
( cd ${PKG}/sbin
  ln -s ../bin/mount .
  ln -s ../bin/umount .
  ln -s ziptool jaztool
  ln -s hwclock clock
  cd ${PKG}/usr/sbin
  ln -s ../../sbin/cfdisk .
  ln -s ../../sbin/ctrlaltdel .
  ln -s ../../sbin/sfdisk .
  cd ${PKG}/usr/bin
  ln -s ../sbin/readprofile .
  ln -s ../sbin/tunelp .
  ln -s ../../bin/more .
  ln -s ../../sbin/raw .
  cd ${PKG}/usr/man/man1
  ln -s ziptool.1 jaztool.1
  cd ${PKG}/usr/man/man8
  ln -s hwclock.8 clock.8
) || exit 1

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)

# Add a documentation directory:
mkdir -p ${DOCDIR} ${SETSERDOCDIR}
cp -a \
  ABOUT-NLS AUTHORS COPYING DEPRECATED NEWS README* TODO ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${PKG}/usr/doc/ -type d -print0 | xargs -0 chmod 0755
find ${PKG}/usr/doc/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
    rm -f dir
    gzip -9 *
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
# Install the info files for this package
if [ -x usr/bin/install-info ] ; then
  \${CHROOT} /usr/bin/install-info --info-dir=/usr/info usr/info/ipc.info.gz 2>/dev/null
fi
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.serial.new:
if [ -e etc/rc.d/rc.serial ]; then
  cp -a etc/rc.d/rc.serial etc/rc.d/rc.serial.new.incoming
  cat etc/rc.d/rc.serial.new > etc/rc.d/rc.serial.new.incoming
  mv etc/rc.d/rc.serial.new.incoming etc/rc.d/rc.serial.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
# Fix permissions
${CHROOT}/bin/chmod 4755 /bin/mount
${CHROOT}/bin/chmod 4755 /bin/umount
${CHROOT} /bin/chown root:tty /usr/bin/wall
${CHROOT} /bin/chmod 2755 /usr/bin/wall
${CHROOT} /bin/chown root:tty /usr/bin/write
${CHROOT} /bin/chmod 2755 /usr/bin/write
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${CWD}/bsdstrings.tar.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.gz \
                 ${SBDIR}/patches/
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^  ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  /bin/chmod 4755 ./bin/umount ;
  /bin/chown root:tty ./usr/bin/wall ./usr/bin/write ;
  /bin/chmod 2755 ./usr/bin/wall ./usr/bin/write ;"
  
ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
