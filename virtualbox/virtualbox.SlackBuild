#!/bin/bash
#-- virtualbox for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ virtualbox.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.virtualbox.org/wiki/VirtualBox

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=VirtualBox
NAME=virtualbox
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-2.0.0-36011}
ARCH=i386
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to use system qt (broken)
SB_QT=${SB_QT:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${PNAME}-${VERSION}-Linux_x86.run
SSRCARCHIVE=${PNAME}SDK-${VERSION}.zip
SRCARCHIVE2=vditool

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://download.virtualbox.org/${NAME}/${VERSION}/${SRCARCHIVE}"
SDL_URL="http://download.virtualbox.org/virtualbox/2.0.0/VirtualBoxSDK-2.0.0-36011.zip"
DL_URL2="http://www.virtualbox.org/download/testcase/${SRCARCHIVE2}"

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} -O ${CWD}/${SRCARCHIVE} || exit 1
  #test -r ${CWD}/${SRCARCHIVE} || echo \
    #-e "Download binary ${SRCARCHIVE} at: \nhttp://www.virtualbox.org/wiki/Downloads" && exit 1
fi
if ! test -r ${SSRCARCHIVE}; then
  test -r ${CWD}/${SSRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi
if ! test -r ${SRCARCHIVE2}; then
  test -r ${CWD}/${SRCARCHIVE2} || wget ${DL_OPTS} ${DL_URL2} || exit 1
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
sh ${CWD}/${SRCARCHIVE} --noexec --target ${SRCDIR} || exit 1
cd ${SRCDIR} || exit 1
mkdir -p ${PNAME}
tar xjvf ${PNAME}.tar.bz2 -C ${PNAME} || exit 1
cd ${PNAME} || exit 1

unzip ${CWD}/${SSRCARCHIVE} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1

mkdir -p ${PKG}/usr/share/applications
sed \
  -e "/^DocPath=/s|=.*$|=file:///usr/lib/VirtualBox/UserManual.pdf|g" \
  -e "/^Icon=/s|=.*$|=${NAME}|g" ${PNAME}.desktop > \
${PKG}/usr/share/applications/${NAME}.desktop || exit 1

desktop-file-install --delete-original --vendor="" \
  --dir ${PKG}/usr/share/applications  \
  --remove-category="Emulator" \
  --remove-category="X-MandrivaLinux-System" \
  --add-category="Qt" \
  ${PKG}/usr/share/applications/${NAME}.desktop || exit 1

mkdir -p ${PKG}/usr/share/icons/hicolor/32x32/apps
install -m0644 VBox.png \
               ${PKG}/usr/share/icons/hicolor/32x32/apps/${NAME}.png || exit 1

mkdir -p ${PKG}/usr/lib/${NAME}

cp -a additions sdk UserManual.pdf \
      ${PKG}/usr/lib/${NAME}/ || exit 1

install -m0644 *.chm ${PKG}/usr/lib/${NAME}/ || exit 1
ln -sf ../../bin/kchmviewer ${PKG}/usr/lib/${NAME}/ || exit 1

rm -rf src sdk tst* rdesktop-vrdp.tar.gz deffiles install.sh routines.sh \
       runlevel.sh vboxdrv.sh VBox.sh VBox.png kchmviewer additions VirtualBox.desktop \
       vboxnet.sh LICENSE VirtualBox.chm VirtualBoxAPI.chm VBoxSysInfo.sh

cp -a * ${PKG}/usr/lib/${NAME}/ || exit 1
for each in VBoxSVC VBoxXPCOMIPCD VBoxTunctl vboxwebsrv ; do
  chmod 0750 ${PKG}/usr/lib/${NAME}/${each} || exit 1
done
for each in VBoxManage VBoxHeadless VBoxSDL VirtualBox ; do
  chmod 0710 ${PKG}/usr/lib/${NAME}/${each} || exit 1
done

ln -s ../VBoxVMM.so ${PKG}/usr/lib/${NAME}/components/VBoxVMM.so || exit 1
ln -s ../VBoxREM.so ${PKG}/usr/lib/${NAME}/components/VBoxREM.so || exit 1
ln -s ../VBoxRT.so  ${PKG}/usr/lib/${NAME}/components/VBoxRT.so || exit 1
ln -s ../VBoxDDU.so ${PKG}/usr/lib/${NAME}/components/VBoxDDU.so || exit 1
ln -s ../VBoxXPCOM.so ${PKG}/usr/lib/${NAME}/components/VBoxXPCOM.so || exit 1

mkdir -p ${PKG}/usr/bin
zcat ${CWD}/${NAME}.sh.gz > \
     ${PKG}/usr/bin/VBox || exit 1
chmod 0750 ${PKG}/usr/bin/VBox

mv ${PKG}/usr/lib/${NAME}/VBoxAddIF.sh ${PKG}/usr/bin/VBoxTAP || exit 1
chmod 0750 ${PKG}/usr/bin/VBoxTAP

mv ${PKG}/usr/lib/${NAME}/VBoxTunctl ${PKG}/usr/bin/ || exit 1

ln -s VBox ${PKG}/usr/bin/VirtualBox || exit 1
ln -s VBox ${PKG}/usr/bin/VBoxManage || exit 1
ln -s VBox ${PKG}/usr/bin/VBoxSDL || exit 1
ln -s VBox ${PKG}/usr/bin/VBoxHeadless || exit 1
ln -s VBox ${PKG}/usr/bin/VBoxVRDP || exit 1
ln -s VBox ${PKG}/usr/bin/vboxwebsrv || exit 1
ln -s VBoxTAP ${PKG}/usr/bin/VBoxAddIF || exit 1
ln -s VBoxTAP ${PKG}/usr/bin/VBoxDeleteIF || exit 1
ln -s ../lib/${NAME}/rdesktop-vrdp ${PKG}/usr/bin/rdesktop-vrdp || exit 1

cat > ${PKG}/usr/lib/${NAME}/${SRCARCHIVE2} <<EOF
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/lib/${NAME}
exec /usr/lib/${NAME}/${SRCARCHIVE2} "\$@"
EOF
chmod 0755 ${PKG}/usr/lib/${NAME}/${SRCARCHIVE2}
ln -s ../lib/${NAME}/${SRCARCHIVE2} ${PKG}/usr/bin/${SRCARCHIVE2} || exit 1

install -m0755 ${CWD}/${SRCARCHIVE2} ${PKG}/usr/lib/${NAME}/${SRCARCHIVE2}-bin || exit 1
strip --strip-unneeded ${PKG}/usr/lib/${NAME}/${SRCARCHIVE2}-bin || exit 1

# create virtualbox configurations files
mkdir -p ${PKG}/etc/vbox
cat > ${PKG}/etc/vbox/vbox.cfg.new <<EOF
INSTALL_DIR=/usr/lib/${NAME}
EOF

if [ "${SB_QT}" = "YES" ] ; then
  ln -sf ../libQtCore.so.4 ${PKG}/usr/lib/${NAME}/libVBoxQtCore.so.4 || exit 1
  ln -sf ../libQtGui.so.4 ${PKG}/usr/lib/${NAME}/libVBoxQtGui.so.4 || exit 1
fi

cat > ${PKG}/etc/vbox/interfaces.new <<'EOF'
# This file is for registering VirtualBox permanent host networking interfaces
# and optionally adding them to network bridges on the host.
# Each line should be of the format <interface name> <user name> [<bridge>].

EOF

mkdir -p ${PKG}/etc/udev/rules.d
echo 'KERNEL=="vboxdrv", GROUP="vboxusers" MODE=660' >> \
     ${PKG}/etc/udev/rules.d/60-${NAME}.rules.new || exit 1

# Startup scripts.
mkdir -p ${PKG}/etc/rc.d
zcat ${CWD}/rc.vboxdrv.gz > \
     ${PKG}/etc/rc.d/rc.vboxdrv.new || exit 1
chmod 0755 ${PKG}/etc/rc.d/rc.vboxdrv.new
install -m0755 ../vboxnet.sh ${PKG}/etc/rc.d/rc.vboxnet.new || exit 1

mkdir -p ${PKG}/var/log/setup
zcat ${CWD}/setup.onlyonce.rcvbox.gz > \
     ${PKG}/var/log/setup/setup.onlyonce.rcvbox || exit 1
chmod 0755 ${PKG}/var/log/setup/setup.onlyonce.rcvbox

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  ../LICENSE ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
ln -s ../../lib/${NAME}/UserManual.pdf ${DOCDIR}/
ln -s ../../lib/${NAME}/License-6.html ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir -p ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
    rm -f dir
    gzip -9 *
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
#!/bin/sh
function free_group_id {
  # Find a free group-ID >= 120 (should be < 1000 so it's not a normal group)
  local FREE_GROUP_ID=120
  while grep --quiet "^.*:.*:${FREE_GROUP_ID}:" etc/group; do
    let FREE_GROUP_ID++
  done
  echo ${FREE_GROUP_ID}
}

# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
  CHROOT="chroot ${ROOTDIR} "
  ROOTDIR="${ROOTDIR}/"
fi

# Set up group.
if ! grep --quiet '^vboxusers:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
            -g $(free_group_id) \
            vboxusers
fi

EOF

cat >> ${PKG}/install/doinst.sh <<EOF
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.vbox.new:
if [ -e etc/rc.d/rc.vboxdrv ]; then
  cp -a etc/rc.d/rc.vboxdrv etc/rc.d/rc.vboxdrv.new.incoming
  cat etc/rc.d/rc.vboxdrv.new > etc/rc.d/rc.vboxdrv.new.incoming
  mv etc/rc.d/rc.vboxdrv.new.incoming etc/rc.d/rc.vboxdrv.new
fi
if [ -e etc/rc.d/rc.vboxnet ]; then
  cp -a etc/rc.d/rc.vboxnet etc/rc.d/rc.vboxnet.new.incoming
  cat etc/rc.d/rc.vboxnet.new > etc/rc.d/rc.vboxnet.new.incoming
  mv etc/rc.d/rc.vboxnet.new.incoming etc/rc.d/rc.vboxnet.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
for each in VBox VBoxTunctl VBoxTAP ; do
  ${CHROOT} /bin/chown root.vboxusers usr/bin/${each}
  ${CHROOT} /bin/chmod 0750 usr/bin/${each}
done
for each in VBoxSVC VBoxXPCOMIPCD vboxwebsrv ; do
  ${CHROOT} /bin/chown root.vboxusers usr/lib/virtualbox/${each}
  ${CHROOT} /bin/chmod 0750 usr/lib/virtualbox/${each}
done
for each in VBoxManage VBoxHeadless VBoxSDL VirtualBox ; do
  ${CHROOT} /bin/chown root.vboxusers usr/lib/virtualbox/${each}
  ${CHROOT} /bin/chmod 4710 usr/lib/virtualbox/${each}
done
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/*.sh.gz ${CWD}/rc.vbox*.gz ${CWD}/setup.*.rc*.gz \
                 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
