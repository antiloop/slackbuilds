#!/bin/sh
#-- xmame for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.brg>
# Suggested usage: $ xmame.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://x.mame.net/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

CWD=`pwd`
if [ "${TMP}" = "" ]; then
  TMP=/tmp
fi

NAME=xmame
NAME2=xmess
PKG=${TMP}/package-${NAME}
PKG2=${TMP}/package-${NAME2}

VERSION=${VERSION:-0.106}
ARCH=${ARCH:-i686}
BUILD=${BUILD:-3}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
DOCDIR2=${PKG2}/usr/doc/${NAME2}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKGNAME2=${NAME2}-${VERSION/-/.}-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL=" http://x.mame.net/download/${SRCARCHIVE}"

if [ "${ARCH}" = "i386" ]; then
  SLKCFLAGS="-O2 -march=i386 -mtune=i686"
  MY_CPU=i386
elif [ "${ARCH}" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
  MY_CPU=i386
elif [ "${ARCH}" = "i686" ]; then
  SLKCFLAGS="-O3 -g -march=athlon64 -mtune=athlon64 -msse3 -pipe -fomit-frame-pointer -msse2 -mfpmath=sse -Wall -fno-merge-constants"
  MY_CPU=i386
elif [ "${ARCH}" = "s390" ]; then
  SLKCFLAGS="-O2"
elif [ "${ARCH}" = "x86_64" ]; then
  SLKCFLAGS="-O2"
  MY_CPU=amd64
fi

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
if [ -d ${PKG2} ]; then
  # Clean up a previous build
  rm -rf ${PKG2}
fi
mkdir -p ${PKG}
mkdir -p ${PKG2}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

find . -perm 777 -exec chmod 755 {} \;
find . -perm 666 -exec chmod 644 {} \;
find . -perm 664 -exec chmod 644 {} \;
find . -perm 644 -exec chmod 644 {} \;
find . -perm 640 -exec chmod 644 {} \;
find . -perm 444 -exec chmod 644 {} \;

find . -type d -name CVS | xargs rm -rf

zcat ${CWD}/${NAME}-0.100-libgl.patch.gz | patch -p1 -E --backup --verbose || exit 1

rm -f makefile Makefile; cp -ap makefile.unix Makefile

for dir in contrib doc; do
    if test -d ${dir}; then
        rm -rf ${dir}
        ln -s src/unix/${dir}
    fi
done

# Comment out the defaults, to enable overriding with the env variables
sed -i -e 's/^CFLAGS/# CFLAGS/g' Makefile || exit 1
sed -i -e 's/^LD/# LD/g' Makefile || exit 1
sed -i -e 's/^MY_CPU/# MY_CPU/g' Makefile || exit 1
# Use glibc libm
sed -i -e 's/^SEPARATE_LIBM/# SEPARATE_LIBM/g' Makefile || exit 1
# Disable stripping on install, to get proper debuginfo
sed -i -e 's/^ASM_STRIP/ASM_STRIP = true/g' Makefile || exit 1

# Make the package build verbose by default (to see opts etc.)
sed -i -e 's/^QUIET/# QUIET/g' src/unix/unix.mak || exit 1

CFLAGS="${SLKCFLAGS}"; export CFLAGS
export LD='$(CC) -Wl'
export JOY_STANDARD=1
export JOY_PAD=1
export LIGHTGUN_ABS_EVENT=1
export LIGHTGUN_DEFINE_INPUT_ABSINFO=1
export SOUND_ALSA=1
export SOUND_ESOUND=1
export SOUND_ARTS_SMOTEK=1
export SOUND_ARTS_TEIRA=1
export MY_CPU
export PREFIX=/usr

# Now, do all the building (this is long!)
for target in mame mess ; do
    export XMAMEROOT=/usr/share/${target}
    make -j${NJOBS} X11_OPENGL=1 TARGET=${target} || exit 1
done

make install-man \
        INSTALL_USER=`id -un` \
        INSTALL_GROUP=`id -gn` \
        MANDIR=${PKG}/usr/man/man6 \
        TARGET=mame || exit 1

make install-man \
        INSTALL_USER=`id -un` \
        INSTALL_GROUP=`id -gn` \
        MANDIR=${PKG2}/usr/man/man6 \
        TARGET=mess || exit 1

mkdir -p ${PKG}/usr/bin
install -p -m 0755 xmame.x11 chdman romcmp xml2info \
                  ${PKG}/usr/bin/ || exit 1
mkdir -p ${PKG2}/usr/bin
install -p -m 0755 xmess.x11 dat2html imgtool \
                  ${PKG2}/usr/bin/ || exit 1

mkdir -p ${PKG}/usr/share/mame/{cab,ctrl}
cp -a cab/* ${PKG}/usr/share/mame/cab/ || exit 1
install -pm 644 ctrlr/*.cfg \
                ${PKG}/usr/share/mame/ctrl/ || exit 1


( cd ${PKG}/usr/bin
  ln -s ${NAME}.x11 ${NAME}
) || exit 1
( cd ${PKG2}/usr/bin
    ln -s ${NAME2}.x11 ${NAME2}
) || exit 1



for pack in ${PKG} ${PKG2} ; do
( cd ${pack}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)
done

# We don't want all the docs
mkdir -p _docs/{xmame/html,xmess}
( cd src/unix/doc
    cp -ap {*.html,*.css,img} ../../../_docs/xmame/html/
    cp -ap changes.* dga2.txt multiplayer-readme.txt \
        xmame-doc.txt xmamerc.dist mame/* ../../../_docs/xmame/
    cp -ap xmessrc.dist mess/* ../../../_docs/xmess/
)
# Uncompress catver.ini (will be in the docs)
unzip -o -d _docs/ ${CWD}/catver.zip

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  README _docs/xmame/* contrib/tools/mame-cd ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

mkdir -p ${DOCDIR2}
cp -a \
  README _docs/xmess/* ${CWD}/ChangeLog.SB \
  ${DOCDIR2}/
find ${DOCDIR2}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR2}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
for pack in ${PKG} ${PKG2} ; do
 if [ -d ${pack}/usr/share/man ]; then
     mv ${pack}/usr/share/man ${PKG}/usr/man
 fi
 if [ -d ${pack}/usr/man ]; then
   ( cd ${pack}/usr/man
     for manpagedir in $(find . -type d -name "man*") ; do
       ( cd ${manpagedir}
         for eachpage in $( find . -type l -maxdepth 1) ; do
           ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
           rm ${eachpage}
         done
         gzip -9 *.?
       )
     done
   )
 fi
done

# Compress info pages, if any:
for pack in ${PKG} ${PKG2} ; do
 if [ -d ${pack}/usr/info ]; then
   ( cd ${pack}/usr/info
       rm -f dir
       gzip -9 *
   )
 fi
done

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc.${NAME} > ${PKG}/install/slack-desc
cat ${CWD}/slack-required.${NAME} > ${PKG}/install/slack-required
mkdir -p ${PKG2}/install
cat ${CWD}/slack-desc.${NAME2} > ${PKG2}/install/slack-desc
cat ${CWD}/slack-required.${NAME2} > ${PKG2}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc ${PKG2}/install/slack-desc

# Replicate slackbuild and patches
mkdir -p ${SBDIR}
install -m0644 ${CWD}/slack-desc* ${CWD}/slack-required* ${CWD}/ChangeLog.SB \
               ${CWD}/${NAME}*.patch.gz ${CWD}/catver.zip ${SBDIR}/
install -m0755 ${CWD}/${NAME}.SlackBuild \
               ${SBDIR}/${NAME}.SlackBuild
sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
        /^BUILD=/s/:-.*}/:-$BUILD}/
        /^ARCH=/s/:-.*}/:-$ARCH}/
        " ${SBDIR}/${NAME}.SlackBuild

# Build package:
set +o xtrace			# no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS2="set -o errexit -o xtrace ; cd ${PKG2} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "
ROOTCOMMANDS2="${ROOTCOMMANDS2}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME2}.tgz "

if test $UID = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
  echo ${ROOTCOMMANDS2} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
  /bin/su -c "${ROOTCOMMANDS2}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR}
    echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  rm -rf ${PKG}
  rm -rf ${PKG2}
  echo "Cleanup completed"
fi
