#!/bin/sh
#-- xmame for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.brg>
# Suggested usage: $ xmame.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://x.mame.net/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=xmame
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-0.106}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
SLKTARGET=${SLKTARGET:-i486}
BUILD=${BUILD:-4}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable xmess
SB_MESS=${SB_MESS:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://x.mame.net/download/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O3 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O3 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O3"
                 ;;
    x86_64)      SLKCFLAGS="-O3 -fPIC"
                 export MY_CPU="amd64"
                 ;;
  esac
fi

case "${ARCH}" in
  i[3-6]86)
    export MY_CPU="i386"
    ;;
esac

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

find . -type d -name CVS | xargs rm -rf

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
zcat ${CWD}/${NAME}-0.100-libgl.patch.gz | patch -p1 -E --backup --verbose || exit 1

rm -f makefile Makefile; cp -ap makefile.unix Makefile

for dir in contrib doc; do
  if test -d ${dir}; then
    rm -rf ${dir}
    ln -s src/unix/${dir}
  fi
done

# Comment out the defaults, to enable overriding with the env variables
sed -i -e 's/^CFLAGS/# CFLAGS/g' Makefile || exit 1
sed -i -e 's/^LD/# LD/g' Makefile || exit 1
sed -i -e 's/^MY_CPU/# MY_CPU/g' Makefile || exit 1
# Use glibc libm
sed -i -e 's/^SEPARATE_LIBM/# SEPARATE_LIBM/g' Makefile || exit 1
# Disable stripping on install, to get proper debuginfo
sed -i -e 's/^ASM_STRIP/ASM_STRIP = true/g' Makefile || exit 1

# Make the package build verbose by default (to see opts etc.)
sed -i -e 's/^QUIET/# QUIET/g' src/unix/unix.mak || exit 1

export CFLAGS="${SLKCFLAGS}"
export LD='$(CC) -Wl'
export JOY_STANDARD=1
export JOY_PAD=1
export LIGHTGUN_ABS_EVENT=1
#export LIGHTGUN_DEFINE_INPUT_ABSINFO=1
export SOUND_ALSA=1
export SOUND_ESOUND=1
#export SOUND_ARTS_SMOTEK=1
#export SOUND_ARTS_TEIRA=1
export EFFECT_MMX_ASM=1
export PREFIX=/usr

# Now, do all the building (this is long!)
export XMAMEROOT=/usr/share/mame
make -j${NJOBS} X11_OPENGL=1 TARGET=mame || exit 1

make install-man \
  INSTALL_USER=$(id -un) \
  INSTALL_GROUP=$(id -gn) \
  MANDIR=${PKG}/usr/man/man6 \
  TARGET=mame || exit 1

mkdir -p ${PKG}/usr/bin
install -p -m 0755 xmame.x11 ${PKG}/usr/bin/ || exit 1
for file in chdman romcmp xml2info ;do
  install -p -m 0755 ${file} ${PKG}/usr/bin/${file}-xmame || exit 1
done

ln -sf ${NAME}.x11 ${PKG}/usr/bin/${NAME}

if [ "${SB_MESS}" = "YES" ] ;then
  export XMAMEROOT=/usr/share/mess
  make -j${NJOBS} X11_OPENGL=1 TARGET=mess || exit 1

  make install-man \
    INSTALL_USER=$(id -un) \
    INSTALL_GROUP=$(id -gn) \
    MANDIR=${PKG}/usr/man/man6 \
    TARGET=mess || exit 1

  install -p -m 0755 xmess.x11 ${PKG}/usr/bin/ || exit 1
  for file in dat2html imgtool ;do
    install -p -m 0755 ${file} ${PKG}/usr/bin/${file}-xmess || exit 1
  done
  ln -sf xmess.x11 ${PKG}/usr/bin/xmess
fi

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)

# We don't want all the docs
mkdir -p _docs/{xmame/html,xmess}
( cd src/unix/doc
  cp -ap {*.html,*.css,img} ../../../_docs/xmame/html/
  cp -ap changes.* dga2.txt multiplayer-readme.txt \
         xmame-doc.txt xmamerc.dist mame/* ../../../_docs/xmame/
  cp -ap xmessrc.dist mess/* ../../../_docs/xmess/
)
# Uncompress catver.ini (will be in the docs)
unzip -o -d _docs/ ${CWD}/catver.zip

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  README _docs/xmame/* src/unix/cab ctrlr contrib/tools/mame-cd ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
if [ "${SB_MESS}" = "YES" ] ;then
  mkdir -p ${DOCDIR}/xmess
  cp -a  README _docs/xmess/* ${DOCDIR}/xmess/
fi
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/${NAME}*.patch.gz ${CWD}/catver.zip ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^  ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
