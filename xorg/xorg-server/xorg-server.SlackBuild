#!/bin/sh
#-- xorg-server for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ xorg-server.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.x.org/

# Requires:
#  bigreqsproto >= 1.0.2
#  compositeproto >= 0.3
#  damageproto >= 1.1
#  dmxproto >= 1.2.2
#  evieext >= 1.0.2
#  fixesproto >= 4.0
#  font-adobe-75dpi
#  font-cursor-misc
#  font-misc-misc
#  fontsproto >= 2.0.2
#  freetype
#  glproto >= 1.4.8
#  iceauth >= 1.0.2
#  inputproto >= 1.4.2.1
#  kbproto >= 1.0.3
#  libdrm >= 2.3.1
#  libX11 >= 1.1.4
#  libXau >= 1.0.3
#  libXaw >= 1.0.4
#  libXdmcp >= 1.0.2
#  libXext >= 1.0.2
#  libXfixes >= 4.0.3
#  libXfont >= 1.3.1
#  libXi >= 1.1.3
#  libXmu >= 1.0.3
#  libXpm >= 3.5.7
#  libXrender >= 0.9.4
#  libXres >= 1.0.3
#  libXtst >= 1.0.3
#  libXxf86misc >= 1.0.1
#  libXxf86vm >= 1.0.1
#  libdmx >= 1.0.2
#  libdrm >= 2.3.0
#  liblbxutil >= 1.0.1
#  libxkbfile >= 1.0.4
#  libxkbui >= 1.0.2
#  mesa >= 7.0.2
#  mkfontdir >= 1.0.3
#  mkfontscale >= 1.0.3
#  pixman >= 0.9.5
#  printproto >= 1.0.3
#  randrproto >= 1.2.1
#  recordproto >= 1.13.2
#  renderproto >= 0.9.3
#  resourceproto >= 1.0.2
#  rgb >= 1.0.1
#  scrnsaverproto >= 1.1.0
#  trapproto >= 3.4.3
#  videoproto >= 2.2.2
#  xauth >= 1.0.2
#  xbitmaps >= 1.0.1
#  xcmiscproto >= 1.1.2
#  xextproto >= 7.0.2
#  xf86bigfontproto >= 1.1.2
#  xf86dgaproto >= 2.0.3
#  xf86driproto >= 2.0.3
#  xf86miscproto >= 0.9.2
#  xf86rushproto >= 1.1.2
#  xf86vidmodeproto >= 2.2.2
#  xineramaproto >= 1.1
#  xinit >= 1.0.5
#  xkeyboard-config >= 1.2
#  xplsprinters >= 1.0.1
#  xproto > =7.0.12
#  xtrans >= 1.0.4

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp/xorg-server}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=xorg-server
PKGF=${PKGF:-${TMP}/package-${NAME}}
PKG=${PKGF}/${NAME}
#PKG2=${PKGF}/${NAME}-xdmx
PKG3=${PKGF}/${NAME}-xnest
PKG4=${PKGF}/${NAME}-xvfb

VERSION=${VERSION:-1.5.0}
MVER=${MVER:-7.1}
SLKDIST=${SLKDIST:-Slackware}
SLKVER=${SLKVER:-12.1.0}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-i686}
fi
SLKTARGET=${SLKTARGET:-i486}
BUILD=${BUILD:-2}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/xorg/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
#PKGNAME2=${NAME}-xdmx-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKGNAME3=${NAME}-xnest-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKGNAME4=${NAME}-xvfb-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable hal support
SB_HAL=${SB_HAL:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2
MSRCDIR=Mesa-${MVER}
MSRCARCHIVE=MesaLib-${MVER}.tar.bz2

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://xorg.freedesktop.org/releases/individual/xserver/${SRCARCHIVE}"
MDL_URL="${SF_MIRROR}/mesa3d"
MDL_URLB="http://www.mesa3d.org/beta"

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi
if ! test -r ${MSRCARCHIVE}; then
  test -r ${CWD}/${MSRCARCHIVE} || wget ${DL_OPTS} ${MDL_URLB} || wget ${DL_OPTS} ${MDL_URL} || exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        SLKCFLAGS="-O2"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
  esac
fi

if [ -d ${PKGF} ]; then
  # Clean up a previous build
    rm -rf ${PKGF}
fi
mkdir -p ${PKG} ${PKG2} ${PKG3} ${PKG4}

cd ${TMP}
rm -rf ${SRCDIR}
if $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${SRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${SRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1
if $(file -L ${CWD}/${MSRCARCHIVE} | grep -q ": bzip2"); then
  tar -xjvf ${CWD}/${MSRCARCHIVE} || exit 1
elif $(file -L ${CWD}/${MSRCARCHIVE} | grep -q ": gzip"); then
  tar -xzvf ${CWD}/${MSRCARCHIVE} || exit 1
fi

chmod -R u+w,go+r-w,a-s .

( cd ${MSRCDIR}

  find src/mesa/drivers/dri -name *.[hc] -exec egrep -l "\#define\W+DO_DEBUG\W+1" {} \; | xargs sed -i -re "s/\#define\W+DO_DEBUG\W+1/\#define DO_DEBUG 0/"

) || exit 1

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh || exit 1
fi

# Clean up for clean-generated-files patch
( cd hw/xprint || exit 1
  rm -f *-wrapper.c || exit 1
) || exit 1

[ "${SB_HAL}" = "YES" ] || SB_HALOPTS="--disable-config-hal"

# Servers to build:
BUILD_SERVERS="--enable-xorg --enable-xvfb --enable-xnest"
SKIP_SERVERS="--disable-xprint --disable-xdmx"

autoreconf -vi || exit 1

CFLAGS="${SLKCFLAGS}" \
./configure \
  --prefix=/usr \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --disable-static \
  --enable-xcsecurity \
  --enable-composite \
  --enable-xorgcfg \
  --with-pic \
  --with-int10=x86emu \
  --with-default-font-path="/usr/share/fonts/TTF,/usr/share/fonts/OTF,/usr/share/fonts/Type1,/usr/share/fonts/misc,/usr/share/fonts/75dpi/:unscaled" \
  --with-module-dir=/usr/lib/xorg/modules \
  --with-dri-driver-path=/usr/lib/xorg/modules/dri \
  --with-rgb-path=/usr/share/X11/rgb \
  --with-os-name="${SLKDIST} ${SLKVER}" \
  --with-os-vendor="${SLKDIST} Linux Project" \
  --with-mesa-source=${TMP}/${SRCDIR}/${MSRCDIR} \
  --with-xkb-path=/etc/X11/xkb \
  --with-xkb-output=/var/lib/xkb \
  ${BUILD_SERVERS} \
  ${SKIP_SERVERS} \
  --enable-glx-tls \
  --disable-dri2 ${SB_HALOPTS} \
  --build=${SLKTARGET}-slackware-linux || exit 1

make -j${NJOBS} || exit 1
make install DESTDIR=${PKG} || exit 1

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)

# Don't mess with my /var/log/ permissions:
rmdir ${PKG}/var/log
rmdir ${PKG}/var

# Fix xserver location:
mkdir -p ${PKG}/etc/X11
mv ${PKG}/usr/lib/xserver ${PKG}/etc/X11
( cd ${PKG}/usr/lib ; ln -sf ../../etc/X11/xserver . )
mv ${PKG}/etc/X11/app-defaults/XOrgCfg \
  ${PKG}/etc/X11/app-defaults/XOrgCfg.new || exit 1

#mkdir -p ${PKG2}/usr/bin
#mv ${PKG}/usr/bin/*dmx* ${PKG2}/usr/bin/ || exit 1

mkdir -p ${PKG3}/usr/bin
mv ${PKG}/usr/bin/Xnest ${PKG3}/usr/bin/ || exit 1

mkdir -p ${PKG4}/usr/bin
mv ${PKG}/usr/bin/Xvfb ${PKG4}/usr/bin/ || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
  if [ -d ${PKG}/usr/share/doc ]; then
    mv ${PKG}/usr/share/doc/*/* ${DOCDIR}/
    rm -rf ${PKG}/usr/share/doc
    rmdir ${PKG}/usr/share
  fi
cp -a \
  AUTHORS COPYING ChangeLog LICENSE README NEWS THANKS TODO ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.? *.??
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

#mkdir -p ${PKG2}/usr/man/man1
#mv ${PKG}/usr/man/man1/*dmx* ${PKG2}/usr/man/man1/ || exit 1

mkdir -p ${PKG3}/usr/man/man1
mv ${PKG}/usr/man/man1/Xnest.1* ${PKG3}/usr/man/man1/ || exit 1

mkdir -p ${PKG4}/usr/man/man1
mv ${PKG}/usr/man/man1/Xvfb.1* ${PKG4}/usr/man/man1/ || exit 1

for dir in ${PKG} ${PKG3} ${PKG4} ;do
  mkdir -p ${dir}/install
done
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required
#cat ${CWD}/slack-desc.xdmx > ${PKG2}/install/slack-desc
cat ${CWD}/slack-desc.xnest > ${PKG3}/install/slack-desc
cat ${CWD}/slack-desc.xvfb > ${PKG4}/install/slack-desc

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
  echo '# Fix permissions' >> ${PKG}/install/doinst.sh
  echo '${CHROOT} /bin/chmod 4755 /usr/bin/Xorg' >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc* ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.gz \
                 ${SBDIR}/patches/
  sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
          /^BUILD=/s/:-.*}/:-$BUILD}/
          /^  ARCH=/s/:-.*}/:-$ARCH}/
          " ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  /bin/chmod 4755 ./usr/bin/Xorg; "
#ROOTCOMMANDS2="set -o errexit -o xtrace ; cd ${PKG2} ;
#  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS3="set -o errexit -o xtrace ; cd ${PKG3} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS4="set -o errexit -o xtrace ; cd ${PKG4} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "
#ROOTCOMMANDS2="${ROOTCOMMANDS2}
#  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME2}.tgz "
ROOTCOMMANDS3="${ROOTCOMMANDS3}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME3}.tgz "
ROOTCOMMANDS4="${ROOTCOMMANDS4}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME4}.tgz "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
#  echo ${ROOTCOMMANDS2} | fakeroot
  echo ${ROOTCOMMANDS3} | fakeroot
  echo ${ROOTCOMMANDS4} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
#  /bin/su -c "${ROOTCOMMANDS2}"
  /bin/su -c "${ROOTCOMMANDS3}"
  /bin/su -c "${ROOTCOMMANDS4}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKGF} ]; then
    rm -rf ${PKGF} & echo "${PKGF} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
