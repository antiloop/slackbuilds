#!/bin/sh
#-- xosd for Slackware --
# Build script by Phantom X <megaphantomx@bol.com.br>
# Suggested usage: $ xosd.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.ignavus.net/software.html

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=xosd
NAME2=xmms-${NAME}
PKG=${PKG:-${TMP}/package-${NAME}}
PKG2=${PKG2:-${TMP}/package-${NAME2}}

VERSION=${VERSION:-2.2.14}
ARCH=${ARCH:-i686}
BUILD=${BUILD:-3}
NJOBS=${NJOBS:-2}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKGNAME2=${NAME2}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${NAME}_${VERSION}.orig.tar.gz

DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://ftp.debian.org/debian/pool/main/x/${NAME}/${SRCARCHIVE}"

if [ "${ARCH}" = "i386" ]; then
  SLKCFLAGS="-O2 -march=i386 -mtune=i686"
elif [ "${ARCH}" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
elif [ "${ARCH}" = "i686" ]; then
  SLKCFLAGS="-O2 -march=athlon64 -mtune=athlon64 -msse3 -pipe -fomit-frame-pointer"
elif [ "${ARCH}" = "s390" ]; then
  SLKCFLAGS="-O2"
elif [ "${ARCH}" = "x86_64" ]; then
  SLKCFLAGS="-O2"
fi

# if source is not present, download in source rootdir if possible, or in /tmp
if ! test -r ${SRCARCHIVE}; then
  test -r ${CWD}/${SRCARCHIVE} || wget ${DL_OPTS} ${DL_URL} || exit 1
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
if [ -d ${PKG2} ]; then
  # Clean up a previous build
  rm -rf ${PKG2}
fi

mkdir -p ${PKG} ${PKG2}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xzvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
zcat ${CWD}/${NAME}-aclocal18.patch.gz | patch -p0 -E --backup --verbose || exit 1
zcat ${CWD}/${NAME}-defaults.patch.gz | patch -p1 -E --backup --verbose || exit 1

CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
./configure \
  --prefix=/usr \
  --sysconfdir=/etc \
  --localstatedir=/var/lib \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --disable-static \
  --disable-dependency-tracking \
  --build=${ARCH}-slackware-linux || exit 1

make -j${NJOBS} || exit 1

sed -i -e "s|${SLKCFLAGS}\\s*|| ; s|\\s*-Wall||" script/xosd-config || exit 1

make install DESTDIR=${PKG} || exit 1

rm -f ${PKG}{/usr/lib,/usr/lib/xmms/General}/*.la

( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)

if [ -f ${PKG}/usr/lib/xmms/General/libxmms_osd.so ] ;then
  mkdir -p ${PKG2}/usr/lib/xmms/General
  mv ${PKG}/usr/lib/xmms/General/libxmms_osd.so \
     ${PKG2}/usr/lib/xmms/General/ || exit 1
  rmdir -p ${PKG}/usr/lib/xmms/General
fi

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS COPYING ChangeLog LICENSE README NEWS THANKS TODO ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
    mv ${PKG}/usr/share/man ${PKG}/usr/man
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
      rm -f dir
      gzip -9 *
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

mkdir -p ${PKG2}/install
cat ${CWD}/slack-desc.xmms > ${PKG2}/install/slack-desc
cat ${CWD}/slack-required.xmms > ${PKG2}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc ${PKG2}/install/slack-desc

# Replicate slackbuild and patches
mkdir -p ${SBDIR}
install -m0644 ${CWD}/slack-desc* ${CWD}/slack-required* ${CWD}/ChangeLog.SB \
               ${CWD}/${NAME}-*.patch.gz ${SBDIR}/
install -m0755 ${CWD}/${NAME}.SlackBuild \
               ${SBDIR}/${NAME}.SlackBuild
sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
        /^BUILD=/s/:-.*}/:-$BUILD}/
        /^ARCH=/s/:-.*}/:-$ARCH}/
        " ${SBDIR}/${NAME}.SlackBuild

# Build package:
set +o xtrace			# no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS2="set -o errexit -o xtrace ; cd ${PKG2} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.tgz "
ROOTCOMMANDS2="${ROOTCOMMANDS2}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME2}.tgz "

if test $UID = 0; then
  eval ${ROOTCOMMANDS}
  eval ${ROOTCOMMANDS2}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
  echo ${ROOTCOMMANDS2} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
  /bin/su -c "${ROOTCOMMANDS2}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR}
    echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG}
    echo "${PKG} cleanup completed"
  fi
  if [ -d ${PKG2} ]; then
    rm -rf ${PKG2}
    echo "${PKG2} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
